class X

  var public Xsrv = NULL;
  let XINIT_BIN = Sys.which ("xinit");
  let ISCROUTON = NULL != Sys.which ("croutonversion");

#if This.request.X
  def is_running ()
    XIsRunning (); % from the xclient-module
  end

  def __xget_free_displaynr () proc
    variable i = 0;
    while (i < 6)
      {
      ifnot (Dir.isdirectory (sprintf ("/tmp/.X%d-lock", i)))
        return sprintf (":%d", i);

      i++;
      }

    NULL;
  end

  def Xstart () proc
    if (NULL == XINIT_BIN)
      throw ClassError, "xinit cannot be found in $PATH";

    variable dis = __xget_free_displaynr ();

    if (is_running (NULL) || dis == NULL || NULL == Xsrv)
      return;

    variable p = Proc.init (0, 1, 1);
    p.stdout.file = SCRATCH;
    p.stderr.file = SCRATCH;

    variable argv;
    % for the chromebook that runs crouton with its own xinit wrapper
    if (ISCROUTON)
      argv = [XINIT_BIN, Env->BIN_PATH + "/__xstart", "-nolisten", "tcp"];
    else
      argv = [XINIT_BIN, Env->BIN_PATH + "/__xstart", "--", dis,
        "-nolisten", "tcp"];

    variable status = p.execv (argv, NULL);

    __toscratch  ("\nexit_status: " + string (status.exit_status) + "\n");

    __scratch (NULL);
  end

  def comlist (a)
    a["!Xstart"] = @Argvlist_Type;
    a["!Xstart"].func = &Xstart;
  end
#endif

#ifnot This.request.X
  def is_running ()
    NULL != getenv ("DISPLAY");
  end

  def comlist (a)
  end
#endif
end
