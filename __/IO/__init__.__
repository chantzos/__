class IO

  let PIP_CAP = 65535;

  def print (str)
    variable std = __get_qualifier_as (File_Type, qualifier ("std"), stdout);

    variable ufd = _fileno (std);

    if (1 > ufd > 2)
      throw ClassError, sprintf ("IO::print: unacceptable stream");

    variable tofp = NULL == (tofp = __get_qualifier_as (
        File_Type, qualifier ("fp"), NULL), tofp)
      ? This.is.tty ()
        ? std
        : NULL
      : tofp;

    ifnot (NULL == tofp)
      {
      if (any (-1 == array_map (Integer_Type, &fprintf, tofp, "%s", str)))
        throw ClassError, sprintf ("IO_WriteError:%S, %s",
          ["stdout", "stderr"][ufd - 1], errno_string (errno)), NULL;
      }
    else
      {
      variable fd = __get_qualifier_as (FD_Type, qualifier ("fd"),
        [This.is.std.out.fd, This.is.std.err.fd][ufd - 1]);

      if (-1 == lseek (fd, 0, SEEK_END))
        throw ClassError, sprintf ("IO_LseekError:%S, %s",
          ["stdout", "stderr"][ufd - 1], errno_string (errno)), NULL;

      if (Array_Type == typeof (str))
        {
        variable i;
        _for i (0, length (str) - 1)
          if (-1 == write (fd, str[i]))
            throw ClassError, sprintf ("IO_WriteError:%S, %s",
              ["stdout", "stderr"][ufd - 1], errno_string (errno)), NULL;
        }
      else
        if (-1 == write (fd, str))
          throw ClassError, sprintf ("IO_WriteError:%S, %s",
            ["stdout", "stderr"][ufd - 1], errno_string (errno)), NULL;
      }
  end

  def fmt (args)
    variable str;
    if (1 == length (args) && typeof (args[0]) == Array_Type &&
        any ([String_Type, Integer_Type, UInteger_Type, Char_Type] == _typeof (args[0])))
      str = strjoin (array_map (String_Type, &sprintf, "%S%S", args[0],
        qualifier_exists ("n") ? "" : "\n"));
    else if (1 == length (args) && typeof (args) == List_Type)
      {
      variable i;
      str = "";
      _for i (0, length (args) - 1)
        if (Struct_Type == typeof (args[i]))
          str += Struct.to_string (args[i]) + (qualifier_exists ("n") ? "" : "\n");
        else if (Assoc_Type == typeof (args[i]))
          str += Assoc.to_string (args[i];;__qualifiers) + (qualifier_exists ("n") ? "" : "\n");
        else if (Array_Type == typeof (args[i]) &&
          any ([String_Type, Integer_Type, UInteger_Type, Char_Type] == _typeof (args[i])))
          {
          variable ia;
          _for ia (0, length (args[i]) - 1)
            str += sprintf ("%S%S", args[i][ia],
            qualifier_exists ("n") ? "" : "\n");
          }
        else
          str += sprintf ("%S%S", args[i],
          qualifier_exists ("n") ? "" : "\n");
        }
    else
      {
      variable _fmt_ = "%S ";
      if (length (args) > 1)
        loop (length (args) - 1) _fmt_ += "%S ";
      else
        _fmt_ = "%S";

      _fmt_ += "%S";

      str = sprintf (_fmt_, __push_list (args), qualifier_exists ("n") ? "" : "\n");
      }

    variable len = strlen (str);

    if (PIP_CAP < len)
      {
      variable pos = 1;
      variable str_ar = String_Type[len / PIP_CAP + (len mod PIP_CAP ? 1 : 0)];
      _for i (0, length (str_ar) - 1)
        {
        str_ar[i] = substr (str, pos, PIP_CAP);
        pos += PIP_CAP;
        }

      return str_ar;
      }

    str;
  end

  def open_fn (fname)
    variable fd;

    if (-1 == access (fname, F_OK))
      fd = open (fname, File->FLAGS["<>"], File->PERM["_PRIVATE"]);
    else
      fd = open (fname, File->FLAGS["<>|"], File->PERM["_PRIVATE"]);

    if (NULL == fd)
      throw ClassError, "IO::open_fn::" + fname + ", " + errno_string (errno);

    variable st = fstat (fd);
    if (-1 == Sys.checkperm (st.st_mode, File->PERM["_PRIVATE"]))
      if (-1 == Sys.setperm (fname, File->PERM["_PRIVATE"]))
        throw ClassError, "IO::open_fn::wrong permissions for " + fname;

    fd;
  end

  fun ask (quest_ar, ar)

  fun tostderr (?) muttable

  fun tostdout (?) muttable
end
