class File
  let FLAGS = Assoc.new (Integer_Type, [
    "<", ">>", ">", ">|", ">>|", "<>>", "<>", "<>>|", "<>|"], [
    O_RDONLY,                     % <
    O_WRONLY|O_APPEND,            % >>
    O_WRONLY|O_CREAT,             % >
    O_WRONLY|O_CREAT|O_TRUNC,     % >|
    O_WRONLY|O_CREAT|O_APPEND,    % >>|
    O_RDWR|O_APPEND,              % <>>
    O_RDWR|O_CREAT,               % <>
    O_RDWR|O_CREAT|O_APPEND,      % <>>|
    O_RDWR|O_CREAT|O_TRUNC,       % <>|
    ]);

  let PERM = Assoc.new (Integer_Type, [
    "PRIVATE", "_PRIVATE", "STATIC", "_STATIC", "__STATIC",
    "PUBLIC", "_PUBLIC", "__PUBLIC", "___PUBLIC"], [
    S_IRWXU,                                 % 0700
    S_IRUSR|S_IWUSR,                         % 0600
    S_IRWXU|S_IRWXG,                         % 0770
    S_IRWXU|S_IRGRP|S_IXGRP,                 % 0750
    S_IRUSR|S_IWUSR|S_IRGRP,                 % 0640
    S_IRWXU|S_IRWXG|S_IRWXO,                 % 0777
    S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH|S_IXOTH, % 0755
    S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH,         % 0644
    S_IRUSR|S_IWUSR|S_IWGRP|S_IWOTH,         % 0622
    ]);

  fun copy (src, dest)
  end

  fun are_same (filea, fileb)
  end

  fun is_block (file)
  end

  fun is_chr (file)
  end

  fun is_elf (file)
  end

  fun is_fifo (file)
  end

  fun is_lnk (file)
  end

  fun is_reg (file)
  end

  fun is_sock (file)
  end

  def read (file)
    if (-1 == access (file, F_OK|R_OK))
      throw ClassError, sprintf ("IO_Read_Error::read, %S, %s", file,
        errno_string (errno));

    variable fd = open (file, O_RDONLY);

    if (NULL == fd)
      throw ClassError, sprintf ("IO::read file descriptor: %S", errno_string (errno));

    variable buf;
    variable str = "";

    () = lseek (fd, qualifier ("offset", 0), qualifier ("seek_pos", SEEK_SET));

    while (read (fd, &buf, 4096) > 0)
      str += buf;

    str;
  end

  def readlines (file)
    strchop (self.read (file;;__qualifiers), '\n', 0);
  end
end
