class File
  import pcre

  let FLAGS = Assoc.new (Integer_Type, [
    "<", ">>", ">", ">|", ">>|", "<>>", "<>", "<>>|", "<>|"], [
    O_RDONLY,                     % <
    O_WRONLY|O_APPEND,            % >>
    O_WRONLY|O_CREAT,             % >
    O_WRONLY|O_CREAT|O_TRUNC,     % >|
    O_WRONLY|O_CREAT|O_APPEND,    % >>|
    O_RDWR|O_APPEND,              % <>>
    O_RDWR|O_CREAT,               % <>
    O_RDWR|O_CREAT|O_APPEND,      % <>>|
    O_RDWR|O_CREAT|O_TRUNC,       % <>|
    ]);

  let PERM = Assoc.new (Integer_Type, [
    "PRIVATE", "_PRIVATE", "STATIC", "_STATIC", "__STATIC",
    "PUBLIC", "_PUBLIC", "__PUBLIC", "___PUBLIC"], [
    S_IRWXU,                                 % 0700
    S_IRUSR|S_IWUSR,                         % 0600
    S_IRWXU|S_IRWXG,                         % 0770
    S_IRWXU|S_IRGRP|S_IXGRP,                 % 0750
    S_IRUSR|S_IWUSR|S_IRGRP,                 % 0640
    S_IRWXU|S_IRWXG|S_IRWXO,                 % 0777
    S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH|S_IXOTH, % 0755
    S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH,         % 0644
    S_IRUSR|S_IWUSR|S_IWGRP|S_IWOTH,         % 0622
    ]);

  fun copy (src, dest)
  fun copy_recursive (source, dest)
  fun copy_opts ()
  fun __copy__ (source, dest, st_source, st_dest, opts)
  fun ln (source, dest, opts)
  fun are_same (filea, fileb)
  fun is_block (file)
  fun is_chr (file)
  fun is_elf (file)
  fun is_fifo (file)
  fun is_lnk (file)
  fun is_reg (file)
  fun is_sock (file)
  fun move (source, dest, opts)
  fun extract (archive, verbose, dir, strip)
  fun remove (file, interactive, isdir)

  subclass Is
    __init__
      dos
      unix
    end

    def __is_routine__ (file, buf) proc
      if (-1 == access (file, F_OK))
        return 0;

      variable fp = qualifier ("fp", fopen (file, "r"));
      if (NULL == fp)
        return 0;

      variable curseek = ftell (fp);

      if (-1 == fseek (fp, 0, SEEK_SET))
        return 0;

      variable bts = fgets (buf, fp);
      () = fseek (fp, curseek, SEEK_SET);
      bts;
    end

    def dos (file)
      variable
        buf,
        bts = __is_routine__ (file, &buf;;__qualifiers);

      (bts > 1 && buf[-2] == 13 && buf[-1] == 10);
    end

    def unix (file)
      variable
        buf,
        bts = __is_routine__ (file, &buf;;__qualifiers);

      (bts && buf[-1] == 10 && (bts == 1 || buf[-2] != 10));
    end

    % bzip2 =  (bts > 9 && substr (buf, 1, 10) == "BZh91AY&SY");
    % gzip  =  (bts == 3 && buf[0] == 31 && buf[1] == 139 && buf[2] == 8);

  end

  def is_type (mode, type)
    NULL == mode ? 0 : stat_is (type, mode);
  end

  def exists (file)
    access (file, F_OK) ? 0 : 1;
  end

  def read (file)
    variable fd;

    ifnot (FD_Type == typeof (file))
      {
      if (-1 == access (file, F_OK|R_OK))
        throw ClassError, sprintf ("IO_Read_Error::read, %S, %s", file,
          errno_string (errno));

      fd = open (file, O_RDONLY);

      if (NULL == fd)
        throw ClassError, sprintf ("IO::read file descriptor: %S", errno_string (errno));
      }
   else
     fd = file;

    variable buf;
    variable str = "";

    () = lseek (fd, qualifier ("offset", 0), qualifier ("seek_pos", SEEK_SET));

    while (read (fd, &buf, 4096) > 0)
      str += buf;

    str;
  end

  def readlines (file)
    variable
      end = qualifier ("end", NULL),
      fp = fopen (file, "r");

    if (NULL == fp)
      return NULL;

    ifnot (NULL == end)
      array_map (String_Type, &strtrim_end, fgetslines (fp, end), "\n");
    else
      array_map (String_Type, &strtrim_end, fgetslines (fp), "\n");
  end

  def __write__ (fd, str) proc
    if (-1 == write (fd, str))
      {
      IO.tostderr (qualifier ("file", ""), ": " + errno_string (errno));
      return -1;
      }

    0;
  end

  def __get_str__ (str) proc
    variable type = typeof (@str);
    if (any ([String_Type, BString_Type] == type))
      @str = [@str + (qualifier_exists ("n")
        ? ""
        : '\n' == (@str)[-1]
          ? ""
          : "\n")];
    else
      ifnot (Array_Type == type)
        @str = NULL;
      else
        ifnot (any ([BString_Type, String_Type] == _typeof (@str)))
          @str = NULL;
        else
          ifnot (length (@str))
            ifnot (qualifier_exists ("abort_on_no_length"))
              @str = [""];
            else
              @str = NULL;
          else
            ifnot (qualifier_exists ("n"))
              @str += "\n";
  end

  def write (file, str)
    __get_str__  (&str;;__qualifiers);

    if (NULL == str)
      {
      IO.tostderr ("type of string should be B?String_Type []?");
      return -1;
      }

    variable fd = open (file, O_WRONLY|O_CREAT|O_TRUNC, __get_qualifier_as
       (Integer_Type, qualifier ("mode"), PERM["__STATIC"]));

    if (NULL == fd)
      {
      IO.tostderr (file + ": " + errno_string (errno));
      return -1;
      }

    if (any (-1 == Array.map (Integer_Type, &__write__, fd, str;file = file)))
      return -1;

    if (-1 == close (fd))
      {
      IO.tostderr (file + ": " + errno_string (errno));
      return -1;
      }

    0;
  end

  def append (file, str)
    variable
      flags = O_WRONLY|O_APPEND,
      mode = NULL,
      fd;

    __get_str__ (&str;;__qualifiers);

    if (NULL == str)
      {
      IO.tostderr ("type of string should be B?String_Type []?");
      return -1;
      }

    if (-1 == access (file, F_OK|R_OK))
      ifnot (qualifier_exists ("create"))
        {
        IO.tostderr (file + ": " + errno_string (errno));
        return -1;
        }
      else
        mode = __get_qualifier_as (Integer_Type, qualifier ("mode"), PERM["__STATIC"]);

    ifnot (NULL == mode)
      fd = open (file, O_WRONLY|O_APPEND|O_CREAT, mode);
    else
      fd = open (file, O_WRONLY|O_APPEND);

    if (NULL == fd)
      {
      IO.tostderr (file + ": " + errno_string (errno));
      return -1;
      }

    if (-1 == lseek (fd, 0, SEEK_END))
      {
      IO.tostderr (file + ": " + errno_string (errno));
      return -1;
      }

    if (any (-1 == Array.map (Integer_Type, &__write__, fd, str;
        file = file)))
      return -1;

    if (-1 == close (fd))
      {
      IO.tostderr (file + ": " + errno_string (errno));
      return -1;
      }

    0;
  end

  def mktmp (dir, fn)
    if (dir == ".")
      dir = getcwd ();

    ifnot (path_is_absolute (dir))
      dir = getcwd + "/" + dir;

    dir = realpath (dir);

    if (NULL == dir || 0 == Dir.isdirectory (dir))
      return NULL;

    variable al = listdir (dir);

    variable fd = mkstemp (dir + "/" + fn + ".XXXXXX");
    if (NULL == fd)
      return NULL;

    variable bl = listdir (dir);
    variable d = Diff.new (al, bl);
    variable file = d[wherenot (strncmp (d, "+", 1))[0]];
    struct {file = dir + "/" + substr (file, 2, -1), fd = fd};
  end
end
