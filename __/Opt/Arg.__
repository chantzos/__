subclass Arg
  __init__
    replace
    compare
    exists
    getlong
    geterr
  end

  var err = NULL;

  def geterr ()
    err;
    err = NULL;
  end

  def getlong (arg, type, argv)
    variable opt, ind, err_msg;
    (opt, ind) = self.compare ("--" + arg + "=", argv;;struct {@__qualifiers, ret_arg});

    if (NULL == ind)
      {
      err_msg = __get_qualifier_as (String_Type, "exists_err", qualifier ("exists_err"),
          NULL);
      return NULL;
      }

    opt = strtok (opt, "=");

    if (2 > length (opt))
      {
      err = "No value specified";
      return NULL;
      }

    opt = strjoin (opt[[1:]], "=");

    if (NULL == type)
      return opt;

    switch (type)
      {
      case "string":
        return opt;
      }

      {
      case "int" || case "integer":
        if (1 != __is_datatype_numeric (_slang_guess_type (opt)))
  	       return NULL;

   	    return atoi (opt);
      }

      {
      case "dir" || case "directory":
        ifnot (Dir.isdirectory (opt))
          {
          err = "--" + arg + "=" + opt + ", doesn't specify a directory";
          return NULL;
          }

        return opt;
      }

      {
      case "fname" || case "filename":
        ifnot (File.is_reg (opt))
          return NULL;

        return opt;
      }

      {
      return NULL;
      }
  end

  def exists (arg, argv)
    variable index = wherefirst (arg == @argv);
    variable ret = qualifier_exists ("ret_arg");

    if (NULL == index)
      {
      if (ret)
        NULL;

      return NULL;
      }

    if (ret)
      ret = (@argv)[index];
    else
      ret = NULL;

    if (qualifier_exists ("del_arg"))
      Array.delete_at (argv, index);

    ifnot (NULL == ret)
      ret;

    index;
  end

  def compare (arg, argv)
    variable index = wherenot (strncmp (@argv, arg, strlen (arg)));
    variable ret = qualifier_exists ("ret_arg");

    ifnot (length (index))
      {
      if (ret)
        NULL;

      return NULL;
      }

    if (ret)
      ret = (@argv)[index[0]];
    else
      ret = NULL;

    if (qualifier_exists ("del_arg"))
      Array.delete_at (argv, index[0]);

    ifnot (NULL == ret)
      ret;

    index[0];
  end

  def replace (argv, atindex, witharg)
    (@argv)[atindex] = witharg;
  end
end
