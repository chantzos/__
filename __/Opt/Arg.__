subclass Arg
  __init__
    replace
    compare
    exists
    getlong_val
  end

  def compare (arg, argv)
    variable index = wherenot (strncmp (@argv, arg, strlen (arg)));
    variable ret = qualifier_exists ("ret_arg");

    ifnot (length (index))
      {
      if (ret)
        NULL;

      return NULL;
      }

    if (ret)
      (@argv)[index[0]];

    if (qualifier_exists ("del_arg"))
      Array.delete_at (argv, index[0]);

    index[0];
  end

  def getlong_val (arg, type, argv)
    variable opt, ind, defval = qualifier ("defval");
    (opt, ind) = Arg_compare (self, "--" + arg + "=", argv;;struct {@__qualifiers, ret_arg});

    if (NULL == ind)
      {
      Opt.err (__get_qualifier_as (String_Type, qualifier ("exists_err"),
         "argument --" + arg + " doesn't match any of the arguments"));
      return defval;
      }

    opt = strtok (opt, "=");

    if (2 > length (opt))
      {
      Opt.err ("No value specified");
      return qualifier ("defval on no value");
      }

    opt = strjoin (opt[[1:]], "=");

    if (NULL == type)
      return opt;

    switch (type)
      {
      case "string":
        return strtrim (opt, "\"");
      }

      {
      case "int" || case "integer":
        if (1 != __is_datatype_numeric (_slang_guess_type (opt)))
  	       return defval;

   	    return atoi (opt);
      }

      {
      case "dir" || case "directory":
        ifnot (Dir.isdirectory (opt))
          {
          Opt.err ("--" + arg + "=" + opt + ", doesn't specify a directory");
          return defval;
          }

        return opt;
      }

      {
      case "fname" || case "filename":
        ifnot (File.is_reg (opt))
          return defval;

        return opt;
      }

      {
      case "range":
        variable ved = Class.get ("Ved")["__SELF__"];
        variable fargs = __get_qualifier_as (List_Type, qualifier ("fun_args"),
          {ved.get_cur_buf (), [0:ved.get_cur_buf ()._len]});

        list_append (fargs, opt);

        variable lnrs = ved.parse_range (__push_list (fargs));
        if (NULL == lnrs)
          Opt.err ("unacceptable range: " + opt);

        return lnrs;
      }

      {
      return defval;
      }
  end

  def exists (arg, argv)
    variable index = wherefirst (arg == @argv);
    variable ret = qualifier_exists ("ret_arg");

    if (NULL == index)
      {
      if (ret)
        NULL;

      return NULL;
      }

    if (ret)
      (@argv)[index];

    if (qualifier_exists ("del_arg"))
      Array.delete_at (argv, index);

    index;
  end

  def replace (argv, atindex, witharg)
    (@argv)[atindex] = witharg;
  end
end
