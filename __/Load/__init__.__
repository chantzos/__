class Load
  var IMPORTED = Assoc_Type[Integer_Type, 0];
  var LOADED   = Assoc_Type[Integer_Type, 0];

  def file (?)
    variable self, __file = "", ns = NULL;

    if (2 == _NARGS)
      __file = ();

    if (3 == _NARGS)
      (__file, ns) = ();

    self = ();

    if (NULL == ns || "" == ns)
      ns = "Global";

    variable lib = ns + "->" + __file;

    if (LOADED[lib] && 0 == qualifier_exists ("force"))
      return;

    try
      {
      () = evalfile (__file, ns);
      }
    catch OpenError:
      try
        self.file (__file + ".__", ns;;struct {@__qualifiers, unhandled});
      catch OpenError:
        throw ClassError, "Load::file::OpenError, " + __file + ", " + __get_exception_info.message;
    catch ParseError:
      throw ClassError, "Load::file::ParseError, " + __file, __get_exception_info;
    catch RunTimeError:
      throw ClassError, "Load::file::RunTimeError, " + __file, __get_exception_info;

    LOADED[lib] = 1;
  end

  def module (?)
    variable ns = NULL, module;

    switch (_NARGS)
      {
      case 3: ns = (); module = ();
      }

      {
      case 2: module = ();
      }

      {
      loop (_NARGS) pop ();
      throw ClassError, "Load::__import_module__::NumArgsError, it should be 2 or 3";
      }

    pop ();

    if (NULL == ns)
      ns = "Global";

    if (String_Type != typeof (module) || String_Type != typeof (ns))
      throw ClassError, "Load::__import_module__::ArgsTypeError, it should be String_Type";

    if (IMPORTED[ns + "->" + module])
      return;

    try
      import (module, ns);
    catch ImportError:
      throw ClassError, "Load::__import_module__::ImportError", __get_exception_info;

    IMPORTED[ns + "->" + module] = 1;
  end
end
