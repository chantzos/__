class Devel
  var OBJDUMP_BIN = Sys.which ("objdump");
  var LD_LIBRARY_PATH = ["/usr/local/lib", "/lib", "/usr/lib", NULL, NULL];
  var C_INCLUDE_PATH = getenv ("C_INCLUDE_PATH");

  beg
    ifnot (NULL == C_INCLUDE_PATH)
      C_INCLUDE_PATH = [
        Env->SRC_C_PATH + "/include", strtok (C_INCLUDE_PATH, ":"),
        "/usr/local/include", "/usr/include"];
    else
      C_INCLUDE_PATH = [Env->SRC_C_PATH + "/inc",
        "/usr/include", "/usr/local/include"];

    if (Sys->MACHINE == "x86_64")
      {
      LD_LIBRARY_PATH[-2] = "/lib64";
      LD_LIBRARY_PATH[-1] = "/usr/lib64";
      }

    variable f = fun (`
        (path, bpath)
      path = Array.String.unique ([
      strtok (bpath, ":"),
      path[wherenot (_isnull (path))]]);

      variable i, st;
      _for i (0, length (path) - 1)
        if (NULL == (st = lstat_file (path[i]), st) ||
            stat_is ("lnk", st.st_mode))
          path[i] = NULL;

      path[wherenot (_isnull (path))];
    `);

    LD_LIBRARY_PATH = f.call (LD_LIBRARY_PATH, Env->LD_LIBRARY_PATH);
    C_INCLUDE_PATH  = f.call (C_INCLUDE_PATH, "");
    f.__destroy ();
  end

  def get_library_path ()
    [LD_LIBRARY_PATH, __get_qualifier_as ([Array_Type, String_Type],
      qualifier ("libpath"), String_Type[0])];
  end

  def get_include_path ()
    C_INCLUDE_PATH;
  end

  def ldd (obj)
    if (NULL == OBJDUMP_BIN)
      {
      self.err ("objdump cannot be found in: $PATH"$);
      return NULL;
      }

    variable fp = popen (OBJDUMP_BIN + " --private-headers " + obj, "r");
    if (NULL == fp)
      {
      self.err ("popen failed");
      return NULL;
      }

    variable a = fgetslines (fp);
    variable i;
    variable pat = pcre_compile ("NEEDED", 0);

    _for i (0, length (a) - 1)
      ifnot (pcre_exec (pat, a[i]))
        a[i] = NULL;
      else
        a[i] = strtok (a[i])[1];

    variable f = `
        (path, objs)
      variable i, a = String_Type[0], b = Char_Type[length (objs)];
      _for i (0, length (path) - 1)
        a = [a, strtrim_end (path[i], "/") + "/" + listdir (path[i])];

      variable pat, ii;
      _for i (0, length (objs) - 1)
        {
        pat = pcre_compile (objs[i], 0);
        _for ii (0, length (a) - 1)
          if (pcre_exec (pat, a[ii]))
            {
            b[i] = 1;
            objs[i] += " => " + a[ii];
            break;
            }
          }

    objs[wherenot (b)] += " => not found";
   `;

    a = a[wherenot (_isnull (a))];
    ifnot (qualifier_exists ("recursive"))
      return (frun (get_library_path (NULL;;__qualifiers), a, f), a);
  end

  def is_obj_depends_on (obj, lib)
    variable shared = qualifier ("libs", ldd (NULL, obj));
    if (NULL == shared)
      return -1;

    variable pat = pcre_compile ("^lib" + lib + "\\.so\\.?\\d*", 0);
    variable i;
    _for i (0, length (shared) - 1)
      if (pcre_exec (pat, shared[i]))
        return 1;

    0;
  end

  def find_lib (lib)
    variable
      i, ii, ar, path,
      pat = "/lib" + lib + "\\.so\\.?\\d*";

    _for i (0, length (LD_LIBRARY_PATH) - 1)
      {
      path = strtrim_end (LD_LIBRARY_PATH[i], "/") + "/";
      ar = path + listdir (path);

      _for ii (0, length (ar) - 1)
        if (string_match (ar[ii], pat))
          return ar[ii];
      }

    NULL;
  end

  def find_header (inc)
    variable
      i, ii, iii, ar, bar, path, bpath, pat = inc + ".h";

    _for i (0, length (C_INCLUDE_PATH) - 1)
      {
      path = strtrim_end (C_INCLUDE_PATH[i], "/") + "/";
      ar = path + listdir (path);

      _for ii (0, length (ar) - 1)
        if (string_match (ar[ii], pat))
          return ar[ii];
        else
          if (path + inc == ar[ii])
          {
          bpath = path + inc + "/";
          bar = bpath + listdir (bpath);

          _for iii (0, length (bar) - 1)
            if (string_match (bar[iii], pat))
              return bar[iii];
          }
       }

    NULL;
  end
end
