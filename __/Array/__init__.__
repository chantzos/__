class Array
  def istype (a, type)
    ifnot (typeof (a) == Array_Type)
      return 0;

    ifnot (NULL == type)
      return _typeof (a) == type;

    1;
  end

  def to_list (a)
    return {self.push (a)};
  end

  def push (a)
    variable i;
    _for i (0, length (a) - 1)
      a[i];
  end

  % unique-shift code from upstream
  def shift (x, n)
    variable len = length (x);
    ifnot (len)
      return x;

    n = len + n mod len;
    x[[n:n+len-1] mod len];
  end

  def __unique (ar)
    variable
      i,
      len = length (ar);

    if (len <= 1)
      return [0:len-1];

  	 i = array_sort (ar);

    % this statement doesn't modify original array
    ar = ar[i];

    if (ar[0] == ar[-1])
     return [0];

    where (shift (NULL, ar, -1) != ar);
  end

  def unique (a)
    a[__unique (NULL, a)];
  end

  def __where (ara, arb)
    variable inds = Integer_Type[0];
    variable i;
    _for i (0, length (arb) -1) % all elements
      inds = [inds, where (ara == arb[i])];

    inds = inds[array_sort (inds)];
    unique (NULL, inds);
  end

  def Not (ara, inds)
    variable len = Integer_Type == typeof (ara) ? ara : length (ara);
    variable leni = length (inds);
    variable new  = Integer_Type[len - leni];
    variable cur = 0, i;
    _for i (0, len - 1)
      ifnot (any (i == inds))
        new[(cur, cur++)] = i;

    new;
  end

  def __wherenot (ara, arb)
    Not (NULL, ara, __where (NULL, ara, arb));
  end

  subclass String
    __init__
      len
      __len
    end

    def len (ar)
    ifnot (istype (self, ar, String_Type))
      throw ClassError, "ArrayString.len::array should be of String_Type[]";

    variable newlines = qualifier_exists ("n") * length (ar);
    int (sum (strbytelen (ar)) + newlines);
    end

    def __len (ar, newlines)
      int (sum (strbytelen (ar)) + newlines);
    end
  end

  def map (?)
    if (_NARGS < 4)
      ifnot (qualifier_exists (_function_name + "->execute on no args"))
        throw ClassError, "NumArgsError::" + _function_name +
          "::_NARGS should be at least 4 and are " + string (_NARGS),
            NULL;

    variable arglen = _NARGS - 3;
    variable args = __pop_list (arglen);
    variable ref = ();
    variable dtp = ();

    pop ();

    if (Ref_Type != typeof (ref) ||
        0 == __is_callable (ref) ||
        typeof (dtp) != DataType_Type)
      throw ClassError, "TypeMismatchError::" +  _function_name + "\n" +
        "Is the argument a function reference ... " + ["no", "yes"][Ref_Type == typeof (ref)] + "\n" +
        "Is the function callable ... " + ["no", "yes"][__is_callable (ref)] + "\n" +
        "First argument is DataType_Type type ... " + ["no", "yes"][DataType_Type == typeof (dtp)],
          NULL;

    variable i;
    variable llen;
    variable len = 0;
    variable dtps = DataType_Type[arglen];
    variable lstargs = Integer_Type[arglen];

    _for i (0, arglen - 1)
      {
      dtps[i] = typeof (args[i]);

      if (any ([Array_Type, List_Type] == dtps[i]))
        {
        llen = length (args[i]);

        ifnot (len)
          len = llen;
        else
          ifnot (llen == len)
            throw ClassError, "ArrayMapInvalidParmError::" + _function_name +
              "::arrays have different length", NULL;

        if (List_Type == dtps[i])
          lstargs[i] = i + 1;
        }
      }

    variable ii;

    if (arglen > 1 &&
      0 == qualifier_exists (_function_name + "->Allow Heterogeneous Lists"))
      {
      variable tp;
      lstargs = lstargs[where (lstargs)];
      lstargs--;

      _for i (0, length (lstargs) - 1)
        _for ii (0, length (args[lstargs[i]]) - 1)
          ifnot (ii)
            tp = typeof (args[lstargs[i]][ii]);
          else
            ifnot (tp == typeof (args[lstargs[i]][ii]))
              throw ClassError, "ArrayMapRunTimeError::Heterogeneous Lists are not allowed",
                NULL;
      }

    variable l;
    variable r;
    variable at;

          % let it continue
    % ifnot (len)
    %   throw ClassError, "ArrayMapTypeMismatchError::" +  _function_name +
    %   "::at least one argument should be Array or List Type", NULL;
          % and execute the function even if none of the arguments 
          % is Array|List Type, but
          % return it either as Array|List|Declared Type
    ifnot (len)
      ifnot (Void_Type == dtp)
        if (qualifier_exists (_function_name + "->Return As List Type"))
          return {(@ref) (__push_list (args);;__qualifiers ())};
        else
          ifnot (qualifier_exists (_function_name + "->Return As Declared Type"))
            return [(@ref) (__push_list (args);;__qualifiers ())];
          else
            return (@ref) (__push_list (args);;__qualifiers ());
      else
        return (@ref) (__push_list (args);;__qualifiers ());

    ifnot (Void_Type == dtp)
      ifnot (Array_Type == dtp)
        at = dtp[len];
      else
        ifnot (qualifier_exists (_function_name + "->Get As List Type"))
          at = dtp[len];
        else
          {
          at = list_new ();
          _for i (0, len - 1)
            list_insert (at, NULL);
          }

    _for i (0, len - 1)
      {
      l = {};

      _for ii (0, arglen - 1)
        if (Array_Type == dtps[ii] || List_Type == dtps[ii])
          list_append (l, args[ii][i]);
        else
          list_append (l, args[ii]);

      variable dep = _stkdepth;

      try
        {
        (@ref) (__push_list (l);;__qualifiers ());
        }
      catch AnyError:
        throw ClassError, "ArrayMapRunTimeError::" + _function_name + ":: error while executing "
          + string (ref), __get_exception_info;

      ifnot (Void_Type == dtp)
        {
        if (_stkdepth == dep)
          throw ClassError, "ArrayMapRunTimeError::Stack underflow error. "
            + "expected an item (of " + string (dtp) + ") in the stack";

        r = ();

        ifnot (typeof (r) == dtp)
          throw ClassError, "ArrayMapTypeMismatchError::" + _function_name + "::" + string (ref) +
            " returned " + string (typeof (r)) + " instead of " + string (dtp), NULL;

        at[i] = r;
        }
     }

    ifnot (Void_Type == dtp)
      ifnot (qualifier_exists (_function_name + "->Discard Value"))
        if (qualifier_exists (_function_name + "->Return As List Type"))
          return {at};
        else
          return at;
  end

  def delete_at (arr, at_index)
    ifnot (self.istype (@arr, NULL))
      return;

    variable len = length (@arr);
    if (at_index < 0)
      at_index = len + at_index;

    if (len - 1 < at_index || at_index < 0)
      return;

    @arr = [(@arr)[[0:at_index-1]], (@arr)[[at_index+1:]]];
  end

  def append (?)
    variable arr, at_index, val;

    if (3 == _NARGS)
      {
      val = (); arr = (); at_index = length (@arr);
      }
    else if (4 == _NARGS)
      {
      val = ();
      at_index = ();
      arr = ();
      }
    else
      return;

    variable self = ();

    ifnot (self.istype (@arr, typeof (val)))
      return;

    variable len = length (@arr);
    if (at_index < 0)
      at_index = len + at_index;

    if (len < at_index || at_index < -1)
      return;

    if (len == at_index)
      @arr = [@arr, val];
    else if (-1 == at_index)
      @arr = [val, @arr];
    else
      @arr = [(@arr)[[0:at_index]], val, (@arr)[[at_index+1:]]];
  end

  def insert (?)
    variable arr, at_index, val;

    if (3 == _NARGS)
      {
      val = (); arr = (); at_index = 0;
      }
    else if (4 == _NARGS)
      {
      val = ();
      at_index = ();
      arr = ();
      }
    else
      return;

    variable self = ();

    ifnot (self.istype (@arr, typeof (val)))
      return;

    variable len = length (@arr);
    if (at_index < 0)
      at_index = len + at_index;

    if (len < at_index || at_index < 0)
      return;

    if (len == at_index)
      @arr = [@arr, val];
    else
      @arr = [(@arr)[[0:at_index-1]], val, (@arr)[[at_index:]]];
  end

  def join (ar, bar)
    if (any (0 == [self.istype (@ar, NULL), self.istype (bar, NULL)]))
      return;

    ifnot (_typeof (@ar) == _typeof (bar))
      return;

   @ar = [@ar, bar];
  end
end
