class Dir
  def isdirectory (dir)
    if (-1 == access (dir, F_OK))
      return 0;

    variable st = stat_file (dir);
    File.is_type (NULL == st ? NULL : st.st_mode, "dir")
      ? 1
      :qualifier_exists ("strict")
        ? -1
        : 0;
  end

  def __isdirectory (dir, st)
    if (-1 == access (dir, F_OK))
      return 0;

    File.is_type (
      NULL == st
        ? NULL
        : Struct_Type == typeof (st)
          ? NULL == wherefirst ("st_mode" == get_struct_field_names (st))
            ? NULL
            : st.st_mode
          : NULL, "dir")
      ? 1
      : qualifier_exists ("strict")
        ? -1
        : 0;
  end

  def eval (dir)
    if ('~' == dir[0])
      (dir,) = strreplace (dir, "~", Env->HOME_PATH, 1);
    else if (0 == path_is_absolute (dir) && '$' != dir[0] &&
        0 == qualifier_exists ("dont_change"))
      dir = path_concat (getcwd (), dir);
    else
      dir = eval ("\"" + dir + "\"$");

    dir;
  end

  def make (dir, perm)
    variable
      st = lstat_file (dir),
      retval = self.__isdirectory (dir, st;;__qualifiers);

    if (-1 == retval)
      {
      IO.tostderr (dir + " is not a directory");
      return -1;
      }

    ifnot (retval)
      {
      if (-1 == mkdir (dir))
        {
        IO.tostderr (dir + " cannot create directory, " + errno_string (errno));
        return -1;
        }

      if (qualifier ("verbose"))
        IO.tostdout ("created directory `" + dir + "'";;__qualifiers);

      st = lstat_file (dir);

      ifnot (NULL == perm)
        if (-1 == Sys.checkperm (st.st_mode, perm))
          return Sys.setperm (dir, perm);

      return 0;
      }

    ifnot (NULL == perm)
      if (-1 == Sys.checkperm (st.st_mode, perm))
        return Sys.setperm (dir, perm);

    0;
  end

  def make_parents (dir, perm)
    variable dir_ar = self.parent_tree (dir);
    variable i;

    _for i (0, length (dir_ar) - 1)
      if (self.isdirectory (dir_ar[i];strict))
        continue;
      else
        if (-1 == self.make (dir_ar[i], perm;;__qualifiers))
        return -1;

    0;
  end

  def parent_tree (dir)
    variable ar, i;

    ar = strchop (dir, '/', 0);

    ifnot (strlen (ar[0]))
      {
      ar[1] = strcat ("/", ar[1]);
      ar = ar[[1:]];
      }

    ifnot (strlen (ar[-1]))
      ar = ar[[0:length (ar) - 2]];

    if (1 < length (ar))
      _for i (1, length (ar) - 1)
        ar[i] = path_concat (ar[i-1], ar[i]);

    ar;
  end

  def are_same (a, b)
    if (a == b)
      return Dir.isdirectory (a);

    variable
      sta = stat_file (a),
      stb = stat_file (b);

   if (any (_isnull ([sta, stb])))
     return 0;

   if (anynot (array_map (Integer_Type, Dir.__isdirectory, Dir,
       [a, b], [sta, stb])))
     return 0;

   sta.st_ino == stb.st_ino && sta.st_dev == stb.st_dev;
  end

  fun walk (dir, dir_callback, file_callback)
  fun list (dir)
  fun move (source, dest, opts)
end
