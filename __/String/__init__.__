class String
  def __decode (str)
    try
      {
      string_to_wchars (str);
      }
    catch TypeMismatchError:
      NULL;
  end

  % of course it can be optimized a bit, as it hasn't to decode
  % the whole string, but if a conditional logic will be inserted
  % then the optimization is gone, so this is mainly for array_map
  def is_chr_at_index (str, chr, index)
    variable ar = self.__decode (str);
    (NULL == ar) ? 0 : ar[index] == chr;
  end

  % upstream now provides string_to_wchars (), so we have to replace
  % the code (note that: upstream's function it doesn't return in case
  % of an error, so it has to be wrapped under a try)
  def decode (str)
    variable
      d,
      i = 0,
      l = {};

    forever
      {
      (i, d) = strskipchar (str, i);
      if (d)
        list_append (l, d);
      else
        break;
      }

    length (l) ? list_to_array (l) : ['\n'];
  end

  def to_int (str)
    variable retval = atoi (str);

    ifnot (retval)
      if (str != "0")
        return NULL;

    retval;
  end
end
