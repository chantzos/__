class Proc
  import fork
  import socket
  import fd

  typedef Proc
    pid,
    argv,
    uid,
    gid,
    user,
    setid,
    issu,
    stdin,
    stdout,
    stderr,
    execv,
    execve,
    wait,
    atexit,
    connect,
  end

  typedef Descr
    in,
    out,
    file,
    mode,
    keep,
    read,
    write,
    wr_flags,
    append_flags,
  end

  var private MAX_PIPE_CAPACITY = NULL;
  let MIN_PIPE_CAPACITY = 1 << 12;
  let DEF_PIPE_CAPACITY = 1 << 16;

  def get_max_pipe_capacity (fd)
    ifnot (NULL == MAX_PIPE_CAPACITY)
      return MAX_PIPE_CAPACITY;

    variable cur_cap = __fd_get_pipe_size (fd);
    if (-1 == cur_cap)
      return -1;

    variable mx = 1 << 30;
    variable c = 0, cap;
    while (-1 == (cap = __fd_set_pipe_size (fd, mx), cap))
      {
      c++;
      mx = mx >> c;
      }

    () = __fd_set_pipe_size (fd, cur_cap);

    MAX_PIPE_CAPACITY = cap;
    MAX_PIPE_CAPACITY;
  end

  def get_pipe_capacity (fd)
    __fd_get_pipe_size (fd);
  end

  def set_pipe_capacity (fd, cap)
    if (cap > MAX_PIPE_CAPACITY)
      cap = MAX_PIPE_CAPACITY;

    if (cap < MIN_PIPE_CAPACITY)
      cap = MIN_PIPE_CAPACITY;

    __fd_set_pipe_size (fd, cap);
  end

  def parse_flags (fd) proc
    ifnot (NULL == fd.wr_flags)
      {
      ifnot (assoc_key_exists (File->FLAGS, fd.wr_flags))
        fd.wr_flags = File->FLAGS[">"];
      else
        fd.wr_flags = File->FLAGS[fd.wr_flags];
      }
    else
      if (-1 == access (fd.file, F_OK))
        fd.wr_flags = File->FLAGS[">"];
      else
        fd.wr_flags = File->FLAGS[">|"];

    ifnot (NULL == fd.append_flags)
      fd.wr_flags |= fd.append_flags;

    if (fd.wr_flags & O_CREAT)
      if (NULL == fd.mode)
        fd.mode = File->PERM["_PRIVATE"];
  end

  def open_file (fd, fp) proc
    fd.keep = dup_fd (fileno (fp));

    parse_flags (fd);

    ifnot (NULL == fd.mode)
      fd.write = open (fd.file, fd.wr_flags, fd.mode);
    else
      fd.write = open (fd.file, fd.wr_flags);

    () = dup2_fd (fd.write, _fileno (fp));
  end

  def close_fd (fd, fp) proc
    () = _close (_fileno (fd.write));
    () = dup2_fd (fd.keep, _fileno (fp));
  end

  def open_fd (fd, fp) proc
    fd.keep = dup_fd (fileno (fp));

    (fd.read, fd.write) = pipe ();

    Array.map (Integer_Type, &set_pipe_capacity, NULL,
      [fd.read, fd.write], qualifier ("fd_size", DEF_PIPE_CAPACITY);
      "map->Discard Value");

    variable retval = dup2_fd (fd.write, _fileno (fp));
    % do something
  end

  def _openforread (fd, fp) proc
    fd.keep = dup_fd (fileno (fp));

    ifnot (NULL == fd.file)
      {
      fd.read = open (fd.file, O_RDONLY);
      () = dup2_fd (fd.read, _fileno (fp));
      return;
      }

    (fd.read, fd.write) = pipe ();

    Array.map (Integer_Type, &set_pipe_capacity, NULL,
      [fd.read, fd.write], qualifier ("fd_size", DEF_PIPE_CAPACITY);
      "map->Discard Value");

    () = write (fd.write, fd.in);

    () = close (fd.write);

    () = dup2_fd (fd.read, _fileno (fp));
  end

  def _open (fd, fp) proc
    ifnot (NULL == fd.file)
      open_file (fd, fp;;__qualifiers);
    else
      open_fd (fd, fp;;__qualifiers);
  end

  def atexit (s) proc
    ifnot (NULL == s.stdout)
      {
      close_fd (s.stdout, stdout);

      if (NULL == s.stdout.file)
        s.stdout.out = File.read (s.stdout.read);
      }

    ifnot (NULL == s.stderr)
      {
      close_fd (s.stderr, stderr);

      if (NULL == s.stderr.file)
        s.stderr.out = File.read (s.stderr.read);
      }

    ifnot (NULL == s.stdin)
      if (NULL == s.stdin.file)
        close_fd (s.stdin, stdin);
      else
        () = dup2_fd (s.stdin.keep, 0);
  end

  def connect_to_socket (s, sockaddr) proc
    variable
      i = -1,
      sock = socket (PF_UNIX, SOCK_STREAM, 0);

    forever
      {
      i++;
      if (5000 < i)
        return NULL;

      try
        connect (sock, sockaddr);
      catch AnyError:
        continue;

      break;
      }

    sock;
  end

  def dopid (s) proc
    ifnot (NULL == s.stdin)
      _openforread (s.stdin, stdin;;__qualifiers);

    ifnot (NULL == s.stdout)
      _open (s.stdout, stdout;;__qualifiers);

    ifnot (NULL == s.stderr)
      _open (s.stderr, stderr;;__qualifiers);

    fork ();
  end

  def __exec_proc__ (s, argv, env) proc
    variable status = 0;

    s.pid = dopid (s;;__qualifiers);

    ifnot (s.pid) % allow for a function callback, call a default else
      {
      ifnot (NULL == s.setid)
        if (NULL != s.uid && NULL != s.gid && NULL != s.user)
          {
          if (-1 == initgroups (s.user, s.gid))
            {
            IO.tostderr ("initgroups: " + errno_string (errno));
            _exit (1);
            }

          if (-1 == setgid (s.gid))
            {
            IO.tostderr ("setgid: " + errno_string (errno));
            _exit (1);
            }

          if (-1 == setuid (s.uid))
            {
            IO.tostderr ("setuid: " + errno_string (errno));
            _exit (1);
            }
          }

      if (NULL == env)
        if (-1 == execv (argv[0], argv))
          {
          IO.tostderr ("error calling execv: ", errno_string (errno));
          _exit (1);
          }
        else
          {}
      else
        if (-1 == execve (argv[0], argv, env))
          {
          IO.tostderr ("error calling execve: ", errno_string (errno));
          _exit (1);
          }
      }
  end

  def __wait__ (s) proc
    waitpid (s.pid, 0);
    s.atexit ();
  end

  def __execve__ (s, argv, env, bg) proc
   __exec_proc__ (s, argv, env;;__qualifiers);

   ifnot (NULL == bg)
     return s.pid;

   s.wait ();
  end

  def __execv__ (s, argv, bg) proc
    __exec_proc__ (s, argv, NULL;;__qualifiers);

   ifnot (NULL == bg)
     return s.pid;

   s.wait ();
  end

  def init (in, out, err)
    variable
      p = @Proc_Type;

    if (in)
      p.stdin = @Descr_Type;

    if (out)
      p.stdout = @Descr_Type;

    if (err)
      p.stderr = @Descr_Type;

    p.atexit = &atexit;
    p.connect = &connect_to_socket;
    p.execve = &__execve__;
    p.execv = &__execv__;
    p.wait = &__wait__;
    p.setid = __get_qualifier_as (Integer_Type, qualifier ("setid"), NULL);
    p.uid   = __get_qualifier_as (Integer_Type, qualifier ("uid"), NULL);
    p.gid   = __get_qualifier_as (Integer_Type, qualifier ("gid"), NULL);
    p.user  = __get_qualifier_as (String_Type,  qualifier ("user"), NULL);
    p;
  end

  beg
    fexpr (`
      (fun)
      variable fda, fdb;
      (fda, fdb) = pipe ();
      () = (@fun) (NULL, fda);
      () = close (fda);
      () = close (fdb);
    `).call (&get_max_pipe_capacity);
  end

end
