class Time
  def julian_day_nr (tim)
    variable
      lhour = qualifier ("hour", tim.tm_hour),
      lmonth = tim.tm_mon + 1;

    % http://en.wikipedia.org/wiki/Julian_day
    % until 1/1/4713 B.C

    % Calendar change
    if (tim.tm_year == 1582 && lmonth == 10 &&
      (tim.tm_mday < 15 &&  tim.tm_mday > 4))
      return "This happens to be a day within 4 - 15 of October of 1582", NULL;

    variable
      jdn,
      newmonth,
      newyear,
      a = (14 - lmonth) / 12;

    newyear = (tim.tm_year + 4801 - _ispos (tim.tm_year)) - a;
    newmonth = lmonth +  (12 * a) - 3;

    if (tim.tm_year > 1582 ||
        (tim.tm_year == 1582 && (lmonth > 10 || (lmonth == 10 && tim.tm_mday > 4))))
      jdn = tim.tm_mday + ((153 * newmonth + 2) / 5) + (newyear * 365) +
          (newyear / 4) - (newyear / 100) + (newyear / 400) - 32045;
    else
      jdn = tim.tm_mday + (153 * newmonth + 2) / 5 + newyear * 365 + newyear / 4 - 32083;

    if (12 > lhour >= 0)
      jdn--;

    jdn;
  end

  def isleap (year)
    if ((0 == year mod 4 && 0 != year mod 100) || 0 == year mod 400)
      return 1;

    0;
  end

  def checkfmt (tim)
    ifnot (tim.tm_year)
      return "0: is not a valid year", NULL;

    ifnot (-1 < tim.tm_mon < 13)
      return sprintf ("%d: is not a valid month", tim.tm_mon + 1), NULL;

    variable m_ar = [31, 28 + self.isleap (tim.tm_year), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    ifnot (1 <= tim.tm_mday <= m_ar[tim.tm_mon - 1])
      return sprintf ("%d: is not a valid day", tim.tm_mday), NULL;

    if ((tim.tm_hour > 23 || tim.tm_min > 59 || tim.tm_sec > 59) ||
         (tim.tm_hour < 0  || tim.tm_min < 0  || tim.tm_sec < 0 ))
      return "Not a valid hour/minutes/second format", NULL;

    0;
  end

  def week_day (tim)
    variable
      err,
      lday,
      lmonth,
      lyear,
      jdn = qualifier ("jdn", self.julian_day_nr (tim;hour = 12));

    if (NULL == jdn)
      {
      err = ();
      return err, NULL;
      }

    variable a = (14 - tim.tm_mon) / 12;

    lyear = tim.tm_year - a + (0 > tim.tm_year);
    lmonth = (tim.tm_mon + 1) + (12 * a) - 2;

    if (jdn > 2299160)
      lday = (tim.tm_mday + lyear + (lyear / 4) - (lyear / 100) +  (lyear / 400)
             + (31 * lmonth) / 12) mod 7;
    else
      lday = (5 + tim.tm_mday + lyear + lyear / 4 + (31 * lmonth) / 12) mod 7;

    lday;
  end

  def julian_day_to_cal (tim, jdn)
    variable
      a,
      lyear,
      months = [
        "January", "February", "March", "April", "May", "June", "July",
        "August", "September", "October", "November", "December"],
      week_days = [
        "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      z = jdn;

    if (jdn > 2299160)
      {
       variable
          w = typecast (((z - 1867216.25) / 36524.25), Int_Type),
          x = typecast (w / 4, Int_Type);

        a = z + 1 + w - x;
      }
    else
      a = z;

    variable
      b = a + 1524,
      c = typecast ((b - 122.1) / 365.25, Int_Type),
      d = typecast (365.25 * c, Int_Type),
      e = typecast ((b - d) / 30.6001, Int_Type),
      f = typecast (30.6001 * e, Int_Type),
      lday = b - d - f,
      lmonth = e - 1;

    if (lmonth > 12)
      lmonth = e - 13;

    if (lmonth == 1 || lmonth == 2)
      lyear = c - 4715;
    else
      lyear = c - 4716;

    % there is bug on the called fun, when on March? 2017
    % returns +2 days
    % variable weekday = self.week_day (tim;jdn = jdn);
    sprintf ("%d %s, %d, %s", lday, months[lmonth - 1], lyear,
        week_days[tim.tm_wday]);
  end

  def normalize (v) proc
    v = v - floor (v);
    if (v < 0)
      v++;
    v;
  end

  def round2 (x) proc
    round (100 * x) / 100.0;
  end

  def moon_phase (tim)
  % Thanks to
  % http://home.att.net/~srschmitt/zenosamples/zs_lunarphasecalc.html
  % for the moonphase algorithm
    variable
      err,
      jdn,
      lmonth = tim.tm_mon + 1,
      pi = 3.1415926535897932385;

    if ((tim.tm_year >= 2038) && (lmonth >= 1) && (tim.tm_mday >= 19) && (tim.tm_hour >= 3)
       && (tim.tm_min >= 14) && (tim.tm_sec >= 7))
      return "This is the 2038 bug, happens to 32bit systems", NULL;

    jdn = self.julian_day_nr (tim;hour=12);
    if (NULL == jdn)
      {
      err = ();
      return err, NULL;
      }

    variable
      phase,
      ip = (jdn - 2451550.1) / 29.530588853,
      oldip = ((jdn - 1) - 2451550.1) / 29.530588853,
      ag = normalize (ip) * 29.53;

    if (ag < 1.84566) phase = "NEW";
    else if (ag <  5.53699) phase = "Waxing crescent";
    else if (ag <  9.22831) phase = "First quarter";
    else if (ag < 12.91963) phase = "Waxing gibbous";
    else if (ag < 16.61096) phase = "FULL";
    else if (ag < 20.30228) phase = "Waning gibbous";
    else if (ag < 23.99361) phase = "Last quarter";
    else if (ag < 27.68493) phase = "Waning crescent";
    else phase = "NEW";

    ip = ip * 2 * pi;
    oldip = oldip * 2 * pi;

    variable
      zodiac,
      dp = 2 * pi * normalize ((jdn - 2451562.2) / 27.55454988),
      olddp= 2 * pi * normalize ((jdn - 1 - 2451562.2) / 27.55454988),
      di = 60.4 - 3.3 * cos (dp) - 0.6 * cos (2 * ip - dp) - 0.5 * cos (2 * ip),
      olddi  = 60.4 - 3.3 * cos (olddp) - 0.6 * cos (2 * oldip - olddp) - 0.5 * cos (2 * oldip),
      np = 2 * pi * normalize ((jdn - 2451565.2 ) / 27.212220817),
      la = 5.1 * sin (np),
      rp = normalize ((jdn - 2451555.8) / 27.321582241),
      lo = 360 * rp + 6.3 * sin (dp) + 1.3 * sin (2 * ip - dp) + 0.7 * sin (2 * ip);

    if (lo < 33.18) zodiac = "Pisces - Ιχθείς";
    else if (lo <  51.16) zodiac = "Aries - Κριός";
    else if (lo <  93.44) zodiac = "Taurus - Ταύρος";
    else if (lo < 119.48) zodiac = "Gemini - Διδυμος";
    else if (lo < 135.30) zodiac = "Cancer - Καρκίνος";
    else if (lo < 173.34) zodiac = "Leo - Λέων";
    else if (lo < 224.17) zodiac = "Virgo - Παρθένος";
    else if (lo < 242.57) zodiac = "Libra - Ζυγός";
    else if (lo < 271.26) zodiac = "Scorpio - Σκορπιός";
    else if (lo < 302.49) zodiac = "Sagittarius - Τοξότης";
    else if (lo < 311.72) zodiac = "Capricorn - Αιγώκερος";
    else if (lo < 348.58) zodiac = "Aquarius - Υδροχόος";
    else zodiac = "Pisces - Ιχθείς";

    variable date = self.julian_day_to_cal (tim, jdn);

    [
      sprintf ("Date:          %s", date),
      sprintf ("Phase:         %s", phase),
      sprintf ("Age:           %S days (%S)", round2 (ag), round2 (ag) / 29.530588853),
      sprintf ("Distance:      %S earth radii, %s", round2 (di), olddi > di ? "descendant (κατερχόμενη)" : "ascendant (ανερχόμενη)"),
      sprintf ("Latitude:      %S°", round2 (la)),
      sprintf ("Longitude:     %S°", round2 (lo)),
      sprintf ("Constellation: %s", zodiac)
    ];
  end
  fun easter_catholic (year)
  fun easter_orthodox (year)
end
