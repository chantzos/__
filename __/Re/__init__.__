class Re
  import pcre

  def escape_str  (str, quote)
    variable q = NULL == quote
      ? '\\'
      : quote;

    str_quote_string (str, "()[]^\\+*.?", q);
  end

  def unique_lines (ar, str, iend)
    variable i;
    variable dont_include_str = qualifier_exists ("dont_include_given_str");
    variable lines = Assoc_Type[Null_Type];
    variable pat = sprintf ("^%s%s", qualifier_exists ("ign_lead_ws")
      ? "\\s*" : "", self.escape_str (str, NULL));

    try
      {
      pat = pcre_compile (pat, PCRE_UTF8|PCRE_UCP|PCRE_NO_UTF8_CHECK);
      }
    catch ParseError:
      {
      IO.tostderr ("PCRE PARSE ERROR", __get_exception_info.message);
      return String_Type[0];
      }

    iend = NULL == iend ? length (ar) - 1 : iend;

    _for i (0, iend)
      if (pcre_exec (pat, ar[i]))
        if (str != ar[i] || 0 == dont_include_str)
          lines[ar[i]] = NULL;

    lines = assoc_get_keys (lines);
    lines[array_sort (lines)];
  end

  def unique_words (ar, str, iend)
    variable i;
    variable words = Assoc_Type[Null_Type];
    variable pat = sprintf ("(%s%s\\w*)", "\\w*", str);

    try
      {
      pat = pcre_compile (pat, PCRE_UTF8|PCRE_UCP|PCRE_NO_UTF8_CHECK);
      }
    catch ParseError:
      {
      IO.tostderr ("PCRE PARSE ERROR", __get_exception_info.message);
      return String_Type[0];
      }

    iend = NULL == iend ? length (ar) - 1 : iend;

    _for i (0, iend)
      if (pcre_exec (pat, ar[i]))
        words[pcre_nth_substr (pat, ar[i], 0)] = NULL;

    if (qualifier_exists ("ign_pat"))
      if (assoc_key_exists (words, str))
        assoc_delete_key (words, str);

    words = assoc_get_keys (words);
    words[array_sort (words)];
  end
end
