class Spell
  subclass Hunspell
    __init__
      new
    end

    import hunspell

    var DATA_DIR = Env->USER_DATA_PATH + "/Spell";
    var DEF_LANG = strtok (Env->LANG, ".")[0];

    beg
      if (-1 == access (Env->SRC_USER_DATA_PATH + "/Spell", F_OK))
        () = mkdir (Env->SRC_USER_DATA_PATH + "/Spell");
      if (-1 == access (DATA_DIR, F_OK))
        () = mkdir (DATA_DIR);
    end

    def new ()
      variable s = struct
        {
        hsp,
        aff = qualifier ("aff"),
        dic = qualifier ("dic"),
        spell,
        suggest,
        add_dic,
        add_word,
        remove_word,
        };

      if (any (_isnull ([s.aff, s.dic])))
        {
        variable lang = qualifier ("lang", DEF_LANG);
        variable len, list = listdir (DATA_DIR);

        if (NULL == list || 0 == (len = length (list), len))
          return NULL;

        variable aff_str = lang + ".aff", dic_str = lang + ".dic";
        variable found_aff = any (list == aff_str);
        variable found_dic = any (list == dic_str);

        if (anynot ([found_aff, found_dic]))
          return NULL;

        s.aff = DATA_DIR + "/" + aff_str;
        s.dic = DATA_DIR + "/" + dic_str;
        }

      s.hsp = hunspell_init (s.aff, s.dic);

      s.spell = fun (`
          (s, str)
        hunspell_check (s.hsp, str);
        `).__funcref;

      s.suggest = fun (`
          (s, str)
        hunspell_suggest (s.hsp, str);
        `).__funcref;

      s.add_word = fun (`
          (s, str)
        hunspell_add_word (s.hsp, str);
        `).__funcref;

      s.remove_word = fun (`
          (s, str)
        hunspell_remove_word (s.hsp, str);
        `).__funcref;

      s.add_dic = fun (`
         (s, str)
        hunspell_add_dic (s.hsp, str);
       `).__funcref;

      s;
    end
  end
end
