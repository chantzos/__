class I
  var static APPS          = Assoc_Type[Assoc_Type];
  var static APPSINFO      = Assoc_Type[AppInfo_Type];

  def app_table ()
    variable i;
    variable ii;
    variable app;
    variable dir;
    variable apps;
    variable dirs = [Env->USER_APP_PATH, Env->STD_APP_PATH, Env->LOCAL_APP_PATH];

    _for i (0, length (dirs) - 1)
      {
      dir = dirs[i];
      apps = listdir (dir);
      if (NULL == apps || (NULL != apps && 0 == length (apps)))
        continue;

      apps = apps[where (array_map (Integer_Type, Dir.isdirectory,
        Dir, array_map (String_Type, &path_concat, dir, apps)))];

      _for ii (0, length (apps) - 1)
        {
        app = apps[ii];
        if (-1 == access (dir + "/" + app + "/" + app + ".sl", F_OK) &&
            -1 == access (dir + "/" + app + "/" + app + ".slc", F_OK))
          continue;

        APPSINFO[app] = @AppInfo_Type;
        APPSINFO[app].init = app + "Init";
        APPSINFO[app].dir = dir + "/" + app;

        ifnot (access (dir + "/" + app + "/help.txt", F_OK))
          APPSINFO[app].help = dir + "/" + app + "/help.txt";

        ifnot (access (dir + "/" + app + "/info.txt", F_OK))
          APPSINFO[app].info = dir + "/" + app + "/info.txt";

        APPS[app] = Assoc_Type[App_Type];
        }
      }
  end

#ifnot NULL == This.isachild
  subclass Child from I

  def app_new (s) static proc
    I.Child.appnew (s);
  end

  def app_reconnect (s) static proc
    I.Child.appreconnect (s);
  end

  def app_idle () static proc
    I.Child.idle ();
  end

  def at_exit () static proc
    Sock.send_int (IChild->PARENT_WRFIFO_FD, Api->GO_ATEXIT);
  end

  def init () static proc
    I.Child.init ();
  end
#endif

#ifnot NULL == This.isatsession
  subclass Client from I

  def app_new (s) static proc
    I.Client.appnew (s);
  end

  def app_reconnect (s) static proc
    I.Client.appreconnect (s);
  end

  def app_idle () static proc
    I.Client.idle ();
  end

  def at_exit () static proc
    Sock.send_int (IClient->SESSION_WRFIFO_FD, Api->GO_ATEXIT);
  end

  def init () static proc
    I.Client.init ();
  end
#endif

#if This.isachild == NULL == This.isatsession
  subclass Srv from I

  def app_new (s) static proc
    I.Srv.appnew (s);
  end

  def app_reconnect (s) static proc
    I.Srv.appreconnect (s);
  end

  def app_idle () static proc
    I.Srv.idle ();
  end

  def at_exit () static proc
    variable i;
    _for i (0, length (CONNECTED_APPS) - 1)
      {
      variable app = CONNECTED_APPS[i];
      variable pid = CONNECTED_PIDS[i];
      variable s = I->APPS[app][string (pid)];
      Sock.send_int (s.fd, Api->GO_ATEXIT);
      }
  end

  def init () static proc
    I.Srv.init ();
  end
#endif
end
