class I
  var AM = NULL;
  var ALSO = String_Type[0];

  subclass Set
    __init__
      myrole
    end

    def myrole ()
   %   ["CHILD", "SLAVE", "MASTER"][
   %     getenv ("ISACHILD") == NULL == getenv ("SESSION")
   %       ? 2
   %       : NULL == getenv ("SESSION")
   %   ifnot (NULL == getenv ("ISACHILD"))
   %     I.Am.a ("CHILD");
   %   else
   %     {
   %     ifnot (NULL == getenv ("SESSION"))
   %       I.Am.a ("SLAVE");
   %     else
   %       I.Am.a ("MASTER");

   %      I.Am.also ("PARENT");
   %      }
    end
  end

  subclass Am
    __init__
      a
      also
    end

    def a (what)
      ifnot (NULL == AM)
        return;

      AM = what;
    end

    def also (what)
     ALSO = [ALSO, what];
    end
  end

  subclass What
    __init__
      amI
      amI_also
    end

    def amI ()
      AM;
    end

    def amI_also ()
      ALSO;
    end
  end

  def setme ()
    ifnot (NULL == getenv ("ISACHILD"))
      self.Am.a ("CHILD");
    else
      {
      ifnot (NULL == getenv ("SESSION"))
        self.Am.a ("SLAVE");
     else
       self.Am.a ("MASTER");

     self.Am.also ("PARENT");
     }
  end

#ifnot NULL == This.is.child
  subclass Child from I

  def app_new (s) static proc
    I.Child.appnew (s);
  end

  def app_reconnect (s) static proc
    I.Child.appreconnect (s);
  end

  def app_idle () static proc
    I.Child.idle ();
  end

  def at_exit () static proc
    Sock.send_int (IChild->PARENT_WRFIFO_FD, Api->GO_ATEXIT);
  end

  def init () static proc
    I.Child.init ();
  end
#endif

#ifnot NULL == This.is.atsession
  subclass Client from I

  def app_new (s) static proc
    I.Client.appnew (s);
  end

  def app_reconnect (s) static proc
    I.Client.appreconnect (s);
  end

  def app_idle () static proc
    I.Client.idle ();
  end

  def at_exit () static proc
    Sock.send_int (IClient->SESSION_WRFIFO_FD, Api->GO_ATEXIT);
  end

  def init () static proc
    I.Client.init ();
  end
#endif

#if This.is.child == NULL == This.is.atsession
  subclass Srv from I

  def app_new (s) static proc
    I.Srv.appnew (s);
  end

  def app_reconnect (s) static proc
    I.Srv.appreconnect (s);
  end

  def app_idle () static proc
    I.Srv.idle ();
  end

  def at_exit () static proc
    variable i;
    _for i (0, length (CONNECTED_APPS) - 1)
      {
      variable app = CONNECTED_APPS[i];
      variable pid = CONNECTED_PIDS[i];
      variable s = App->APPS[app][string (pid)];
      Sock.send_int (s.fd, Api->GO_ATEXIT);
      }
  end

  def init () static proc
    I.Srv.init ();
  end
#endif
end
