class I
  def get_src_path (path)
    variable
      is_local = -1,
      is_user = -1,
      is_std = strncmp (path, Env->STD_PATH, strlen (Env->STD_PATH));

    if (is_std)
      {
      is_user = strncmp (path, Env->USER_PATH, strlen (Env->USER_PATH));
      if (is_user)
        {
        is_local = strncmp (path, Env->LOCAL_PATH, strlen (Env->LOCAL_PATH));
        if (is_local)
          throw ClassError, "I::get_src_path::" + path + ", unhandled/unknown path";
        }
      }

     ifnot (is_std)
       return strreplace (path, Env->STD_PATH, Env->SRC_PATH);

     ifnot (is_user)
       return strreplace (path, Env->USER_PATH, Env->SRC_USER_PATH);

     ifnot (is_local)
       return strreplace (path, Env->LOCAL_PATH, Env->SRC_LOCAL_PATH);
  end

#ifnot NULL == This.is.child
  subclass Child from I

  def app_new (s) static proc
    I.Child.appnew (s);
  end

  def app_reconnect (s) static proc
    I.Child.appreconnect (s);
  end

  def app_idle () static proc
    I.Child.idle ();
  end

  def at_exit () static proc
    Sock.send_int (IChild->PARENT_WRFIFO_FD, Api->GO_ATEXIT);
  end

  def init () static proc
    I.Child.init ();
  end
#endif

#ifnot NULL == This.is.atsession
  subclass Client from I

  def app_new (s) static proc
    I.Client.appnew (s);
  end

  def app_reconnect (s) static proc
    I.Client.appreconnect (s);
  end

  def app_idle () static proc
    I.Client.idle ();
  end

  def at_exit () static proc
    Sock.send_int (IClient->SESSION_WRFIFO_FD, Api->GO_ATEXIT);
  end

  def init () static proc
    I.Client.init ();
  end
#endif

#if This.is.child == NULL == This.is.atsession
  subclass Srv from I

  def app_new (s) static proc
    I.Srv.appnew (s);
  end

  def app_reconnect (s) static proc
    I.Srv.appreconnect (s);
  end

  def app_idle () static proc
    I.Srv.idle ();
  end

  def at_exit () static proc
    variable i;
    _for i (0, length (CONNECTED_APPS) - 1)
      {
      variable app = CONNECTED_APPS[i];
      variable pid = CONNECTED_PIDS[i];
      variable s = App->APPS[app][string (pid)];
      Sock.send_int (s.fd, Api->GO_ATEXIT);
      }
  end

  def init () static proc
    I.Srv.init ();
  end
#endif
end
