subclass Client
  __init__
    init
    appnew
    appreconnect
    idle
  end

  let SESSION_PID = getenv ("SESSION_PID");
  let SESSION_WRFIFO = getenv ("SESSION_WRFIFO");
  let SESSION_RDFIFO = getenv ("SESSION_RDFIFO");
  let SESSION_RDFIFO_FD = NULL;
  let SESSION_WRFIFO_FD = NULL;

  def init ()
    __->__ ("IClient", "SESSION_WRFIFO_FD", open (SESSION_WRFIFO, O_WRONLY), "Class::vset");
    __->__ ("IClient", "SESSION_RDFIFO_FD", open (SESSION_RDFIFO, O_RDONLY), "Class::vset");
  end

  var screen_size_changed = 0;

  def __sigwinch_handler__ (sig) proc
    screen_size_changed = 1;
  end

  def appnew (s)
    variable apps = assoc_get_keys (App->APPS);
    apps = apps[array_sort (apps)];

    variable app;
    variable saved = Input->rmap.right;
    Input->rmap.right = [saved, Input->rmap.app_new];
    app = Rline.get_selection (apps, NULL, This.is.ved
        ? Ved.get_cur_buf ().ptr
        : s.ptr);
    Input->rmap.right = saved;

    ifnot (any (apps == app))
      return;

    Api.reset_app ();

    if (This.has.sigint)
      {
      variable handl;
      signal (SIGINT, SIG_IGN, &handl);
      }

    screen_size_changed = 0;
    signal (SIGWINCH, &__sigwinch_handler__);

    variable is_su = __get_qualifier_as ([Char_Type, Integer_Type],
        qualifier ("issu"), 0);

    Sock.send_int (SESSION_WRFIFO_FD, Api->APP_CON_NEW);
    () = Sock.get_int (SESSION_RDFIFO_FD);
    Sock.send_str (SESSION_WRFIFO_FD, app);
    () = Sock.get_int (SESSION_RDFIFO_FD);
    Sock.send_int (SESSION_WRFIFO_FD, is_su);

    variable retval = Sock.get_int (SESSION_RDFIFO_FD);
    if (retval == Api->GO_ATEXIT)
      exit_me (0);

    Api.restore_app (;sigint = This.has.sigint ? handl : NULL);

    signal (SIGWINCH, This.on.sigwinch);
    if (screen_size_changed)
      (@This.on.sigwinch) (SIGWINCH);

    if (0 == qualifier_exists ("mode") ||
        0 == (qualifier ("mode") == "Insert"))
      {
      Rline.set (s);
      Rline.prompt (s, s._lin, s._col);
      }
  end

  def appreconnect (s)
    variable request = [Api->APP_RECON_OTH, Api->APP_RECON_PREV]
      [qualifier_exists ("previous")];

    if (request == Api->APP_RECON_OTH) {
    Sock.send_int (SESSION_WRFIFO_FD, Api->APP_GET_CONNECTED);

    variable apps = Sock.get_str_ar (SESSION_RDFIFO_FD, SESSION_WRFIFO_FD);

    variable me = sprintf ("%s::%d", This.is.my.name, Env->PID);
    apps[where (me == apps)] = NULL;
    apps = apps[wherenot (_isnull (apps))];
    apps = apps[array_sort (apps)];

    variable app;
    variable saved = Input->rmap.right;
    Input->rmap.right = [saved, Input->rmap.app_prev, Input->rmap.app_rec];
    app = Rline.get_selection (apps, NULL, This.is.ved
        ? Ved.get_cur_buf ().ptr
        : s.ptr);
    Input->rmap.right = saved;

    ifnot (any (apps == app))
      return;

    if (app == This.is.my.name + "::" + string (Env->PID))
      return;
    }

    Api.reset_app ();

    if (This.has.sigint)
      {
      variable handl;
      signal (SIGINT, SIG_IGN, &handl);
      }

    screen_size_changed = 0;
    signal (SIGWINCH, &__sigwinch_handler__);

    Sock.send_int (SESSION_WRFIFO_FD, request);

    if (request == Api->APP_RECON_OTH)
      {
      () = Sock.get_int (SESSION_RDFIFO_FD);
      Sock.send_str (SESSION_WRFIFO_FD, app);
      }

    variable retval = Sock.get_int (SESSION_RDFIFO_FD);

    if (retval == Api->GO_ATEXIT)
      exit_me (0);

    Api.restore_app (;sigint = This.has.sigint ? handl : NULL);

    signal (SIGWINCH, This.on.sigwinch);
    if (screen_size_changed)
      (@This.on.sigwinch) (SIGWINCH);

    if (0 == qualifier_exists ("mode") ||
        0 == (qualifier ("mode") == "Insert"))
      {
      Rline.set (s);
      Rline.prompt (s, s._lin, s._col);
      }
  end

  def idle ()
    if (This.has.sigint)
      {
      variable handl;
      signal (SIGINT, SIG_IGN, &handl);
      }

    screen_size_changed = 0;
    signal (SIGWINCH, &__sigwinch_handler__);

    Sock.send_int (SESSION_WRFIFO_FD, Api->GO_IDLED);
    variable retval = Sock.get_int (SESSION_RDFIFO_FD);

    if (This.has.sigint)
      signal (SIGINT, handl);

    signal (SIGWINCH, This.on.sigwinch);
    if (screen_size_changed)
      (@This.on.sigwinch) (SIGWINCH);

    return retval;
  end
end
