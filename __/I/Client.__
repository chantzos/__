subclass Client
  __init__
    init
    appnew
    appreconnect
    idle
  end

  let SESSION_PID = getenv ("SESSION_PID");
  let SESSION_WRFIFO = getenv ("SESSION_WRFIFO");
  let SESSION_RDFIFO = getenv ("SESSION_RDFIFO");
  let SESSION_RDFIFO_FD = NULL;
  let SESSION_WRFIFO_FD = NULL;

  def init ()
    __->__ ("IClient", "SESSION_WRFIFO_FD", open (SESSION_WRFIFO, O_WRONLY), "Class::vset");
    __->__ ("IClient", "SESSION_RDFIFO_FD", open (SESSION_RDFIFO, O_RDONLY), "Class::vset");
  end

  def appnew (s)
    variable apps = assoc_get_keys (I->APPS);

    Rline.set (s);
    Rline.prompt (s, s._lin, s._col);

    () = Rline.commandcmp (s, apps);

    if (any (apps == s.argv[0]))
      {
      Api.reset_screen ();

      Sock.send_int (SESSION_WRFIFO_FD, Api->APP_CON_NEW);
      () = Sock.get_int (SESSION_RDFIFO_FD);
      Sock.send_str (SESSION_WRFIFO_FD, s.argv[0]);

      variable retval = Sock.get_int (SESSION_RDFIFO_FD);
      if (retval == Api->GO_ATEXIT)
        exit_me (0);
      }
    else
      return;

    Api.restore_screen ();

    Rline.set (s);
    Rline.prompt (s, s._lin, s._col);
  end

  def appreconnect (s)
    Sock.send_int (SESSION_WRFIFO_FD, Api->APP_GET_CONNECTED);

    variable apps = Sock.get_str_ar (SESSION_RDFIFO_FD, SESSION_WRFIFO_FD);

    variable me = sprintf ("%s::%d", This.appname, Env->PID);
    apps[where (me == apps)] = NULL;
    apps = apps[wherenot (_isnull (apps))];

    Rline.set (s);
    Rline.prompt (s, s._lin, s._col);

    () = Rline.commandcmp (s, apps);

    if (any (apps == s.argv[0]))
      {
      if (s.argv[0] == This.appname + "::" + string (Env->PID))
        return;

      Api.reset_screen ();
      Sock.send_int (SESSION_WRFIFO_FD, Api->APP_RECON_OTH);
      () = Sock.get_int (SESSION_RDFIFO_FD);
      Sock.send_str (SESSION_WRFIFO_FD, s.argv[0]);

      variable retval = Sock.get_int (SESSION_RDFIFO_FD);
      if (retval == Api->GO_ATEXIT)
        exit_me (0);
      }
    else
      return;

    Api.restore_screen ();

    Rline.set (s);
    Rline.prompt (s, s._lin, s._col);
  end

  def idle ()
    Sock.send_int (SESSION_WRFIFO_FD, Api->GO_IDLED);
    return Sock.get_int (SESSION_RDFIFO_FD);
  end
end
