class Sys
  let MACHINE = uname.machine;
  let OS = uname.sysname;
  let SLSH_BIN = Env->BIN_PATH + "/__slsh";
  let SUDO_BIN = NULL;

  def gethostname ()
    variable h;
    ifnot (access ("/etc/hostname", F_OK|R_OK))
      {
      variable fp = fopen ("/etc/hostname", "r");
      ifnot (NULL == fp)
        ifnot (-1 == fgets (&h, fp))
          {
          h = strtrim_end (h);
          if (strlen (h))
            return h;
          }
      }

    h = getenv ("HOSTNAME");
    (NULL == h) ? uname.nodename : h;
  end

  def checkperm (mode, perm)
    self.modetoint (mode) == perm ? 0 : -1;
  end

  def setperm (file, perm)
    if (-1 == chmod (file, perm))
      {
      IO.tostderr ("couldn't set permissions,", errno_string (errno));
      return -1;
      }
    0;
  end

  def modetoint (mode)
    variable
      S_ISUID = 04000,    % Set user ID on execution
      S_ISGID = 02000,    % Set group ID on execution
      S_ISVTX = 01000,    % Save swapped text after use (sticky)
      CHMOD_MODE_BITS =  (S_ISUID|S_ISGID|S_ISVTX|S_IRWXU|S_IRWXG|S_IRWXO);

    atoi (sprintf ("%d", mode & CHMOD_MODE_BITS));
  end

  def which (exec)
    % relative discussion about the semantics
    % Tue, 22 Nov 2016 04:32:41 +0000 (UTC)
    % From: Mark Galeck <mark_galeck@pacbell.net>
    % To: Austin-group-l <austin-group-l@opengroup.org>
    % Subject: when does PATH search stop?

    variable ar, path = Env->OS_PATH;

    if (NULL == path)
      return NULL;

    path = strchop (path, path_get_delimiter, 0);
    path = array_map (String_Type, &path_concat, path, exec);
    path = path [wherenot (array_map (Integer_Type, Dir.isdirectory, NULL, path))];
    ar = wherenot (array_map (Integer_Type, &access, path, X_OK));

    length (ar) ? path[ar][0] : NULL;
    % so, this which works like -
    % prefix every file name with all the components in $PATH
    % started from beginning, and check non directory files
    % for the executable bit and return the first found -
    % so it doesn't check if the process image can be loaded by exec*
  end

  def getgrname (gid)
    variable gr = getgrgid (gid);

    if (NULL == gr)
      if (errno)
        throw ClassError, "Sys::getgrname::" + errno_string (errno);
      else
        throw ClassError, "Sys::getgrname::cannot find the GID " + string (gid) +
         " in /etc/group, who are you?";

    gr.gr_name;
  end

  def getpwname (uid)
    variable pw =getpwuid (uid);

    if (NULL == pw)
      if (errno)
        throw ClassError, "Sys::getpwname::" + errno_string (errno);
      else
        throw ClassError, "Sys::getpwname::cannot find the UID " + string (uid) +
         " in /etc/passwd, who are you?";

    pw.pw_name;
  end

  subclass Acpi
    __init__
      brightness
      tomemory
    end

    var BRIGHT_INIT_DONE = 0;
    var BACKLIGHT_DIR = NULL;
    var MAX_BRIGHTNESS = NULL;

    var POWER_DIR = NULL;
    var MEM_INIT_DONE = 0;

    def tomemory ()
      ifnot ("Linux" == Sys->OS)
        return;

      ifnot (MEM_INIT_DONE)
        {
        ifnot (access ("/sys/power", F_OK))
          POWER_DIR = "/sys/power";

        MEM_INIT_DONE = 1;
        }

      if (NULL == POWER_DIR)
        return;

      variable passwd = NULL;

      if (getuid ())
        if (NULL == (passwd = qualifier ("passwd"), passwd))
          return;
        else
          passwd = strtrim_end (passwd) + "\n";

      variable com = (NULL == passwd ? "" : "printf \"" + passwd +
         "\" | " + Sys->SUDO_BIN + " -S -E -p \"\" ") +
         "sh -c \"printf \"mem\" >" + POWER_DIR + "/state\"";

      () = system (com);
    end

    def backlight_dir_init () proc
      BRIGHT_INIT_DONE = 1;

      ifnot ("Linux" == Sys->OS)
        return;

      variable dir = "/sys/class/backlight";
      variable ar  = listdir (dir);
      if (NULL == ar || 0 == length (ar))
        return;

      if (1 == length (ar))
        BACKLIGHT_DIR = dir + "/" + ar[0];

      if (any ("acpi_video0" == ar))
        BACKLIGHT_DIR = dir + "/acpi_video0";
      else
        BACKLIGHT_DIR = dir + "/" + ar[0];
    end

    def brightness (v)
      ifnot (BRIGHT_INIT_DONE)
        backlight_dir_init ();

      if (NULL == BACKLIGHT_DIR)
        return;

      if (NULL == MAX_BRIGHTNESS)
        {
        variable max_br = File.read (BACKLIGHT_DIR + "/max_brightness";
          unhandled, return_on_err = NULL);

        if (NULL == max_br)
          {
          MAX_BRIGHTNESS = -1;
          return;
          }

        MAX_BRIGHTNESS = atoi (max_br);
        }

      if (-1 == MAX_BRIGHTNESS)
        return;

      v = (MAX_BRIGHTNESS * v) / 100;

      variable passwd = NULL;

      if (getuid ())
        if (NULL == (passwd = qualifier ("passwd"), passwd))
          return;
        else
          passwd = strtrim_end (passwd) + "\n";

      variable com = (NULL == passwd ? "" : "printf \"" + passwd +
         "\" | " + Sys->SUDO_BIN + " -S -E -p \"\" ") +
         "sh -c \"printf \"" + string (v) + "\" >" + BACKLIGHT_DIR +
         "/brightness\"";

      () = system (com);
    end
  end

  subclass Signal
    __init__
      send
    end

    def send (pid, sig)
    ifnot (Sys.Pid.exists (pid))
      return 0;

    variable uid = qualifier ("uid", Env->UID);

    variable match = Re.Array.match (Sys.Pid.status (pid), "Uid:").lines;
    ifnot (length (match))
      return -1;

    match = strtok (match[0], ":")[1];

    if (atoi (strtok (match)[0]) == uid)
      return kill (pid, sig);

    variable passwd = qualifier ("passwd", Os.__getpasswd ());
    if (NULL == passwd)
      return -1;

    variable p = Proc.init (1, 0, 0);
    p.stdin.in = passwd;

    return [-1, 0][0 == p.execv (
      [Sys->SUDO_BIN, "-S", "-E", "-p", "", Sys->SLSH_BIN,
      Env->STD_LIB_PATH + "/proc/sendsignalassu.slc", string (sig),
      string (pid)], NULL).exit_status];
    end
  end

  subclass Pid
    __init__
      status
      exists
    end

    def status (pid)
      ifnot (self.exists (pid))
        return String_Type[0];

      ifnot (Sys->OS == "Linux")
        return String_Type[0];

      File.readlines ("/proc/" + string (pid) + "/status");
    end

    def exists (pid)
      0 == (kill (pid, 0)) || errno == EPERM;
    end
  end

  subclass Proc
    __init__
      table
      search
    end

    def table ()
      variable ps = Sys.which ("ps");

      if (NULL == ps)
        return String_Type[0];

      variable fp = popen ("ps aux", "r");
      if (NULL == fp)
        return String_Type[0];

      fgetslines (fp);
    end

    def search (pat)
      variable
        i,
        table = self.table ();

      table = Re.Array.match (table[[:-2]], pat;;__qualifiers);

      variable p = struct
        {
        com = table.lines,
        pid = Integer_Type[length (table.lines)]
        };

      _for i (0, length (table.lines) - 1)
        p.pid[i] = atoi (strtok (table.lines[i])[1]);

      p;
    end
  end

  fun mode_conversion (mode)
  fun getpwuidgid (user)
end
