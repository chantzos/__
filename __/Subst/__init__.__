class Subst
  def new_lines (pat) proc
    variable i;
    variable newlines = 0;

    _for i (1, strlen (pat) - 1)
      if ('n' == pat[i] && '\\' == pat[i - 1])
        newlines++;

    newlines;
  end

  def assign (substitution) proc
    variable
      sub,
      i = 1,
      list = {},
      len = strlen (substitution);

    while (i <= len)
      {
      sub = substr (substitution, i, 1);

      if (sub == "\\")
        {
        sub = substr (substitution, i + 1, 1);
        i += 2;

        if (__is_datatype_numeric (_slang_guess_type (sub)))
          {
          list_append (list, integer (sub));
          continue;
          }

        switch (sub)
          {
          case "\\" :
            list_append (list, "\\");
            continue;
          }

          {
          case "n" :
            list_append (list, "\n");
            continue;
          }

          {
          case "t" :
            list_append (list, "\t");
            continue;
          }

          {
          case "s" :
            list_append (list, " ");
            continue;
          }

          {
          case "&" :
            list_append (list, NULL);
            continue;
          }

          {
          throw ParseError, "Waiting one of \"t,n,s,&,\\,integer\" after the backslash";
          }
        }

      list_append (list, sub);
      i++;
      }

    list;
  end

  def exec (s, ar)
    variable
      ia,
      tok,
      chr,
      str,
      type,
      match,
      fpart,
      lpart,
      retval,
      context,
      replace,
      finished,
      newlines,
      lnronfile = s.lnronfile,
      i = 0,
      found = 0,
      fname = "file: " + s.fname,
      matches = 0;

    ar = [ar];

    newlines = new_lines (s.patstr);
    s.numchanges = 0;

    while (i < length (ar))
      {
      if (i + newlines > length (ar) - 1)
        break;

      s.lnronfile = lnronfile + i;

      str = strjoin (ar[[i:i+newlines]], newlines ? "\n" : "");

      found = pcre_exec (s.pat, str, 0);

      if (found)
        {
        matches++;
        finished = "";
        do
          {
          match = pcre_nth_match (s.pat, 0);
          fpart = substrbytes (str, 1, match[0]);
          context = substrbytes (str, match[0] + 1, match[1] - match[0]);
          lpart = substrbytes (str, match[1] + 1, -1);

          replace = "";

          _for ia (0, length (s.substlist) - 1)
            {
            chr = s.substlist[ia];
            type = typeof (chr);

            switch (type)
              {
              case Integer_Type :
                if (found - 1 < chr)
                  return "Captured substrings are less than the requested", -1;
                else
                  replace += pcre_nth_substr (s.pat, str, chr);
              }

              {
              case String_Type :
                if (chr == "&")
                  replace += context;
                else
                  replace += chr;
              }

              {
              case Null_Type :
                replace += "&";
              }

            }

          if (s.askwhensubst)
            {
            variable
              lfpart = strreplace (fpart, "\n", "\\n"),
              lcontext = strreplace (context, "\n", "\\n"),
              llpart = strreplace (lpart, "\n", "\\n"),
              lreplace = strreplace (replace, "\n", "\\n");

            retval = s.askonsubst (fname, s.lnronfile, lfpart, lcontext, llpart, lreplace);

             switch (retval)

               {
               case 'n': break;
               }

               {
               case 'a': s.askwhensubst = 0;
               }

               {
               case 'q':
                 if (s.numchanges)
                   return ar, 0;
                 else
                   return 1;
               }

               {
               case 'c':
                 return "Operation was canselled", -1;
               }
            }

          finished += sprintf ("%s%s", fpart, replace);
          s.numchanges++;
          str = lpart;
          ifnot (strlen (str))
            break;
          }
        while (found = pcre_exec (s.pat, str, 0), found && s.global);

        tok = strtok (sprintf ("%s%s", finished, str), "\n");

        if (i)
          ar = [ar[[:i-1]], tok, ar[[i+1+newlines:]]];
        else
          ar = [tok, ar[[i+1+newlines:]]];

        if (NULL == s.global)
          return ar, 0;

        i += length (tok);
        continue;
        }

      i++;
      }

    ifnot (s.numchanges)
      return 1;

    ar, 0;
  end

  def askonsubst (s, fn, lnr, fpart, context, lpart, replace) proc
    variable char_ar =  ['y', 'n', 'q', 'a', 'c'];
    variable hl_reg = Array_Type[2];
    variable ar =
      ["@" + fn + " linenr: " + string (lnr+1),
       "replace?",
       Smg.__HLINE__ (),
       sprintf ("%s%s%s", fpart, context, lpart),
       repeat ("_", COLUMNS),
       "with?",
       Smg.__HLINE__ (),
       sprintf ("%s%s%s", fpart, replace, lpart),
       Smg.__HLINE__ (),
       "y[es]/n[o]/q[uit]/a[ll]/c[ansel]"];

    hl_reg[0] = [5, LINES - 10, strlen (fpart), 1, strlen (context)];
    hl_reg[1] = [2, LINES - 6, strlen (fpart), 1, strlen (replace)];

    IO.ask (ar, char_ar;hl_region = hl_reg);
  end

  def new (pat, sub)
    try
      {
      struct
        {
        patstr = pat,
        numchanges = 0,
        fname = qualifier ("fname", " "),
        lnronfile = qualifier ("lnronfile", 0),
        global = qualifier ("global"),
        askwhensubst = qualifier ("askwhensubst", 1),
        askonsubst = qualifier ("askonsubst", &askonsubst),
        pat = pcre_compile (pat, qualifier ("pcreopts", PCRE_UCP|PCRE_UTF8|PCRE_NO_UTF8_CHECK)),
        substlist = assign (sub),
        };
      }
    catch ParseError:
      return __get_exception_info ().message, NULL;
  end
end
