class Xsrv
  import xsrv

  let XDIR = Env->TMP_PATH + "/X";
  let RDFIFO = XDIR + "/Svfifo";
  let WRFIFO = XDIR + "/Clfifo";
  let! WRFD = NULL;
  let! RDFD = NULL;
  let XAUTH_BIN = Sys.which ("xauth");
  let URXVTD_BIN = Sys.which ("urxvtd");
  let X_TERM_BIN = (NULL == URXVTD_BIN
    ? Sys.which ("xterm") : Sys.which ("urxvtc"));
  let SETXKBMAP_BIN = Sys.which ("setxkbmap");
  let ERR = 0xc8;

  def __desktop_change () public proc
  end

  def __rotate_desk () public proc
  end

  def __follow_client () public proc
  end

  def __client_to_desk () public proc
  end

  def __last_desk () public proc
  end

  % Config samples,
  % those can be set on SRC_PATH/local/__/Xlocalxsrv/__init.__ instead
  let! DESKTOP_CLASSES =
  struct
    {
    class =
      {
      ["__SHELL"],
      ["VED_LIB"],
      ["MAIL"],
      },
    __SHELL = [Xsrv->X_TERM_BIN, "-name", "__SHELL", "-e",
      Env->BIN_PATH + "/__shell"],
    MAIL = [Xsrv->X_TERM_BIN, "-name", "MAIL", "-e", "mutt", "-y"],
    VED_LIB = [Xsrv->X_TERM_BIN, "-name", "VED_LIB", "-e", "__ved",
      Env->SRC_CLASS_PATH + "/Ved/__init__.__"],
    };
 let! ON_MAP =
    {
    struct {class = "SHELL", desk = 1, follow = 1},
    };
  let! POSITIONALS =
    {
   % struct {class = "someclass", x = 100, y = 100, width = 1000, height = 1000}
    };
  let! COMMANDS = Assoc.new (Assoc_Type,
    [
    string (Mod4Mask),
    string (Mod4Mask|Mod1Mask),
    string (Mod4Mask|ShiftMask),
    string (Mod4Mask|ControlMask),
    string (Mod1Mask),
    string (Mod1Mask|ControlMask),
    string (Mod1Mask|ShiftMask),
    ],
    [
    Assoc.new (Struct_Type,
      ["c", "a", "Left", "Right", "Tab", "q", "grave"],
      {
      struct {fun = &Xspawn, args = {[X_TERM_BIN]}},
      struct {fun = &Xspawn, args = {[X_TERM_BIN, "-name", "SHELL", "-e", "__shell"]}},
      struct {fun = &__rotate_desk, args = {1}},
      struct {fun = &__rotate_desk, args = {-1}},
      struct {fun = &Xprev_win, args  = {}},
      struct {fun = &Xnext_win, args  = {}},
      struct {fun = &__last_desk, args   = {}},
      }),
    Assoc.new (Struct_Type, ["Up", "Down", "Left", "Right"], {
      struct {fun = &Xresize_stack, args = {-12}},
      struct {fun = &Xresize_stack, args = {12}},
      struct {fun = &Xresize_stack_sideways, args = {-12}},
      struct {fun = &Xresize_stack_sideways, args = {12}},
      }),
    Assoc.new (Struct_Type, ["k", "q", "f", "s"], {
      struct {fun = &Xkill_client, args = {}},
      struct {fun = &Xquit, args = {}},
      struct {fun = &Xchange_mode, args = {0}},
      struct {fun = &Xchange_mode, args = {1}},
      }),
    Assoc.new (Struct_Type, ["Up", "Down", "Left", "Right"], {
      struct {fun = &Xmove_stack, args = {-15}},
      struct {fun = &Xmove_stack, args = {15}},
      struct {fun = &Xmove_stack_sideways, args = {-15}},
      struct {fun = &Xmove_stack_sideways, args = {15}},
      }),
    Assoc.new (Struct_Type, ["F3"], {
      struct {fun = &Xspawn, args = {[X_TERM_BIN, "-name", "ALSA", "-e", "alsamixer"]}},
      }),
    Assoc.new (Struct_Type, NULL, NULL),
    Assoc.new (Struct_Type, NULL, NULL),
    ]);

  include! __init__ from Xlocalxsrv as Xsrv

  let DESKLEN = length (DESKTOP_CLASSES.class);

  beg
    _for $5 (0, DESKLEN - 1)
      if ($5 > 9)
        {
        COMMANDS ()[string (Mod4Mask)]["F" + string ($5 - 9)] =
          struct {fun = &__desktop_change, args = {$5}};
        COMMANDS ()[string (Mod4Mask|ControlMask)]["F" + string ($5 - 9)] =
          struct {fun = &__follow_client, args = {$5}};
        COMMANDS ()[string (Mod4Mask|Mod1Mask)]["F" + string ($5 - 9)] =
          struct {fun = &__client_to_desk, args = {$5}};
        }
      else
        {
        COMMANDS ()[string (Mod4Mask)][string ($5)] =
          struct {fun = &__desktop_change, args = {$5}};
        COMMANDS ()[string (Mod4Mask|ControlMask)][string ($5)] =
          struct {fun = &__follow_client, args = {$5}};
        COMMANDS ()[string (Mod4Mask|Mod1Mask)][string ($5)] =
          struct {fun = &__client_to_desk, args = {$5}};
       }

     __uninitialize (&$5);
  end

  % should be replaced by md5sum?
  def __xget_cookie () proc
    variable mc = Sys.which ("mcookie");
    if (NULL == mc)
      return NULL;

    variable buf, fp = popen (mc, "r");
    () = fgets (&buf, fp);
    strtrim_end (buf);
  end

  def X_startup () public proc
    ifnot (NULL == URXVTD_BIN)
      () = system (URXVTD_BIN + " -q -f -o &");

    variable cookie = __xget_cookie ();
    if (NULL != cookie && NULL != XAUTH_BIN)
      {
      variable tmp = File.mktmp (Env->TMP_PATH + "/X", "serverauth");
      ifnot (NULL == tmp)
        {
        putenv ("XAUTHORITY=" + tmp.file);
        () = system (XAUTH_BIN + " add " + getenv ("DISPLAY") + " . " + cookie);
        }
      }

    % local
    ifnot (NULL == SETXKBMAP_BIN)
      () = system (SETXKBMAP_BIN + " -layout \"us,el\" -option \"grp:alt_space_toggle\"");

    sleep (1);

    Xspawn ([X_TERM_BIN, "-name", "__SHELL", "-e", Env->BIN_PATH + "/__shell"]);
  end

  def Srv_set_keys () public proc
    variable i, j, keys, len = 0, llen,_mod;
    variable mods = assoc_get_keys (COMMANDS);

    _for i (0, length (mods) -1)
      {
      _mod = mods[i];
      keys = assoc_get_keys (COMMANDS[_mod]);
      llen = length (keys);
      len += llen;
      _for j (0, llen - 1)
        struct {modifier = atoi (_mod), key = keys[j]};
      }

    len;
  end

  def Srv_set_positional () public proc
    __push_list (POSITIONALS);
    length (POSITIONALS);
  end

  def Srv_set_onmap () public proc
    __push_list (ON_MAP);
    length (ON_MAP);
  end

  def Srv_set_modes () public proc
    variable ar = Integer_Type[DESKLEN];
    ar++;
    ar[DESKLEN-1]++;
    ar;
  end

  def Srv_set_desktops () public proc
    DESKLEN;
  end

  def __client_to_desk () public proc
    variable desk, k = qualifier ("key");
    if ('F' == k[0])
      desk = 9 + atoi (k[[1:]]);
    else
      desk = atoi (k);

    Xclient_to_desk (desk);
  end

  def __follow_client () public proc
    variable desk, k = qualifier ("key");
    if ('F' == k[0])
      desk = 9 + atoi (k[[1:]]);
    else
      desk = atoi (k);

    Xfollow_client (desk);
  end

  def Srv_on_keypress (modifier, kstr) public proc
    variable _mod = string (modifier);

    ifnot (assoc_key_exists (COMMANDS, _mod))
      return;

    ifnot (assoc_key_exists (COMMANDS[_mod], kstr))
      return;

    (@COMMANDS[_mod][kstr].fun)
      (__push_list (COMMANDS[_mod][kstr].args);key = kstr);
  end

  def Srv_on_desktop_change (did) public proc
    variable ar = XGetDeskClassNames (did);
    variable cls = DESKTOP_CLASSES.class[did];
    ifnot (length (cls))
      return;

    if (NULL == ar)
      ar = String_Type[0];

    variable i, p;
    _for i (0, length (cls) - 1)
      {
      if (any (ar == cls[i]))
        continue;

      Xspawn (get_struct_field (DESKTOP_CLASSES, cls[i]));
      }
  end

  def __last_desk () public proc
    variable cur = CURRENT_DESKTOP;
    Xchange_desk (PREV_DESKTOP);
    ifnot (cur == CURRENT_DESKTOP)
      Srv_on_desktop_change (CURRENT_DESKTOP);
  end

  def __rotate_desk (dir) public proc
    variable cur = CURRENT_DESKTOP;
    variable desk = (CURRENT_DESKTOP + DESKLEN + dir) mod DESKLEN;

    Xchange_desk (desk);

    ifnot (cur == CURRENT_DESKTOP)
      Srv_on_desktop_change (CURRENT_DESKTOP);
  end

  def __desktop_change () public proc
    variable desk, k = qualifier ("key");
    if ('F' == k[0])
      desk = 9 + atoi (k[[1:]]);
    else
      desk = atoi (k);

    variable cur = CURRENT_DESKTOP;

    Xchange_desk (desk);

    ifnot (cur == CURRENT_DESKTOP)
      Srv_on_desktop_change (CURRENT_DESKTOP);
  end

  def start ()
    Xstart ();

    variable xauthfile = getenv ("XAUTHORITY");
    ifnot (NULL == xauthfile)
      () = remove (xauthfile);

    ifnot (access (RDFIFO, F_OK))
      () = remove (RDFIFO);

    ifnot (access (WRFIFO, F_OK))
      () = remove (WRFIFO);
  end

  beg
    ifnot (access (XDIR, F_OK))
      {
      ifnot (Dir.isdirectory (XDIR))
        This.err_handler (XDIR + ": not a directory");
      }
    else
      if (-1 == Dir.make (XDIR, File->PERM["PRIVATE"];strict))
        This.err_handler ("cannot create directory: " + XDIR);

    ifnot (access (RDFIFO, F_OK))
      {
      ifnot (File.is_fifo (RDFIFO))
        This.err_handler (RDFIFO + ": not a fifo file");
      }
    else
      if (-1 == mkfifo (RDFIFO, File->PERM["PRIVATE"]))
        This.err_handler ("cannot create fifo: " + RDFIFO);

    ifnot (access (WRFIFO, F_OK))
      {
      ifnot (File.is_fifo (WRFIFO))
        This.err_handler (WRFIFO + ": not a fifo file");
      }
    else
      if (-1 == mkfifo (WRFIFO, File->PERM["PRIVATE"]))
        This.err_handler ("cannot create fifo: " + WRFIFO);
  end
end
