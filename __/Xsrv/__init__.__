class Xsrv
  beg
    Class.load ("Diff");
  end

  let XDIR = Env->TMP_PATH + "/X";
  let RDFIFO = XDIR + "/Svfifo";
  let WRFIFO = XDIR + "/Clfifo";
  let XAUTH_BIN = Sys.which ("xauth");
  let URXVTD_BIN = Sys.which ("urxvtd");
  let X_TERM_BIN = NULL == URXVTD_BIN ? Sys.which ("xterm") : Sys.which ("urxvtc");

  import xsrv

  def start ()
    Xstart ();
  end

  % should be replaced by md5sum?
  def __xget_cookie () proc
    variable mc = Sys.which ("mcookie");
    if (NULL == mc)
      return NULL;

    variable buf, fp = popen (mc, "r");
    () = fgets (&buf, fp);
    strtrim_end (buf);
  end

  def X_startup () public proc
    ifnot (NULL == URXVTD_BIN)
      () = system ("urxvtd -q -f -o &");

    variable cookie = __xget_cookie ();
    if (NULL != cookie && NULL != XAUTH_BIN)
      {
      variable al = listdir (Env->TMP_PATH + "/X");
      variable xauthfd = mkstemp (Env->TMP_PATH + "/X/serverauth.XXXXXX");
      variable bl = listdir (Env->TMP_PATH + "/X");
      variable d = Diff.new (al, bl);
      variable xauthfile = d[wherenot (strncmp (d, "+", 1))[0]];
      xauthfile = Env->TMP_PATH + "/X/" + substr (xauthfile, 2, -1);
      putenv ("XAUTHORITY=" + xauthfile);
      () = system (XAUTH_BIN + " add " + getenv ("DISPLAY") + " . " + cookie);
      }

    () = system ("setxkbmap -layout \"us,el\" -option \"grp:alt_space_toggle\"");
    sleep (0.2);
    () = system (X_TERM_BIN + " -e shell &");
  end

  def clslchdesk ()
  end

  def Srv_getdeskwinds () public proc
    variable wrfd = open (WRFIFO, O_WRONLY);
    variable rdfd = open (RDFIFO, O_RDONLY);

    variable desk = Sock.get_int (rdfd);

    variable ar = XGetDeskWinds (desk);

    if (NULL == ar)
      ar = String_Type[0];

    Sock.send_str_ar (rdfd, wrfd, ar);
  end

  beg
    ifnot (access (XDIR, F_OK))
      {
      ifnot (Dir.isdirectory (XDIR))
        This.err_handler (XDIR + ": not a directory");
      }
    else
      if (-1 == Dir.make (XDIR, File->PERM["PRIVATE"];strict))
        This.err_handler ("cannot create directory: " + XDIR);

    ifnot (access (RDFIFO, F_OK))
      {
      ifnot (File.is_fifo (RDFIFO))
        This.err_handler (RDFIFO + ": not a fifo file");
      }
    else
      if (-1 == mkfifo (RDFIFO, File->PERM["PRIVATE"]))
        This.err_handler ("cannot create fifo: " + RDFIFO);

    ifnot (access (WRFIFO, F_OK))
      {
      ifnot (File.is_fifo (WRFIFO))
        This.err_handler (WRFIFO + ": not a fifo file");
      }
    else
      if (-1 == mkfifo (WRFIFO, File->PERM["PRIVATE"]))
        This.err_handler ("cannot create fifo: " + WRFIFO);
  end
end
