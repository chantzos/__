class Assoc
  def new (dtype, keys, values)
    variable def = qualifier ("default");
    variable a = NULL == def ? Assoc_Type[dtype] : Assoc_Type[dtype, def];

    if (NULL == keys)
      return a;

    variable dtps = Array.map (DataType_Type, &typeof, {keys, values});
    variable len = 0;
    variable llen;
    variable i;

    _for i (0, length (dtps) - 1)
      if (any ([Array_Type, List_Type] == dtps[i]))
        ifnot (len)
          len = length ({keys, values}[i]);
        else
          {
          llen = length (values);

          ifnot (llen == len)
            throw ClassError, "AssocNewInvalidParmError::keys and values are of different length";

          len = llen;
          }

    ifnot (any ([Array_Type, List_Type] == dtps[0]))
      if (any ([Array_Type, List_Type] == dtps[1]))
        if (len > 1)
          throw ClassError, "AssocNewInvalidParmError::keys and values are of different length";

    variable v;

    do
      {
      v = (any ([Array_Type, List_Type] == dtps[1])) ? values[len - 1] : values;

      ifnot (typeof (v) == dtype)
        ifnot (Any_Type == dtype)
          throw ClassError, "InvalidParmError::expecting " + string (dtype) + ", got " +
            string (typeof (v));

      if (any ([Array_Type, List_Type] == dtps[0]))
        a[keys[len - 1]] = v;
      else
        a[keys] = v;

      len--;
      }
    while (len);

    a;
  end

  def put (assoc, key, val)
    ifnot (Assoc_Type == typeof (assoc))
      return -1;

    ifnot (String_Type == typeof (key))
      return -1;

    try
      assoc[key] = val;
    catch TypeMismatchError:
      return -1;

    return 0;
  end

  def to_string (a)
    variable keys = assoc_get_keys (a);
    variable values = assoc_get_values (a);
    variable sorted = qualifier_exists ("sort");
    if (sorted)
      {
      variable sort_fun = __get_qualifier_as (Ref_Type,
        "sort_fun", qualifier ("sort_fun"), NULL);
      ifnot (NULL == sort_fun)
        sorted = array_sort (keys, sort_fun;;__qualifiers);
      else
        sorted = array_sort (keys;;__qualifiers);

      keys = keys[sorted];
      values = values[sorted];
      }

    variable fmt = "";
    loop (length (keys))
      fmt += "%S : %%S\n";

    fmt = sprintf (fmt[[:-2]], Array.push (keys));

    sprintf (fmt, Array.push (values));
  end
end
