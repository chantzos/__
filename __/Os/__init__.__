class Os
  let HASHEDDATA = NULL;
  var do_cache = 1;
  var last_request_time = 0;
  var timeout = 30 * 60;
  var cached_passwd = NULL;
  var max_tries = 3;

  def set_passwd_timeout (tim)
    ifnot (Integer_Type == typeof (tim))
      return;

    timeout = tim;
  end

  def reset_passwd ()
    ifnot (last_request_time)
      return;

    last_request_time -= timeout - 1;
  end

  def get_passwd_timeout ()
    timeout;
  end

  def getpasswd ()
    variable passwd = "";
    variable prompt = "password:";
    variable chr;

    Smg.atrcaddnstrdr (prompt, 0, MSGROW, 0, MSGROW, strlen (prompt), COLUMNS);

    while (chr = Input.getch (), chr != '\r')
      {
      if (any (Input->rmap.backspace == chr) && strlen (passwd))
        passwd = substr (passwd, 1, strlen (passwd) - 1);
      else
        passwd += char (chr);
      }

    Smg.send_msg (" ", 0);

    passwd;
  end

  def encryptpasswd (passwd)
    passwd = NULL == passwd ? self.getpasswd () : passwd;

    Crypt.encrypt (Rand.getstr ('0', 'z', 40), passwd);
  end

  def confirmpasswd (data, passwd)
    @passwd = self.getpasswd ();

    Crypt.decrypt (data, @passwd);
  end

  def authenticate (user, passwd)
    auth (user, passwd);
  end

  def __getpasswd__ (self) proc
    if (do_cache)
      ifnot (qualifier_exists ("uncached"))
        ifnot (NULL == cached_passwd)
          if (last_request_time)
            if (_time - last_request_time < timeout)
              ifnot (self.authenticate (Env->USER, cached_passwd))
                {
                last_request_time = _time;
                return cached_passwd + "\n";
                }

    variable passwd, retval;

    ifnot (NULL == HASHEDDATA)
      {
      retval = self.confirmpasswd (HASHEDDATA, &passwd);
      if (NULL == retval)
        {
        passwd = NULL;
        Smg.send_msg_dr ("Authentication error", 1, NULL, NULL);
        }
      else
        passwd += "\n";
      }
    else
      {
      passwd = self.getpasswd ();

      if (-1 == self.authenticate (Env->USER, passwd))
        {
        Smg.send_msg_dr ("Authentication error", 1, NULL, NULL);
        passwd = NULL;
        }

      ifnot (NULL == passwd)
        {
        Os.let ("HASHEDDATA", self.encryptpasswd (passwd));
        passwd += "\n";
        }
      }

    ifnot (NULL == passwd)
      if (do_cache)
        {
        cached_passwd = strtrim_end (passwd);
        last_request_time = _time;
        }

    passwd;
  end

  def __getpasswd ()
    variable tries = 0;
    variable passwd = NULL;
    while (tries < max_tries)
     {
     passwd = __getpasswd__ (self;;__qualifiers);
     ifnot (NULL == passwd)
       if (strlen (passwd))
         break;

     tries++;
     if (tries < max_tries)
       {
       Smg.send_msg_dr ("password is not correct, try for " +
         string (max_tries - tries) + " more times", 1, NULL, NULL);
       sleep (1);
       }
     }

   passwd;
  end

  fun login ()
end
