subclass Run
  __init__
    init
      srv
      client
      child
    as
      client
      child
    app
  end

  def init_srv ()
  end

  def init_client ()
  end

  def init_child ()
  end

  def as_client (argv, srvf, clnf)
    variable env = [Env.defenv (),
      __get_qualifier_as (AString_Type, qualifier ("env"), String_Type[0]),
      "SESSION=1",
      "SESSION_WRFIFO=" + srvf,
      "SESSION_RDFIFO=" + clnf,
      ];

    self.app (argv, env;;__qualifiers);
  end

  def as_child (argv)
    %Testing: can start other children but idle exits
    %ifnot (NULL == This.is.child)
    %return;

    if (NULL == App->PARENT_FIFO)
      {
      App->PARENT_FIFO = This.is.my.tmpdir + "/PARENT.fifo";

      if (-1 == mkfifo (App->PARENT_FIFO, 0755))
        {
        App->PARENT_FIFO = NULL;
        throw ClassError, "Run.as.child::cannot create Parent's fifo, " +
          errno_string (errno);
        }
      }

    ifnot (length (argv))
      return;

    variable child = argv[0];

    variable chfifo = This.is.my.tmpdir + "/__" + child + "_child_" +
      string (_time)[[5:]] + ".fifo";

    if (-1 == mkfifo (chfifo, 0755))
      throw ClassError, "Run.as.child::cannot create Child's fifo, " +
        errno_string (errno);

    variable env = [Env.defenv (),
      __get_qualifier_as (AString_Type, qualifier ("env"), String_Type[0]),
      "PARENT_WRFIFO=" + App->PARENT_FIFO,
      "PARENT_RDFIFO=" + chfifo,
      "ISACHILD=1"];

    if (This.has.sigint)
      {
      variable handl;
      signal (SIGINT, SIG_IGN, &handl);
      }

    variable chpid = self.app (argv, env;;struct {@__qualifiers, bg});

    if (NULL == chpid)
      {
      () = remove (chfifo);

      if (This.has.sigint)
        signal (SIGINT, handl);

      return;
      }

    App->PARENT_FIFO_FD = open (App->PARENT_FIFO, O_RDONLY);
    variable chfifo_fd = open (chfifo, O_WRONLY);

    App->CHILDREN[string (chpid)] = @App_Type;

    variable s = App->CHILDREN[string (chpid)];
    s.fifo  = chfifo;
    s.fd    = chfifo_fd;
    s.pid   = chpid;
    s.state = App->CONNECTED;
    s.name  = child;
    s.argv = argv;

    variable retval = Sock.get_int (App->PARENT_FIFO_FD);

    if (App->GO_ATEXIT == retval)
      {
      () = waitpid (s.pid, 0);
      () = close (s.fd);
      () = remove (s.fifo);
      assoc_delete_key (App->CHILDREN, string (chpid));
      }
    else if (App->GO_IDLED == retval)
      s.state |= App->IDLED;
    else
      throw ClassError, "Run.as.child::unexpected retval from pipe";

    App.restore_app (;sigint = This.has.sigint ? handl : NULL);

    ifnot (qualifier_exists ("goto_rline"))
      return;

    variable rl = qualifier ("rline", Ved.get_cur_rline ());
    Rline.set (rl);
    Rline.prompt (rl, rl._lin, rl._col);
  end

  def app (argv, env)
    APP_ERR = 0;

    if (strncmp (argv[0], "__", 2) || "__" == argv[0])
      argv[0] = "__" + argv[0];

    argv[0] = Env->BIN_PATH + "/" + argv[0];

    if (-1 == access (argv[0], F_OK|X_OK))
      {
      IO.tostderr (argv[0], "couldn't been executed,", errno_string (errno));
      APP_ERR = 1;
      return NULL;
      }

    variable issu = qualifier ("issu");
    variable passwd = qualifier ("passwd");

    variable p = Proc.init (issu, 0, 0);

    if (issu)
      {
      if (any (App->NOT_RUN_AS_SU == path_basename (argv[0])))
        {
        IO.tostderr (argv[0], "is not allowed to run with super user rights");
        APP_ERR = 1;
        return NULL;
        }

      if (NULL == passwd)
        {
        variable isgoingtoreset = 0;
        ifnot (This.has.screenactive)
          {
          App.restore_app ();
          isgoingtoreset = 1;
          }

          passwd = Os.__getpasswd ();

          if (isgoingtoreset)
            App.reset_app ();

          if (NULL == passwd)
            {
            APP_ERR = 1;
            return NULL;
            }
          }

      p.stdin.in = passwd;

      argv = [Sys->SUDO_BIN, "-S", "-E", "-p", " ", argv];
      }

    variable status;
    variable bg = qualifier_exists ("bg") ? 1 : NULL;

    App.reset_app ();

    if (NULL == bg && This.has.sigint)
      {
      variable handl;
      signal (SIGINT, SIG_IGN, &handl);
      }

    ifnot (NULL == env)
      status = p.execve (argv, env, bg);
    else
      status = p.execv (argv, bg);

    if (NULL == bg)
      App.restore_app (;sigint = This.has.sigint ? handl : NULL);

    status;
  end
end
