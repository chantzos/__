class App
  typedef AppInfo
    help,
    info,
    dir,
    set,
  end

  typedef App
    fifo,
    fd,
    pid,
    state,
    name,
    argv,
  end

  var public SCRATCH_VED;
  var public ERR_VED;
  var public OUT_VED;
  var public OUTBG_VED;
  var public SOCKET;
  var public SCRATCH;
  var public STDOUTBG;
  var public GREPFILE;
  var public DIFFFILE;
  var public DIFF_VED;
  var public BGDIR;
  var public RDFIFO;
  var public WRFIFO;
  var public SCRATCHFD;
  var public STDOUTFDBG;
  var public RLINE = NULL;
  var public BGPIDS = Assoc_Type[Struct_Type];
  var public IARG = 0;
  var public ICOM = 0;
  var public VED_WIND_NEEDS_DRAW = 0;
  var public EXITSTATUS = 0;

  var static PARENT_FIFO    = NULL;
  var static PARENT_FIFO_FD = NULL;
  var static CHILDREN       = Assoc_Type[App_Type];

  var static APPS     = Assoc_Type[Assoc_Type];
  var static APPSINFO = Assoc_Type[AppInfo_Type];

  var static NOT_RUN_AS_SU = ["____"];

  let GO_ATEXIT  = 0x0C8;
  let GO_IDLED   = 0x012c;
  let RECONNECT  = 0x0190;
  let APP_GET_ALL   = 0x2bc;
  let APP_CON_NEW   = 0x1f4;
  let APP_RECON_OTH = 0x258;
  let APP_GET_CONNECTED = 0x320;
  let RESUME = 0x384;
  let CHILD_CON_NEW   = 0x3e8;
  let CHILD_RECONNECT = 0x44c;
  let CHILD_RECON_OTH = 0x4b0;
  let CHILD_GET_CONNECTED = 0x514;
  let APP_RECON_PREV = 0x578;
  let CONNECTED = 0x1;
  let IDLED = 0x2;

  def build_table ()
    variable i;
    variable ii;
    variable app;
    variable dir;
    variable apps;
    variable dirs = [Env->USER_APP_PATH, Env->STD_APP_PATH, Env->LOCAL_APP_PATH];

    _for i (0, length (dirs) - 1)
      {
      dir = dirs[i];
      apps = listdir (dir);
      if (NULL == apps || (NULL != apps && 0 == length (apps)))
        continue;

      apps = apps[where (array_map (Integer_Type, Dir.isdirectory,
        Dir, array_map (String_Type, &path_concat, dir, apps)))];

      _for ii (0, length (apps) - 1)
        {
        app = apps[ii];
        if (-1 == access (dir + "/" + app + "/" + app + ".sl", F_OK) &&
            -1 == access (dir + "/" + app + "/" + app + ".slc", F_OK))
          continue;

        APPSINFO[app] = @AppInfo_Type;
        APPSINFO[app].dir = dir + "/" + app;

        ifnot (access (dir + "/" + app + "/help.txt", F_OK|R_OK))
          APPSINFO[app].help = dir + "/" + app + "/help.txt";

        ifnot (access (dir + "/" + app + "/desc.txt", F_OK|R_OK))
          APPSINFO[app].info = dir + "/" + app + "/desc.txt";

        ifnot (access (dir + "/" + app + "/set", F_OK|R_OK))
          APPSINFO[app].set = File.readlines (dir + "/" + app + "/set");

        APPS[app] = Assoc_Type[App_Type];
        }
      }
  end

  def reset_app ()
    if (Input.is_inited ())
      Input.at_exit ();

    if (Smg.is_inited ())
      if (qualifier_exists ("deinit"))
        Smg.at_exit ();
      else
        ifnot (Smg.suspend_state ())
          Smg.suspend ();

    This.has.screenactive = 0;
  end

  def restore_app ()
    ifnot (Input.is_inited ())
      Input.init ();

    ifnot (Smg.is_inited ())
      Smg.init ();
    else
      if (Smg.suspend_state ())
        Smg.resume ();

    variable sigint_handl = qualifier ("sigint");
    ifnot (NULL == sigint_handl)
      if (Ref_Type == typeof (sigint_handl))
        if (__is_callable (sigint_handl))
          signal (SIGINT, sigint_handl);

    variable f = This.on.reconnect;
    ifnot (NULL == f)
      if (Ref_Type == typeof (f))
        if (__is_callable (f))
          (@f)(;;__qualifiers);

    This.has.screenactive = 1;
  end

  def detach ()
    if (This.is.me == "MASTER")
      return;

    reset_app (NULL);

    variable retval = (@__get_reference ("I->app_idle")) ();

    ifnot (retval)
      restore_app (NULL);
  end

  def quit_me ()
    ifnot (This.is.me == "MASTER")
      exit_me (0);

    () = (@__get_reference ("I->app_idle")) ();
  end

  subclass Run from App
  subclass Connect from App
  subclass Eval from App

  def child_reconnect (s) static proc
    ifnot (NULL == This.is.child)
      return;

    variable pids = assoc_get_keys (CHILDREN);
    ifnot (length (pids))
      return;

    pids = pids[array_sort (pids)];

    variable i, help = String_Type[length (pids)];
    _for i (0, length (pids) - 1)
      help[i] =  ":: " + strjoin (CHILDREN[pids[i]].argv, " ");

    variable buf = Ved.get_cur_buf ();
    variable child = Rline.get_selection (pids, help,
        This.is.ved ? buf.ptr : s.ptr);

    if (strlen (child))
      if ((i = wherefirst (pids == child), NULL != i))
          App.Connect.to.child (pids[i]);

    Rline.set (s);
    Rline.prompt (s, s._lin, s._col);
  end

  def __exit_children__ () proc
    variable chs = assoc_get_keys (CHILDREN);
    variable s, i;
    _for i (0, length (chs) - 1)
      {
      s = CHILDREN[chs[i]];
      Sock.send_int (s.fd, App->GO_ATEXIT);
      () = waitpid (s.pid, 0);
      }
  end

  def __exit () public proc
    __exit_children__;

    if (__is_initialized (&Input))
      Input.at_exit ();

    if (__is_initialized (&Smg))
      Smg.at_exit ();

    variable rl = Ved.get_cur_rline ();

    ifnot (NULL == rl)
      Rline.writehistory (rl.history, rl.histfile);

    variable searchhist = (@__get_reference ("SEARCH_HISTORY"));

    if (length (searchhist))
      Rline.writehistory (list_to_array (searchhist), (@__get_reference ("SEARCH_HISTFILE")));

    ifnot (NULL == This.is.std.err.orig_fd)
      () = dup2_fd (This.is.std.err.orig_fd, 2);
  end

  def __draw_wind () public proc
    variable cur = Ved.get_wind_name ();
    variable wind = _NARGS ? () : cur;

    ifnot (String_Type == typeof (wind))
      return;

    if (wind == ".")
      wind = cur;

    variable winds = Ved.get_wind_names ();
    ifnot (any (wind == winds))
      return;

    if (wind == cur)
      Ved.draw_wind ();
    else
      Ved.wind_change (wind);
  end

  def __draw_buf (s) public proc
    variable st = NULL == s._fd
      ? lstat_file (s._abspath)
      : fstat (s._fd);

    if (NULL == st || (s.st_.st_size && st.st_atime == s.st_.st_atime
        && st.st_size == s.st_.st_size))
      ifnot (qualifier_exists ("force_a_redraw"))
        {
        s._i = s._ii;
        s.draw ();
        return;
        }

    s.st_ = st;

    if (qualifier ("reread", 1))
      s.lines = Ved.getlines (s._abspath, s._indent, st);

    s._len = length (s.lines) - 1;

    variable _i = qualifier ("_i");
    variable pos = qualifier ("pos");
    variable len = length (s.rows) - 1;

    ifnot (NULL == pos)
      (s.ptr[0] = pos[0], s.ptr[1] = pos[1]);
    else
      (s.ptr[1] = 0, s.ptr[0] = s._len + 1 <= len
        ? s.rows[0] : s.rows[-2]);

    ifnot (NULL == _i)
      {
      s._i = _i;

      if (s._i > s._len)
        s._i = s._len - length (s.rows) + 2;

      s._i = 0 > s._i ?  0 : s._i;
      }
    else
      s._i = s._len + 1 <= len ? 0 : s._len + 1 - len;

    s.draw ();
  end

  def __viewfile  (s, type, pos, _i) public proc
    variable ismsg = 0;

    Ved.setbuf (s._abspath);

    topline ("(pager) (" + type + " BUF) --";row =  s.ptr[0], col = s.ptr[1]);

    __draw_buf (s;;struct {@__qualifiers, pos = pos, _i = _i});

    forever
      {
      VEDCOUNT = -1;
      s._chr = Input.getch (;disable_langchange);

      if ('1' <= s._chr <= '9')
        {
        VEDCOUNT = "";

        while ('0' <= s._chr <= '9')
          {
          VEDCOUNT += char (s._chr);
          s._chr = Input.getch (;disable_langchange);
          }

        try
          VEDCOUNT = integer (VEDCOUNT);
        catch SyntaxError:
          {
          ismsg = 1;
          Smg.send_msg_dr ("count: too many digits >= " +
            string (256 * 256 * 256 * 128), 1, s.ptr[0], s.ptr[1]);
          continue;
          }
        }

      s.vedloopcallback ();

      if (ismsg)
        {
        Smg.send_msg_dr (" ", 0, s.ptr[0], s.ptr[1]);
        ismsg = 0;
        }

      if (any ([':', 'q'] == s._chr))
        break;
      }
  end

  def wind_mang (s) public proc
    variable ref = __get_reference ("__vhandle_CTRL_w");
    variable buf = Ved.get_cur_buf ();

    ifnot ('`' == s._chr)
      {
      loop (1) {
      variable saved = Input->rmap.right;
      Input->rmap.right = [saved, Input->rmap.windmenu];
      variable commands = [
        "frame_new", "frame_next", "frame_prev", "frame_del",
        "wind_new",  "wind_del", "wind_next", "wind_prev",
        "wind_goto"];
      variable action = Rline.get_selection (commands, NULL,
        This.is.ved ? buf.ptr : s.ptr);
      Input->rmap.right = saved;

      ifnot (strlen (action))
        break;

      variable idx = where (commands == action);

      ifnot (length (idx))
        break;

      if (action == "wind_goto")
        (@ref) (buf);
      else
        (@ref) (buf;input_char =
          ['s', 'w', Input->UP, 'd', 'n', 'k', '.', ','][idx[0]]); }
      }
    else
      (@ref) (buf);

    Rline.set (s);
    Rline.prompt (s, s._lin, s._col);
  end

  def __toscratch  (str) public proc
    if (qualifier_exists ("clear"))
      () = File.write (SCRATCH, "");

    IO.print (str;fd = SCRATCHFD);
  end

  def __console () public proc
    App.Eval.run (;;__qualifiers ());
  end

  def __runcom  (argv, issu) public proc
    variable rl = Ved.get_cur_rline ();
    variable commands = assoc_get_keys (rl.argvlist);
    variable orig = argv[0];

    ifnot (any (commands == argv[0]))
     ifnot (any (commands == (argv[0] = "~" + orig, argv[0])))
      ifnot (any (commands == (argv[0] = "`" + orig, argv[0])))
       ifnot (any (commands == (argv[0] = "!" + orig, argv[0])))
        ifnot (any (commands == (argv[0] = "__" + orig, argv[0])))
          {
          IO.tostderr (argv[0] + ": no such command");
          return;
          }

    rl.argv = argv;
    (@rl.argvlist[argv[0]].func) (rl.argv;;struct {issu = issu, @__qualifiers ()});
  end

  def scratch (ved)
    ifnot (qualifier ("draw", 1))
      return;

    variable __i = __get_qualifier_as (Integer_Type, qualifier ("_i"), 0);
    __viewfile  (SCRATCH_VED, "SCRATCH", [1, 0], __i);
    Ved.setbuf (ved._abspath);
    ved.draw ();

    VED_WIND_NEEDS_DRAW = 1;
  end

  def send_msg_dr (msg) public proc
    Smg.send_msg_dr (msg, qualifier ("color", 0),
      qualifier ("row"), qualifier ("col"));
  end

  def __scratch (argv) public proc
    variable ved = @Ved.get_cur_buf ();

    App.scratch (ved;;__qualifiers);

    VED_WIND_NEEDS_DRAW = 0;
    Ved.draw_wind (;;struct {
      reread = 0, @__qualifiers});
  end

  def __messages () public proc
    loop (_NARGS) pop ();
    variable cbname = Ved.get_cur_buf ()._abspath;
    __viewfile  (ERR_VED, "MSG", NULL, NULL);
    Ved.setbuf (cbname);
    Ved.draw_wind (;;struct {
      reread = 0, @__qualifiers});
  end

  def __system (lines) public proc
    variable i, len = length (lines);
    ifnot (len)
      return;

    variable sigint_handl;
    sigint_handl = fun (`
      envbeg private define my_sigint_handler (); envend
        (sig)
      IO.tostderr ("Process Interrupted by the user");
      signal (sig, &my_sigint_handler);
      `;as = "my_sigint_handler").__funcref;

    ifnot (This.has.sigint)
      sigprocmask (SIG_UNBLOCK, [SIGINT]);

    signal (SIGINT, sigint_handl);

    reset_app (NULL);

    _for i (0, len - 1)
      () = system_intr (strtrim_beg (lines[i], "!"));

    ifnot (This.has.sigint)
      sigprocmask (SIG_BLOCK, [SIGINT]);

    ifnot (NULL == This.is.my.sigint_handler)
      signal (SIGINT, This.is.my.sigint_handler);

    ifnot (qualifier_exists ("return_on_completion"))
      {
      IO.tostdout ("press any key to continue");
      () = Input.getch ();
      }

    IO.tostdout ("");

    restore_app (NULL);
  end

  def __editor () public proc
    variable args = __pop_list (_NARGS);
    App.Run.as.child (["__ved", __push_list (args)];;__qualifiers);
  end

  def app_menu (s) static proc
    variable buf = Ved.get_cur_buf ();
    variable commands = [
        "app_new", "app_new_as_super_user",
        "app_reconnect", "child_reconnect",
        ];
    variable saved = Input->rmap.right;
    Input->rmap.right = [saved, Input->rmap.app_menu];
    variable action = Rline.get_selection (commands, NULL,
        This.is.ved ? buf.ptr : s.ptr);
    Input->rmap.right = saved;

    ifnot (strlen (action))
      return;

    variable idx = where (commands == action);

    ifnot (length (idx))
      return;

    switch (action)

      {
      case "app_new" or case "app_new_as_super_user":
        if (NULL == s.app_new)
          return;
        s.app_new (;issu = (action == "app_new_as_super_user"));
      }

      {
      case "app_reconnect":
        if (NULL == s.app_rec)
          return;
        s.app_rec ();
      }

      {
      case "child_reconnect":
        if (NULL == s.childrec)
          return;
        s.childrec ();
      }
  end

  def __exec_rline (argv) public proc
    variable rl = @Ved.get_cur_rline ();
    rl.argv = [argv];
    rl.execline (;;__qualifiers);
  end
end
