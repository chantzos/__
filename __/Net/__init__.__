class Net
  let IP_BIN = Sys.which ("ip");
  let IW_BIN = Sys.which ("iw");
  let WP_SERV_BIN = Sys.which ("wpa_supplicant");
  let WP_CLNT_BIN = Sys.which ("wpa_cli");
  let DH_BIN = Sys.which ("dhcpcd");

  typedef Scan_Type
    bss,
    freq,
    signal,
    auth,
  end

  subclass wifi
    __init__
      set_conf
      is_up
      bring_up
      bring_down
      start_server
      scan
      scan_iw
      parse_wpa_scan
      parse_iw_scan
      terminate
      get_ip
      list_networks
      reconfigure
      scan_interval
      at_exit
    end

    var DEV = "nl80211";
    var SERVER_SOCK = "/run/wpa_supplicant";
    var IFACE = NULL;
    var IFACEDIR = NULL;
    var SERVER_PID = NULL;
    var SERVER_CONF = NULL;

    def set_conf (conf)
      if (-1 == access (conf, F_OK))
        {
        variable fd = open (conf, O_WRONLY|O_CREAT, File->PERM["_PRIVATE"]);
        if (NULL == fd)
          self.err ("error opening " + conf + ", " + errno_string (errno);;__return__ (-1));

        if (-1 == write (fd,
`ctrl_interface=` + SERVER_SOCK + `
ctrl_interface_group=wheel
eapol_version=1
ap_scan=1
fast_reauth=1
update_config=1

#network={
#  ssid=""
#  scan_ssid=1
#  key_mgmt=WPA-PSK
#  key_mgmt=NONE
#  psk=""
#}
`))
          self.err ("error writting " + conf + ", " + errno_string (errno);;__return__ (-1));

        if (-1 == close (fd))
          self.err ("error closing file descriptor, " + errno_string (errno);;__return__ (-1));
      }

      variable st = stat_file (conf);
      if (NULL == st)
        self.err ("error stating " + conf + ", " + errno_string (errno);;__return__ (-1));

      if (-1 == Sys.checkperm (st.st_mode, File->PERM["_PRIVATE"]))
        self.err ("error while checking " + conf +
          " permissions, it isn't " + string (File->PERM["_PRIVATE"]);;__return__ (-1));

      SERVER_CONF = conf;
      0;
    end

    def find_iface () proc
      IFACE = NULL;
      IFACEDIR = NULL;
    end

#if Sys->OS == "Linux"
    def find_iface () proc
      variable or_dir = "/sys/class/net";
      variable iface = listdir (or_dir);
      if (NULL == iface || 0 == length (iface))
        {
        Net.wifi.err ("error finding iface on " + or_dir);
        return;
        }

      variable i;
      _for i (0, length (iface) - 1)
        {
        if (any (["lo", "ens32"] == iface[i]))
          continue;

        variable ifacedir = or_dir + "/" + iface[i];
        variable liface = listdir (ifacedir);
        if (NULL == liface || 0 == length (liface))
          continue;

        if (any ("wireless" == liface or "phy80211" == liface))
          {
          IFACE = iface[i];
          IFACEDIR = ifacedir;
          break;
          }
        }
    end
#endif

    def is_up ()
      if (NULL == Net->IP_BIN)
        self.err ("ip is not installed";;__return__ (-1));

      if (NULL == IFACE)
        self.err ("cannot find available iface";;__return__ (-1));

      variable fp = popen (Net->IP_BIN + " link show " + IFACE, "r");
      if (NULL == fp)
        self.err ("error while calling " + Net->IP_BIN +
           " link show " + IFACE;;__return__ (-1));

      variable buf;
      () = fgets (&buf, fp);

      string_match (buf, "UP") ? 1 : 0;
    end

    def set_iface (self, what) proc
      variable isup = self.is_up ();
      if (-1 == isup ())
        return -1;

      ifnot (isup)
        {
        if ("down" == what)
          return 1;
        }
      else
         if ("up" == what)
           return 1;

      variable argv = [Net->IP_BIN, "link", "set", IFACE, what];

      variable passwd = __get_qualifier_as (String_Type, qualifier ("passwd"), NULL);

      ifnot (NULL == passwd)
        {
        ifnot (passwd[-1] == '\n')
          passwd += "\n";

        argv = [Sys->SUDO_BIN, "-S",  "-E", "-p", "", argv];
        }

      variable p = Proc.init (NULL != passwd, 1, 1);

      ifnot (NULL == passwd)
        p.stdin.in = passwd;

      variable status = p.execv (argv, NULL);

      if (status.exit_status)
        ifnot (NULL == p.stderr.out)
          self.err (strjoin (strtok (p.stderr.out, "\n"), "\n");;__return__ (-1));

      ifnot (NULL == p.stdout.out)
        IO.print (strtok (p.stdout.out, "\n");;
          struct {std = stdout, @__qualifiers});

      variable retval = self.is_up ();
      NULL == retval
        ? -1
        : retval
          ? "up" == what
          : "down" == what;
    end

    def bring_up ()
      set_iface (self, "up";;__qualifiers);
    end

    def bring_down ()
      set_iface (self, "down";;__qualifiers);
    end

    def start_server ()
      if (-1 == self.bring_up (;;__qualifiers))
        return -1;

      if (SERVER_PID)
        if (Sys.Pid.exists (SERVER_PID))
          return 0;
        else
          SERVER_PID = NULL;

      if (NULL == SERVER_CONF)
        self.err ("you have to setup first a conf file";;__return__ (-1));

      if (-1 == access (SERVER_CONF, R_OK|W_OK))
        self.err ("you dont have access rights on " + SERVER_CONF + ", "
          + errno_string (errno);;__return__ (-1));

      variable argv = [Net->WP_SERV_BIN, "-D" + DEV, "-i" + IFACE,
         "-c" + SERVER_CONF];

      variable passwd = __get_qualifier_as (String_Type, qualifier ("passwd"), NULL);

      ifnot (NULL == passwd)
        {
        ifnot (passwd[-1] == '\n')
          passwd += "\n";

        argv = [Sys->SUDO_BIN, "-S", "-E", "-p", "", argv];
        }

      variable isstdout = qualifier ("stdout");
      variable isstderr = qualifier ("stderr");
      variable p = Proc.init (NULL != passwd, 0, NULL != isstderr);

      ifnot (NULL == isstdout)
        argv = [argv, "-f", isstdout];

      ifnot (NULL == isstderr)
        p.stderr.file = isstderr;

      ifnot (NULL == passwd)
        p.stdin.in = passwd;

      SERVER_PID = p.execv (argv, 1);
      ifnot (Sys.Pid.exists (SERVER_PID))
        self.err ("error while starting wpa_supplicant";;__return__ (-1));
      SERVER_PID;
    end

    def get_exit_pid () proc
      if (NULL == SERVER_PID)
        {
        Net.wifi.err ("server hasn't been started");
        return -1;
        }

      variable status = waitpid (SERVER_PID, 0);
      SERVER_PID = NULL;
      status.exit_status;
    end

    def at_exit ()
      get_exit_pid ();
    end

    def get_ip ()
      if (NULL == SERVER_PID)
        self.err ("wpa_supplicant hasn't been started";;__return__ (-1));

      variable argv = [Net->DH_BIN, IFACE];

      variable passwd = __get_qualifier_as (String_Type, qualifier ("passwd"), NULL);

      ifnot (NULL == passwd)
        {
        ifnot (passwd[-1] == '\n')
          passwd += "\n";

        argv = [Sys->SUDO_BIN, "-S",  "-E", "-p", "", argv];
        }

      variable p = Proc.init (NULL != passwd, 1, 1);

      p.stdout.file = qualifier ("stdout", This.is.std.out.fn);
      p.stderr.file = qualifier ("stderr", This.is.std.err.fn);

      ifnot (NULL == passwd)
        p.stdin.in = passwd;

      variable status = p.execv (argv, NULL);
      status.exit_status;
    end

    def scan_interval (sec)
      if (any (NULL == [Net->WP_CLNT_BIN, Net->WP_SERV_BIN]))
        self.err ("wpa_supplicant is not installed";;__return__ (-1));

      if (SERVER_PID == NULL)
        self.err ("wpa_supplicant hasn't been started";;__return__ (-1));

      variable argv = [Net->WP_CLNT_BIN, "scan_interval", string (sec)];
      variable p = Proc.init (0, 1, 1);

      variable status = p.execv (argv, NULL);
      if (status.exit_status)
        ifnot (NULL == p.stderr.out)
          self.err (strjoin (strtok (p.stderr.out, "\n"), "\n");;__return__ (-1));

      0;
    end

    def reconfigure ()
      if (any (NULL == [Net->WP_CLNT_BIN, Net->WP_SERV_BIN]))
        self.err ("wpa_supplicant is not installed";;__return__ (-1));

      if (SERVER_PID == NULL)
        self.err ("wpa_supplicant hasn't been started";;__return__ (-1));

      variable argv = [Net->WP_CLNT_BIN, "reconfigure"];
      variable p = Proc.init (0, 1, 1);

      variable status = p.execv (argv, NULL);
      if (status.exit_status)
        ifnot (NULL == p.stderr.out)
          self.err (strjoin (strtok (p.stderr.out, "\n"), "\n");;__return__ (-1));

      0;
    end

    def list_networks ()
      if (any (NULL == [Net->WP_CLNT_BIN, Net->WP_SERV_BIN]))
        self.err ("wpa_supplicant is not installed";;__return__);

      if (SERVER_PID == NULL)
        self.err ("wpa_supplicant hasn't been started";;__return__);

      % no need for su if we are in wheel
      variable argv = [Net->WP_CLNT_BIN, "list_networks"];
      variable p = Proc.init (0, 1, 1);

      variable status = p.execv (argv, NULL);
      if (status.exit_status)
        ifnot (NULL == p.stderr.out)
          self.err (strjoin (strtok (p.stderr.out, "\n"), "\n");;__return__);

      if (NULL == p.stdout.out)
        return String_Type[0];

      strtok (p.stdout.out, "\n");
    end

    def parse_wpa_scan (scan)
      if (String_Type == typeof (scan))
        scan = strtok (scan, "\n");
      else
        ifnot (Array.istype (scan, String_Type))
          return;

      variable netw = Assoc_Type[Scan_Type];
      variable i, tok, len = length (scan);

      _for i (0, len - 1)
        {
        tok = strtok (scan[i]);
        ifnot (5 == length (tok))
          continue;

        netw[tok[4]] = @Scan_Type;
        set_struct_fields (netw[tok[4]], Array.push (tok[[:-2]]));
        }

      netw;
    end

    def parse_iw_scan (scan)
      if (String_Type == typeof (scan))
        scan = strtok (scan, "\n");
      else
        ifnot (Array.istype (scan, String_Type))
          return;

      variable isassoc = NULL, netw = Assoc_Type[Scan_Type];
      variable i, line, bss, ssid, tok, len = length (scan);

      _for i (0, len - 1)
        {
        isassoc = NULL;
        line = scan[i];
        ifnot (strlen (line))
          continue;

        ifnot ("BSS" == line[[:2]])
          continue;

        tok = strtok (line);
        if (1 == length (tok))
          continue;

        if (i == len - 1)
          break;;

        bss = tok[1];

        if (tok[-1] == "associated")
          isassoc = 1;

        variable newbss = @Scan_Type;
        ssid = NULL;
        i++;

        while (i < len)
          {
          line = scan[i];

          ifnot (strlen (line))
            continue;

          if ("BSS" == line[[:2]])
            break;

          i++;

          tok = strtok (line);

          if (1 == length (tok))
            continue;

          ifnot (any (tok[0] == ["SSID:", "signal:", "freq:", "WPA:"]))
            continue;

          if ("SSID:" == tok[0])
            {
            ssid = tok[1];
            continue;
            }

          ifnot ("WPA:" == tok[0])
            {
            set_struct_field (newbss, tok[0][[:-2]], strjoin (tok[[1:]], " "));
            continue;
            }

          variable auth = Assoc_Type[Char_Type];
          while (i < len)
            {
            line = scan[i];
            i++;

            ifnot ('*' == strtrim_beg (line)[0])
              {
              newbss.auth = strjoin (assoc_get_keys (auth), "-");
              break;
              }

            tok = strtok (line, ":");
            ifnot (2 == length (tok))
              continue;

            tok = strtok (tok[1], " ");
            () = array_map (Integer_Type, Assoc.put, Assoc, auth, tok, 1);
            }
          }

        if (NULL == ssid)
          continue;

        netw[ssid] = newbss;
        }

       netw;
    end

    def scan ()
      if (any (NULL == [Net->WP_CLNT_BIN, Net->WP_SERV_BIN]))
        self.err ("wpa_supplicant is not installed";;__return__);

      if (SERVER_PID == NULL)
        self.err ("wpa_supplicant hasn't been started";;__return__);

      % no need for su if we are in wheel
      variable argv = [Net->WP_CLNT_BIN, "scan"];
      variable p = Proc.init (0, 1, 1);

      variable status = p.execv (argv, NULL);
      if (status.exit_status)
        ifnot (NULL == p.stderr.out)
          self.err (strjoin (strtok (p.stderr.out, "\n"), "\n");;__return__);

      p = Proc.init (0, 1, 1);
      argv = [Net->WP_CLNT_BIN, "scan_results"];
      status = p.execv (argv, NULL);

      if (status.exit_status)
        ifnot (NULL == p.stderr.out)
          self.err (strjoin (strtok (p.stderr.out, "\n"), "\n");;__return__);

      if (NULL == p.stdout.out)
        return String_Type[0];

      strtok (p.stdout.out, "\n");
    end

    def scan_iw ()
      if (NULL == Net->IW_BIN)
        self.err ("iw is not installed";;__return__);

      if (-1 == self.bring_up (;;__qualifiers))
        self.err ("bring up";;__return__ (-1));

      variable argv = [Net->IW_BIN, "dev", IFACE, "scan"];
      variable p = Proc.init (0, 1, 1);

      variable status = p.execv (argv, NULL);
      if (status.exit_status)
        ifnot (NULL == p.stderr.out)
          self.err (strjoin (strtok (p.stderr.out, "\n"), "\n");;__return__);

      p = Proc.init (0, 1, 1);
      argv = [Net->WP_CLNT_BIN, "scan_results"];
      status = p.execv (argv, NULL);

      if (status.exit_status)
        ifnot (NULL == p.stderr.out)
          self.err (strjoin (strtok (p.stderr.out, "\n"), "\n");;__return__);

      if (NULL == p.stdout.out)
        return String_Type[0];

      strtok (p.stdout.out, "\n");
    end

    def terminate ()
      if (any (NULL == [Net->WP_CLNT_BIN, Net->WP_SERV_BIN]))
        self.err ("wpa_supplicant is not installed";;__return__ (-1));

      if (NULL == SERVER_PID)
        return 0;

      variable argv = [Net->WP_CLNT_BIN, "terminate"];
      variable p = Proc.init (0, 1, 1);
      variable status = p.execv (argv, NULL);

      if (status.exit_status)
        ifnot (NULL == p.stderr.out)
          self.err (strjoin (strtok (p.stderr.out, "\n"), "\n") +
            "exit_status: " + string (status.exit_status);;__return__ (-1));

      ifnot (NULL == p.stdout.out)
        IO.print (strtok (p.stdout.out, "\n");;
          struct {std = stdout, @__qualifiers});

      variable retval = get_exit_pid;
      retval == -1 ? -1 : retval;
    end

    beg
      find_iface;
    end
  end
end
