subclass Mark
  __init__
    get
    set
    backtick
    goto
  end

  def mark_init (m) proc
    ifnot (assoc_key_exists (MARKS, m))
      MARKS[m] = struct {pos = @Pos_Type, linlen};
  end

  def backtick (s)
    Ved.storePos (s, MARKS[string ('`')].pos);
    MARKS[string ('`')].linlen = qualifier ("linlen", __vlinlen (s, '.'));
  end

  def set (s)
    variable m = Input.getch (;disable_langchange);

    if ('a' <= m <= 'z')
      {
      Smg.send_msg_dr ("set [" + char (m) + "] mark", 1, s.ptr[0], s.ptr[1]);
      m = string (m);
      mark_init (m);
      Ved.storePos (s, MARKS[m].pos);
      MARKS[m].linlen = __vlinlen (s, '.');
      }
  end

  def get ()
    variable marks = assoc_get_keys (MARKS);
    variable mark = Input.getch (;disable_langchange);

    mark = string (mark);

    ifnot (any (mark == marks))
      return NULL;

    variable m = @MARKS[mark]; % this doesn't make a new copy of pos
    m = struct % so get it by hand             
      {
      pos = @m.pos,
      linlen = m.linlen,
      };

    if (NULL == m.pos._i)
      return NULL;

    m;
  end

  def goto (s)
    variable m = self.get ();

    if (NULL == m)
      return;

    if (m.pos._i > s._len)
      return;

    self.backtick (s);

    s._i = m.pos._i;
    s.ptr = m.pos.ptr;
    s._index = m.pos._index;
    s._findex = m.pos._findex;

    s.draw ();

    variable line = __vline (s, '.');
    variable linlen = __vlinlen (s, '.');

    % better safe
    if (m.linlen > linlen)
      {
      s.ptr[1] = s._indent;
      s._index = s._indent;
      s._findex = s._indent;
      }

    if (__vis_wrapped__ (s, linlen, s._index, s._findex))
      waddline (s, __vgetlinestr (s, line, s._findex + 1 - s._indent),
        0, s.ptr[0]);

    __vdraw_tail (s;chr = String.decode (substr (line, s._index + 1, 1))[0]);
  end
end
