beg
  def tail (s)
    variable lnr = __vlnr (s, '.') + 1;
    variable linlen = qualifier ("linlen", __vlinlen (s, '.'));

    sprintf (
     "[%s] (row:%d col:%d lnr:%d/%d %.0f%% strlen:%d chr:%d)",
        path_basename (s._fname),
        s.ptr[0],
        s.ptr[1] - s._indent + 1,
        lnr,
        s._len + 1,
        (100.0 / s._len) * (lnr - 1),
        linlen,
        qualifier ("chr", String.decode (substr (__vline (s, '.'),
          s._index + 1, 1))[0])
      );
  end

  def newline_str (s, indent, line)
    s.autoindent (indent, line);
    repeat (" ", @indent);
  end

  def storePos (v, pos)
    pos._i = qualifier ("_i", v._ii);
    pos.ptr = @v.ptr;
    pos._index = v._index;
    pos._findex = v._findex;
  end

  def restorePos (v, pos)
    v._i = pos._i;
    v.ptr = @pos.ptr;
    v._index = pos._index;
    v._findex = pos._findex;
  end

  def checkfile (file)
    if (any (file == SPECIAL))
      return 1;

    variable st = stat_file (file);

    if (Dir.__isdirectory (file, st))
      self.err (file + ": File is a directory";;__return__ (-3));

    if (-1 == access (file, F_OK))
      self.err (file + ": File doesn't exists";;__return__ (-1));

    if (NULL == st)
      self.err (file + ": " + errno_string (errno);;__return__ (-4));

    if (-1 == access (file, R_OK))
      self.err (file + ": File is not readable";;__return__ (-2));

    if (-1 == access (file, W_OK))
      self.err (file + ": File is not writable";;__return__ (0));

    ifnot (st.st_size)
      return 1;

    variable fp = fopen (file, "r");
    if (NULL == fp)
      self.err (file + ": " + errno_string (errno);;__return__ (-4));

    ifnot (File.Is.unix (file;fp = fp))
      ifnot (File.Is.dos (file;fp = fp))
        if (NULL == VED_OPTS.force)
          self.err (file +
            ": File is not a unix nor a dos file";;__return__ (-5));

    1;
  end

  def getlines (fname, indent, st)
    variable retval = self.checkfile (fname);

    ifnot (1 == retval)
      ifnot (retval)
        Smg.send_msg (self.err (), 1);
      else
        {
        ifnot (-1 == retval)
          Smg.send_msg (self.err (), 1);

        st.st_size = 0;
        return [__get_null_str (indent)];
        }

    variable lines = File.readlines (fname);

    if (NULL == lines || 0 == length (lines))
      {
      lines = [__get_null_str (indent)];
      st.st_size = 0;
      }

    indent = repeat (" ", indent);

    array_map (String_Type, &sprintf, "%s%s", indent, lines);
  end

  def write_prompt (str, col)
    Smg.atrcaddnstrdr (str, VED_PROMPTCLR, PROMPTROW, 0,
      qualifier ("row", PROMPTROW), col, COLUMNS);
  end

  def parse_range (s, lnrs, arg)
    ifnot (strlen (arg))
      return NULL;

    variable llnrs;
    try
      {
      variable depth = _stkdepth;
      eval (arg);
      loop (1)
        {
        if (_stkdepth == depth)
          break;

        if (_stkdepth - depth > 1)
          {
          loop (_stkdepth - depth)
            pop;

          break;
          }

        llnrs = ();
        if (Array_Type == typeof (llnrs))
          if (Integer_Type == _typeof (llnrs))
            {
            llnrs = llnrs[array_sort (llnrs)];
            if (0 > llnrs[0] || llnrs[1] > s._len)
              return NULL;

            return llnrs;
            }
        }
      }
    catch AnyError:
      {}

    if ("%" == arg)
      return lnrs;

    if ("." == arg)
      return [__vlnr (s, '.')];

    arg = strchop (arg, ',', 0);
    ifnot (2 == length (arg))
      return NULL;

    variable i, ia, expr, len;
    variable range = ["", ""];

    _for i (0, 1)
      % after years of `_for', this is the first need for `for'
      for (ia = 0; len = strlen (arg[i]), ia < len; ia++)
        ifnot ('0' <= arg[i][ia] <= '9')
          ifnot (any (['$', '.'] == arg[i][ia]))
            return NULL;
          else if ('$' == arg[i][ia])
            {
            if (ia == len - 1)
              range[i] += string (length (lnrs) - 1);
            else
              {
              ia++;

              if ('-' != arg[i][ia] || ia + 1 == len)
                return NULL;

              ia++;
              expr = string (length (lnrs) - 1) + " - ";

              % this is because the outer loop dont get the increments 
              for (ia = ia; ia < len; ia++)
                ifnot ('0' <= arg[i][ia] <= '9')
                  return NULL;
                else
                  expr += char (arg[i][ia]);

              range[i] = string (eval (expr));
              }
            }
          else if ('.' == arg[i][ia])
            {
            expr = string (__vlnr (s, '.'));
            if (ia == len - 1)
              range[i] = expr;
            else
              {
              ia++;

              ifnot (any (['-', '+'] == arg[i][ia]))
                return NULL;

              expr += char (arg[i][ia]);

              if (ia + 1 == len)
                return NULL;

              for (ia = ia + 1; ia < len; ia++)
                ifnot ('0' <= arg[i][ia] <= '9')
                  return NULL;
                else
                  expr += char (arg[i][ia]);

              range[i] = string (eval (expr));
              }
            }
          else {}
        else
          range[i] += char (arg[i][ia]);

    range = array_map (Integer_Type, &atoi, range); % add an atoi array_map'ed
    if (range[0] > range[1] || 0 > range[0] || range[1] > s._len)
      return NULL;

    lnrs[[range[0]:range[1]]];
  end

  def is_modified (s)
    variable st = qualifier ("st", stat_file (s._abspath));
    if (NULL == st)
      return (NULL != s.st_.st_mtime
        ? -1 == access (s._abspath, F_OK)
        : 0);

    ifnot (NULL == s.st_.st_mtime)
      return s.st_.st_mtime != st.st_mtime;

    return 1;
  end

  def check_buf_write (s)
    variable f = fun (`
        (s, msg, write_err_msg)

      Ved.err (msg);
      if (write_err_msg)
        Smg.send_msg_dr (msg, 1, s.ptr[0], s.ptr[1]);
      `);

    variable
      st,
      msg,
      retval,
      write_err_msg = qualifier_exists ("write_err_msg"),
      file = s._abspath;

    ifnot (s._flags & VED_MODIFIED)
      ifnot (qualifier ("force", 0))
        {
        msg = file + " has not been modified";
        f.call (s, msg, write_err_msg);
        return 1;
        }

    if (s._flags & VED_RDONLY)
      ifnot (qualifier_exists ("force_rdonly"))
        {
        msg = file + " is READ ONLY, use \"force_rdonly\"" +
          " qualifier to force a writing";
        f.call (s, msg, write_err_msg);
        return 1;
        }
      else if (0 == access (file, F_OK) && -1 == access (file, W_OK))
        {
        msg = file + " is not writable by you " + Env->USER;
        f.call (s, msg, write_err_msg);
        return -1;
        }

    st = stat_file (file);
    if (NULL == st)
      {
      ifnot (NULL == s.st_.st_mtime)
        {
        if (-1 == access (file, F_OK))
          {
          retval = IO.ask (["Warning: " + file + " has been removed ",
              "from the filesystem", "continue writing? y[es]/n[o]"], ['y', 'Y', 'N', 'n']);

          return [0, 1][any (['n', 'N'] == retval)];
          }
        }
      else
        return 0;
      }
    else
      ifnot (NULL == s.st_.st_mtime)
        {
        ifnot (s.st_.st_mtime == st.st_mtime)
          {
          retval = IO.ask (["Warning: " + file + " has been modified, since last read",
            "continue writing? y|Y[es]/n|N[o]/d[iff]"], ['y', 'Y', 'n', 'N', 'd']);

          if ('d' == retval)
            {
            variable d = Ved.unified_diff (s);
            if (strlen (d))
              {
              (@__get_reference ("__viewfile")) (@__get_reference ("DIFF_VED"), "diff", [1, 0], 0);
              Ved.setbuf (s._abspath);
              Ved.draw_wind (;reread = 0);
              }

            retval = IO.ask (["Warning: " + file + " has been modified, since last read",
              "continue writing? y|Y[es]/n|N[o]"], ['y', 'Y', 'n', 'N']);
            }

          return [0, 1][any (['n', 'N'] == retval)];
          }

        return 0;
        }
      else
        return 0;
  end

  def writefile (s, overwrite, ptr, file, append)
    variable retval, bts = 0;

    ifnot (append)
      append = NULL;

    if (NULL == file)
      {
      if (check_buf_write (NULL, s;;struct {@__qualifiers,
          force = overwrite, "write_err_msg"}))
        return;

      file = s._abspath;
      }
    else
      {
      ifnot (access (file, F_OK))
        {
        ifnot (overwrite)
          if (NULL == append)
            {
            Smg.send_msg_dr (file + ": exists, w! to overwrite", 1, ptr[0], ptr[1]);
            return;
            }

        if (-1 == access (file, W_OK))
          {
          Smg.send_msg_dr (file + ": file is not writable", 1, ptr[0], ptr[1]);
          return;
          }
        }
      }

    retval = __vwritetofile (file, qualifier ("lines", s.lines), s._indent, &bts;
    append = append);

    if (retval)
      {
      Smg.send_msg_dr (errno_string (retval), 1, ptr[0], ptr[1]);
      return;
      }

    if (qualifier_exists ("send_msg"))
      Smg.send_msg_dr (file + ": " + string (bts) + " bytes written" +
        (append ? " (appended)" : ""), 0, s.ptr[0], s.ptr[1]);

    if (file == s._abspath)
      {
      s._flags &= ~VED_MODIFIED;
      if (NULL == s._fd)
        s._fd = open (s._abspath, O_RDWR);

      s.st_ = fstat (s._fd);
      }
  end

  def get_cur_wind ()
    VED_WIND[VED_CUR_WIND];
  end

  def get_cur_frame ()
    get_cur_wind (NULL).cur_frame;
  end

  def get_cur_rline ()
    get_cur_wind (NULL).rline;
  end

  def setbuf (bufname)
    variable w = qualifier ("wind", get_cur_wind (NULL));

    ifnot (any (bufname == w.bufnames))
      return;

    variable s = w.buffers[bufname];
    variable frame = qualifier ("frame", w.cur_frame);

    if (frame > length (w.frame_names) - 1)
      return;

    w.frame_names[frame] = bufname;

    if (s._autochdir && 0 == VED_ISONLYPAGER)
      () = chdir (s._dir);

    ifnot (any (s._abspath == SPECIAL))
      if (self.is_modified (s))
        Smg.send_msg_dr (s._abspath + " has been modified since last read", 1,
          s.ptr[0], s.ptr[1]);
  end

  def initbuf (s, fname, rows, lines, t)
    s._maxlen     = qualifier ("maxlen", t._maxlen);
    s._indent     = qualifier ("indent", t._indent);
    s._shiftwidth = qualifier ("shiftwidth", t._shiftwidth);
    s._expandtab  = qualifier ("expandtab", t._expandtab);
    s._autoindent = qualifier ("_autoindent", t._autoindent);
    s.autoindent  = qualifier ("autoindent", t.autoindent);
    s._autochdir  = qualifier ("_autochdir", t._autochdir);
    s.lexicalhl   = qualifier ("lexicalhl", t.lexicalhl);
    s.comment_str = qualifier ("comment_str", t.comment_str);
    s.comment_out_ref = qualifier ("comment_out_ref", t.comment_out_ref);
    s.draw = t.draw;
    s.vedloop = t.vedloop;
    s.vedloopcallback = t.vedloopcallback;

    __init_fun_all__ (s;;__qualifiers);
    s.__VAR__ = __init_var__ (;;__qualifiers);

    s.opt_show_tilda = qualifier ("show_tilda", t.opt_show_tilda);
    s.opt_show_status_line = qualifier ("show_status_line", t.opt_show_status_line);

    s._fname = fname;

    s._linlen = s._maxlen - s._indent;

    s = __vaddbuf__ (s;;__qualifiers);

    s._fd = open (s._abspath, O_RDWR);

    s.st_ = stat_file (s._abspath);

    if (NULL == s.st_)
      s.st_ = struct
        {
        st_atime,
        st_mtime,
        st_uid = getuid (),
        st_gid = getgid (),
        st_size = 0
        };

    s.rows = rows;

    s.lines = NULL == lines ? Ved.getlines (s._abspath, s._indent, s.st_) : lines;
    s._flags = 0;

    s.ptr = Integer_Type[2];

    s._len = length (s.lines) - 1;

    __vinitrowsbuffvars__ (s);

    s.ptr[0] = s.rows[0];
    s.ptr[1] = s._indent;

    s._findex = s._indent;
    s._index  = s._indent;

    s._i = qualifier ("_i", 0);

    if (s._i > s._len)
      s._i = 0;
    else if (-1 == s._i)
      s._i = s._len;

    s._ii = 0;
  end

  def draw_wind ()
    variable w = get_cur_wind (NULL);
    variable i;
    variable s;
    variable cur;

    _for i (0, w.frames - 1)
      {
      if (i == w.cur_frame)
        {
        cur = w.frame_names[i];
        continue;
        }

      s = w.buffers[w.frame_names[i]];
      s._i = s._ii;
      __vset_status_line_bg_clr (s, NULL);
      s.draw (;dont_draw, no_statusline_clr);
      }

    cur = w.buffers[cur];
    cur._i = cur._ii;

    variable q = struct
      {
      _i = This.is.ved
        ? cur._i
        : NULL,
      pos = This.is.ved
        ? cur.ptr
        : NULL,
      @__qualifiers
      };

    (@__get_reference ("__draw_buf")) (cur;;q);

    topline ("(" + This.is.my.name + ")");
    Smg.setrc (cur.ptr[0], cur.ptr[1]);
    if (cur._autochdir && 0 == VED_ISONLYPAGER)
      ifnot (Dir.are_same (getcwd (), cur._dir))
        () = chdir (cur._dir);
  end

  % many functions (like the next) imply no errors.
  % the logic is to unveil any code errors.
  % like the test phase to a waterfall model.

  def get_buf (bufname)
    ifnot (qualifier_exists ("on_all_windows"))
      {
      variable w = get_cur_wind (NULL);

      ifnot (any (bufname == w.bufnames))
        return NULL;

      return w.buffers[bufname];
      }

    variable i, winds = assoc_get_keys (VED_WIND);
    _for i (0, length (winds) - 1)
      if (any (bufname == VED_WIND[winds[i]].bufnames))
        return VED_WIND[winds[i]].buffers[bufname];

    NULL;
  end

  def get_cur_buf ()
    variable w = VED_WIND[VED_CUR_WIND];
    w.buffers[w.frame_names[w.cur_frame]];
  end

  def get_cur_bufname ()
    get_cur_buf (self)._abspath;
  end

  def get_cur_word ()
    variable buf = get_cur_buf (self),
             line = __vline (buf, '.'),
             col = buf._index,
             start, end;

    __vfind_word (buf, line, col, &start, &end);
  end

  def get_frame_buf (frame)
    variable w = get_cur_wind (NULL);
    if (frame >= w.frames)
      return NULL;

    w.buffers[w.frame_names[frame]];
  end

  def change_frame ()
    variable w = get_cur_wind (NULL);
    variable s = w.buffers[w.frame_names[w.cur_frame]];
    variable dir = qualifier ("dir", "next");

    ifnot (s.opt_show_status_line)
      __vunset_status_line_clr (s, 1);
    else
      __vset_status_line_bg_clr (s, 1);

    if ("next" == dir)
      w.cur_frame = w.cur_frame == w.frames - 1 ? 0 : w.cur_frame + 1;
    else
      w.cur_frame = 0 == w.cur_frame ? w.frames - 1 : w.cur_frame - 1;

    s = get_cur_buf (NULL);

    ifnot (s.opt_show_status_line)
      __vunset_status_line_clr (s, 1);
    else
      __vset_status_line_fg_clr (s, 1);

    setbuf (self, s._abspath;wind = w);

    Smg.setrcdr (s.ptr[0], s.ptr[1]);

    return s;
  end

  def del_frame (?)
    variable frame = _NARGS > 1 ? () : NULL;
    variable self = ();
    if (NULL == frame)
      frame = get_cur_frame (self);

    variable w = get_cur_wind (self);

    if (frame >= w.frames)
      return;

    if (1 == w.frames)
      return;

    w.frame_names[frame] = NULL;
    w.frame_names = w.frame_names[wherenot (_isnull (w.frame_names))];
    w.frames--;

    variable setframesize = __get_qualifier_as (Ref_Type, qualifier ("framesize_fun"),
      This.framesize);

    if (NULL == setframesize)
      setframesize = &framesize;

    w.frame_rows = (@setframesize) (w.frames);

    variable cur_fr = get_cur_frame (self);

    if (frame == w.frames || cur_fr > frame)
      w.cur_frame--;

    variable i, s;

    _for i (0, w.frames - 1)
      {
      s = w.buffers[w.frame_names[i]];
      s.rows = w.frame_rows[i];
      __vinitrowsbuffvars__ (s);

      s._i = s._ii;

      if (i == w.cur_frame)
        __vset_status_line_fg_clr (s, NULL);
      else
        __vset_status_line_bg_clr (s, NULL);

      s.ptr[0] = s.rows[0];
      s.ptr[1] = s._indent;

      s._findex = s._indent;
      s._index = s._indent;
      }

    draw_wind (self);
  end

  def new_frame (fn)
    variable w = get_cur_wind (self);
    if (w.frames == This.has.max_frames)
      return get_cur_buf (NULL);

    variable i, s, b;

    w.frames++;

    variable setframesize = __get_qualifier_as (Ref_Type, qualifier ("framesize_fun"),
        This.framesize);

    if (NULL == setframesize)
      setframesize = &framesize;

    w.frame_rows = (@setframesize) (w.frames);

    w.cur_frame = w.frames - 1;

    variable ft = get_ftype_name (self, fn);
    s = init_ftype (self, ft);
    s.set (fn, w.frame_rows[-1], NULL;;__qualifiers);
    setbuf (self, s._abspath;;__qualifiers);

    w.frame_names = [w.frame_names, fn];

    variable sa;
    % fine tuning maybe is needed
    _for i (0, w.cur_frame - 1)
      {
      sa = w.buffers[w.frame_names[i]];
      sa.rows = w.frame_rows[i];
      __vinitrowsbuffvars__ (sa;info_color = VED_INFOCLRBG);
      sa._i = sa._ii;
      sa.ptr[0] = sa.rows[0];
      sa.ptr[1] = sa._indent;

      sa._findex = sa._indent;
      sa._index = sa._indent;
      }

    draw_wind (self);
    s;
  end

  def del_wind (name)
    if (1 == length (VED_WIND))
      return;

    variable winds = assoc_get_keys (VED_WIND);

    ifnot (any (name == winds))
      return;

    winds = winds[array_sort (winds)];

    variable i = wherefirst (name == winds);

    assoc_delete_key (VED_WIND, name);

    if (name == VED_CUR_WIND)
      {
      VED_CUR_WIND = i ? winds[i-1] : winds[-1];
      draw_wind (self);
      }

    Array.delete_at (&winds, i);

    if (any (VED_PREV_WIND == [name, VED_CUR_WIND]))
      _for i (0, length (winds) - 1)
        ifnot (winds[i] == VED_CUR_WIND)
          {
          VED_PREV_WIND = winds[i];
          break;
          }
  end

  def deftype ()
    struct {
      _indent = 0,
      _shiftwidth = 4,
      _expandtab = NULL,
      _maxlen = COLUMNS,
      _autochdir = 1,
      _autoindent = 0,
      comment_str = [char (127)],
      comment_out_ref = funref (`(s, lines) s.comment_str[0] + lines;`),
      autoindent = &autoindent,
      draw = &_draw_,
      lexicalhl = &lexicalhl,
      vedloop = &_vedloop_,
      vedloopcallback = &_vedloopcallback_,
      opt_show_tilda = 1,
      opt_show_status_line = 1,
      };
  end

  def unified_diff (?)
    variable buf, self;
    if (_NARGS == 1)
      buf = get_cur_buf (NULL);
    else
      buf = ();

    self = ();

    variable diff_exec = Sys.which ("diff");
    if (NULL == diff_exec)
      return NULL;

    variable
      status,
      file = qualifier ("file", @__get_reference ("DIFFFILE")),
      isbigin = Array.String.len (buf.lines) > Proc->DEF_PIPE_CAPACITY,
      p = Proc.init (isbigin ? 0 : 1, 1, 1),
      com = [diff_exec, "-u", buf._abspath, "-"];

    % a file descriptor can overflow easily, so be safe and redirect
    p.stdout.file = file;

    if (isbigin)
      {
      variable ftmp = File.mktmp (Env->TMP_PATH, "unified_diff");
      () = File.write (ftmp.file, buf.lines;fd = ftmp.fd);
      com[-1] = ftmp.file;
      }
    else
      p.stdin.in = (buf = strjoin (buf.lines, "\n"), buf) +
        ["\n", ""][0 == strlen (buf)];

    status = p.execv (com, NULL);

    if (NULL == status)
      return NULL;

    ifnot (2 > status.exit_status)
      return NULL;

    ifnot (status.exit_status)
      return NULL;

    File.read (file);
  end

  def handle_sigwinch ()
    VED_ROWS = [1:LINES - 3];
    Smg.cls ();

    variable fnms, fnm, w, i, s, ii, cur = NULL;
    variable winds = assoc_get_keys (VED_WIND);

    _for i (0, length (winds) - 1)
      {
      w = VED_WIND[winds[i]];
      w.frame_rows = (@w.setframesize) (w.frames);

      if (length (w.frame_names))
      _for ii (0, w.frames - 1)
        {
        fnm = w.frame_names[ii];
        if (NULL == fnm)
          continue;

        s = w.buffers[w.frame_names[ii]];
        s.rows = w.frame_rows[ii];
        __vinitrowsbuffvars__ (s);
        s._i = s._ii;

        if (winds[i] == VED_CUR_WIND && ii == w.cur_frame)
          cur = s;
        else
          s.draw (;dont_draw, no_statusline_clr);
        }

      _for ii (0, length (w.bufnames) - 1)
        {
        if (any (w.bufnames[ii] == w.frame_names))
          continue;

        s = w.buffers[w.bufnames[ii]];
        s.rows = w.frame_rows[0];
        __vinitrowsbuffvars__ (s);
        s._i = s._ii;
        s.draw (;dont_draw, no_statusline_clr);
        }

      _for ii (0, length (SPECIAL) - 1)
        {
        if (any (SPECIAL[ii] == w.frame_names))
          continue;

        if (NULL == wherefirst (SPECIAL[ii] == w.bufnames))
          continue;

        s = w.buffers[SPECIAL[ii]];
        s.rows = VED_ROWS;
        __vinitrowsbuffvars__ (s);
        s._i = s._ii;

        s.draw (;dont_draw, no_statusline_clr);
        }

      w.rline._prow = PROMPTROW;
      w.rline._lines = LINES;
      w.rline._columns = COLUMNS;
      w.rline._row = PROMPTROW;
      }

    if (NULL == cur)
      return;

    cur.draw ();
    topline ("(" + This.is.my.name + ")");

    s = Ved.get_cur_rline ();
    if (NULL == s._lin || NULL == s._col)
      Smg.setrcdr (cur.ptr[0], cur.ptr[1]);
    else
      Rline.prompt (s, s._lin, s._col);
  end
end
