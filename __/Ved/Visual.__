subclass Visual
  __init__
    mode
    last
  end

  var vis = struct
    {
    _i, cur, ptr, mode,
    clr = Smg->COLOR.visual,
    l_mode, l_down, l_up, l_page_up, l_page_down,
    l_keys = ['w', 's', 'y', 'Y', 'd', '>', '<', 'g', 'G', Input->DOWN, Input->UP,
      Input->PPAGE, Input->NPAGE, Input->CTRL_f, Input->CTRL_b, Input->HOME, '!', '$'],
    c_mode, c_left, c_right,
    c_keys = ['y', 'd', Input->DOWN, Input->RIGHT, Input->UP, Input->LEFT, '!', '$'],
    bw_mode, bw_down, bw_up, bw_left, bw_right, bw_maxlen,
    bw_keys = ['x', 'I', 'i', 'd', 'y', 't', 'r', 'c', Input->DOWN, Input->UP, Input->RIGHT, Input->LEFT],
    needsdraw, startrow, startlnr, startcol, startindex,
    vlins, lnrs, linlen, lines, sel, at_exit,
    };

  def v_unhl_line (vs, s, index) proc
    Smg.hlregion (0, vs.vlins[index], 0, 1, s._maxlen);
  end

  def v_hl_ch (vs, s) proc
    variable i;
    _for i (0, length (vs.vlins) - 1)
      {
      v_unhl_line (vs, s, i);
      Smg.hlregion (vs.clr, vs.vlins[i], vs.col[i], 1, strlen (vs.sel[i]));
      }

    ifnot (qualifier_exists ("dont_draw"))
      Smg.refresh ();
  end

  def v_hl_line (vs, s) proc
    variable i;
    _for i (0, length (vs.vlins) - 1)
      if (vs.vlins[i] >= s.rows[0])
        if (vs.vlins[i] == s.rows[-1])
          break;
        else
          Smg.hlregion (vs.clr, vs.vlins[i], 0, 1,
            s._maxlen > vs.linlen[i] ? vs.linlen[i] : s._maxlen);

    ifnot (qualifier_exists ("dont_draw"))
      Smg.refresh ();
  end

  def v_calclines_up (s, vs, un, inc) proc
    vs.cur--;
    if (un)
      v_unhl_line (vs, s, -1);

    vs.lines = vs.lines[[:-2]];
    vs.lnrs = vs.lnrs[[:-2]];
    vs.vlins = vs.vlins[[:-2]];
    vs.linlen = vs.linlen[[:-2]];

    if (inc)
      vs.vlins++;
  end

  def v_calclines_up_ (s, vs, incr) proc
    vs.cur--;
    vs.lines = [s.lines[vs.lnrs[0] - 1], vs.lines];
    vs.lnrs = [vs.lnrs[0] - 1, vs.lnrs];

    if (incr)
      vs.vlins++;

    vs.vlins = [qualifier ("row", s.ptr[0]), vs.vlins];
    vs.linlen = [strlen (vs.lines[0]), vs.linlen];
  end

  def v_l_up (vs, s) proc
    ifnot (__vlnr (s, '.'))
      return;

    if (s.ptr[0] == s.vlins[0])
      {
      s._i--;
      s.draw ();

      if (vs.lnrs[-1] <= vs.startlnr)
        v_calclines_up_ (s, vs, 1);
      else
        v_calclines_up (s, vs, 0, 1);

      v_hl_line (vs, s);
      return;
      }

    s.ptr[0]--;

    if (vs.lnrs[-1] > vs.startrow)
      v_calclines_up (s, vs, 1, 0);
    else
      v_calclines_up_ (s, vs, 0);

    v_hl_line (vs, s);
  end

  beg
    vis.l_up = &v_l_up;
  end

  def v_l_page_up (vs, s) proc
    if (s._avail_rows > s._len)
      return;

    variable count = qualifier ("count", 1);
    variable i = 1;
    variable ii;

    while (i <= count && (s._i || (s._i == 0 && vs.lnrs[0] != 0)))
      {
      variable isnotiatfpg = 1;
      ii = s._avail_rows;

      if (0 == s._i || (s._i < s._avail_rows && s._i > 1))
        {
        s._i = 0;
        ii = vs.lnrs[0];
        loop (ii)
          v_l_up (vs, s);
        break;
        }
      else if (s._i - s._avail_rows >= 0)
        s._i -= s._avail_rows;
      else
        {
        ii = s._i + (s.ptr[0] - s.vlins[0]);
        s._i = 0;
        isnotiatfpg = 0;
        }

      loop (ii)
        {
        if (s.ptr[0] == s.vlins[0])
          {
          if (vs.lnrs[-1] <= vs.startlnr)
            v_calclines_up_ (s, vs, 1);
          else
            v_calclines_up (s, vs, 0, 1);
          continue;
          }

        if (vs.lnrs[-1] > vs.startrow)
          v_calclines_up (s, vs, 1, 1);
        else
          v_calclines_up_ (s, vs, 1;row = isnotiatfpg ? s.ptr[0] : vs.vlins[0]);
        }

      i++;
      }

    s.draw ();
    v_hl_line (vs, s);
  end

  beg
    vis.l_page_up = &v_l_page_up;
  end

  def v_calclines_down (s, vs, un, dec) proc
    vs.cur++;
    if (un)
      v_unhl_line (vs, s, 0);

    vs.lines = vs.lines[[1:]];
    vs.lnrs = vs.lnrs[[1:]];
    vs.vlins = vs.vlins[[1:]];
    vs.linlen = vs.linlen[[1:]];

    if (dec)
      vs.vlins--;
  end

  def v_calclines_down_ (s, vs, dec) proc
    vs.cur++;
    vs.lines = [vs.lines, s.lines[vs.lnrs[-1] + 1]];
    vs.lnrs = [vs.lnrs, vs.lnrs[-1] + 1];

    if (dec)
      vs.vlins--;

    vs.vlins = [vs.vlins, s.ptr[0]];
    vs.linlen = [vs.linlen, strlen (vs.lines[-1])];
  end

  def v_l_page_down (vs, s) proc
    if (vs.lnrs[-1] == s._len)
      return;

    variable count = qualifier ("count", 1);
    variable i = 1;
    variable ii;
    variable notend = 1;

    while (i <= count && notend)
      {
      if (vs.lnrs[-1] + s._avail_rows < s._len)
        {
        ii = s._avail_rows;
        s._i += s._avail_rows;
        }
      else
        {
        if (vs.lnrs[-1] == s._len)
          break;

        ii = s._len - vs.lnrs[-1];
        s._i += ii;
        notend = 0;
        }

      loop (ii)
        {
        if (s.ptr[0] == s.vlins[-1])
          {
          if (vs.lnrs[0] < vs.startlnr)
            v_calclines_down (s, vs, 0, 1);
          else
            v_calclines_down_ (s, vs, 1);

           continue;
           }

        if (vs.lnrs[0] < vs.startlnr)
          v_calclines_down (s, vs, 1, 0);
        else
          v_calclines_down_ (s, vs, 1);
        }

      i++;
      }

    s.draw ();
    v_hl_line (vs, s);
  end

  beg
    vis.l_page_down = &v_l_page_down;
  end

  def v_l_down (vs, s) proc
    if (__vlnr (s, '.') == s._len)
      return;

    if (s.ptr[0] == s.vlins[-1])
      {
      s._i++;
      s.draw ();

      if (vs.lnrs[0] < vs.startlnr)
        v_calclines_down (s, vs, 0, 1);
      else
        v_calclines_down_ (s, vs, 1);

      v_hl_line (vs, s);
      return;
      }

    s.ptr[0]++;

    if (vs.lnrs[0] < vs.startlnr)
      v_calclines_down (s, vs, 1, 0);
    else
      v_calclines_down_ (s, vs, 0);

    v_hl_line (vs, s);
  end

  beg
    vis.l_down = &v_l_down;
  end

  def v_l_loop (vs, s) proc
    variable chr, i, size = s.st_.st_size, reg = "\"", reginit = 0;

    while (chr = Input.getch (), any ([vs.l_keys, 't', ['0':'9'], '"']
        == chr))
      {
      VEDCOUNT = 1;

      if ('0' <= chr <= '9')
        {
        VEDCOUNT = "";

        while ('0' <= chr <= '9')
          {
          VEDCOUNT += char (chr);
          chr = Input.getch ();
          }

        VEDCOUNT = integer (VEDCOUNT);
        }

      ifnot (any (chr == [vs.l_keys, 't', '"']))
        break;

      if ('"' == chr)
        if (reginit)
          break;
        else
          {
          reg = Input.getch ();
          ifnot (any (VedReg->REGS == reg))
            break;

          if (any (VedReg->RDREGS == reg))
            break;

          reg = char (reg);
          reginit = 1;
          continue;
          }

      if (chr == Input->DOWN)
        {
        loop (VEDCOUNT)
          vs.l_down (s);
        continue;
        }

      if (chr == Input->UP)
        {
        loop (VEDCOUNT)
          vs.l_up (s);
        continue;
        }

      if (chr == Input->HOME)
        {
        vs.l_page_up (s;count = s._len / s._avail_rows + 1);
        continue;
        }

      if (any (chr == [Input->PPAGE, Input->CTRL_b]))
        {
        vs.l_page_up (s;count = VEDCOUNT);
        continue;
        }

      if (chr == 'G')
        {
        vs.l_page_down (s;count = s._len / s._avail_rows + 1);
        continue;
        }

      if (any (chr == [Input->NPAGE, Input->CTRL_f]))
        {
        vs.l_page_down (s;count = VEDCOUNT);
        continue;
        }

      if (any (['y', 't'] == chr)) % quite often I miss the y
        {
        Ved.Reg.set (reg, strjoin (vs.lines, "\n") + "\n";
          msg = "visual lines yanked and ");
        seltoX (strjoin (vs.lines, "\n") + "\n");
        break;
        }

      if ('!' == chr)
        {
        __vsystem (vs.lines);
        break;
        }

      if ('$' == chr)
        {
        __vslang_load (vs.lines);
        break;
        }

      if ('>' == chr)
        {
        loop (VEDCOUNT)
          _for i (0, length (vs.lnrs) - 1)
            if (strlen (s.lines[vs.lnrs[i]]))
              s.lines[vs.lnrs[i]] = repeat (" ", s._shiftwidth) + s.lines[vs.lnrs[i]];

        s.st_.st_size = Array.String.__len (s.lines, s._len + 1);
        ifnot (size == s.st_.st_size)
          set_modified (s);
        else
          return;

        break;
        }

      if ('<' == chr)
        {
        loop (VEDCOUNT)
          _for i (0, length (vs.lnrs) - 1)
            {
            variable i_ = s._indent;
            variable l = __indent_In__ (s, s.lines[vs.lnrs[i]], &i_);
            if (NULL == l)
              continue;

            s.lines[vs.lnrs[i]] = l;
            }

        s.st_.st_size = Array.String.__len (s.lines, s._len + 1);

        ifnot (size == s.st_.st_size)
          set_modified (s);
        else
          return;

        break;
        }

      if ('d' == chr)
        {
        Ved.Reg.set (reg, strjoin (vs.lines, "\n") + "\n";dont_print);
        s.lines[vs.lnrs] = NULL;
        s.lines = s.lines[wherenot (_isnull (s.lines))];
        s._len = length (s.lines) - 1;

        s._i = vs.lnrs[0] ? vs.lnrs[0] - 1 : 0;
        s.ptr[0] = s.rows[0];
        s.ptr[1] = s._indent;
        s._index = s._indent;
        s._findex = s._indent;

        if (-1 == s._len)
          {
          s.lines = [__get_null_str (s._indent)];
          s._len = 0;
          }

        s.st_.st_size = Array.String.__len (s.lines, s._len + 1);
        set_modified (s);
        Ved.Vundo.set (s, vs.lines, vs.lnrs;
          msg = "visual lines deleted and ");
        s.draw ();
        return;
        }

      if ('s' == chr)
        {
        variable rl = Ved.get_cur_rline ();
        variable argv = ["substitute", "--global",
          sprintf ("--range=%d,%d", vs.lnrs[0], vs.lnrs[-1]), "--pat="];

        Rline.set (rl;line = strjoin (argv, " "), argv = argv,
          col = int (sum (strlen (argv))) + length (argv),
          ind = length (argv) - 1);

        Rline.readline (rl);
        return;
        }

      if ('g' == chr)
        {
        rl = Ved.get_cur_rline ();
        argv = ["global",
          sprintf ("--range=%d,%d", vs.lnrs[0], vs.lnrs[-1]), "--action=delete", "--pat="];

        Rline.set (rl;line = strjoin (argv, " "), argv = argv,
          col = int (sum (strlen (argv))) + length (argv),
          ind = length (argv) - 1);

        Rline.readline (rl);
        return;
        }

      if ('w' == chr)
        {
        rl = Ved.get_cur_rline ();
        argv = ["w", "--bufname=" + s._abspath,
          sprintf ("--range=%d,%d", vs.lnrs[0], vs.lnrs[-1])];

        Rline.set (rl;line = strjoin (argv, " "), argv = argv,
          col = int (sum (strlen (argv))) + length (argv),
          ind = length (argv) - 1);

        Rline.readline (rl);
        break;
        }
      }

    vs.needsdraw = 1;
  end

  def v_linewise_mode (vs, s) proc
    if (1 == length (vs.lines))
      vs.linlen = [strlen (vs.lines[0])];
    else
      vs.linlen = strlen (vs.lines);

    v_hl_line (vs, s);

    v_l_loop (vs, s);
  end

  beg
    vis.l_mode = &v_linewise_mode;
  end

  def v_c_left (vs, s, cur) proc
    variable is_wrapped = __vis_wrapped__ (s, strlen (vs.lines[cur]),
      vs.index[cur], vs.findex[cur]);

    variable retval = __vleft__ (s, is_wrapped);

    if (-1 == retval)
      return;

    vs.index[cur]--;
    vs.findex[cur] = s._findex;

    if (retval)
      {
      variable lline;
      if ((is_wrapped = __vis_wrapped__ (s, strlen (vs.lines[cur]),
          vs.index[cur], vs.findex[cur]), is_wrapped))
        {
        lline = __vgetlinestr (s, vs.lines[cur], vs.findex[cur] + 1);
        vs.wrappedmot--;
        }
      else
        lline = vs.lines[cur];

      waddline (s, lline, 0, s.ptr[0]);
      }

    if (is_wrapped)
      if (s.ptr[1] + vs.findex[cur] < vs.startcol[cur])
        vs.col[cur] = s.ptr[1];
      else
        vs.col[cur] = vs.startcol[cur] - vs.wrappedmot;
    else
      if (s.ptr[1] + vs.findex[cur] < vs.startcol[cur])
        vs.col[cur] = s.ptr[1];
      else
        vs.col[cur] = vs.startcol[cur];

    if (vs.index[cur] >= vs.startindex[cur])
      vs.sel[cur] = substr (vs.sel[cur], 1, strlen (vs.sel[cur]) - 1);
    else
      vs.sel[cur] = substr (vs.lines[cur], vs.index[cur] + 1, 1) + vs.sel[cur];

    v_hl_ch (vs, s);
  end

  beg
    vis.c_left = &v_c_left;
  end

  def v_c_right (vs, s, cur) proc
    variable retval = __vright__ (s, vs.linlen[-1]);

    if (-1 == retval)
      return;

    vs.index[cur]++;
    vs.findex[cur] = s._findex;

    variable is_wrapped = 0;

    if (retval)
      {
      variable lline = __vgetlinestr (s, vs.lines[cur], vs.findex[cur] + 1);
      waddline (s, lline, 0, s.ptr[0]);
      vs.wrappedmot++;
      is_wrapped = 1;
      }

    vs.col[cur] = s.ptr[1] < vs.startcol[cur]
      ? s.ptr[1]
      : is_wrapped
        ? vs.startcol[cur] - vs.wrappedmot
        : vs.startcol[cur];

    if (vs.index[cur] <= vs.startindex[cur])
      vs.sel[cur] = substr (vs.sel[cur], 2, -1);
    else
      vs.sel[cur] += substr (vs.lines[cur], vs.index[cur] + 1, 1);

    v_hl_ch (vs, s);
  end

  beg
    vis.c_right = &v_c_right;
  end

  def v_char_mode (vs, s) proc
    variable
      sel,
      chr,
      reginit = 0,
      reg = "\"",
      cur = 0;

    vs.startcol = [vs.col[0]];
    vs.index = [vs.index];
    vs.findex = [vs.findex];

    vs.sel = [substr (vs.lines[cur], vs.index[cur] + 1, 1)];

    v_hl_ch (vs, s);

    while (chr = Input.getch (), any ([vs.c_keys, '"'] == chr))
      {
      if ('"' == chr)
        if (reginit)
          return;
        else
          {
          reg = Input.getch ();
          ifnot (any (VedReg->REGS == reg))
            return;

          if (any (VedReg->RDREGS == reg))
            return;

          reg = char (reg);
          reginit = 1;
          }

      if (Input->RIGHT == chr)
        {
        vs.c_right (s, cur);
        continue;
        }

      if (Input->LEFT == chr)
        {
        vs.c_left (s, cur);
        continue;
        }

      if ('!' == chr)
        {
        ifnot (strlen (vs.sel[0]))
          continue;

        __vsystem ([vs.sel[0]]);
        break;
        }

      if ('$' == chr)
        {
        ifnot (strlen (vs.sel[0]))
          continue;

        __vslang_load ([vs.sel[0]]);
        break;
        }

      if ('y' == chr)
        {
        sel = strjoin (vs.sel, "\n");
        Ved.Reg.set (reg, sel;
          msg = "visual lines yanked and ");
        seltoX (sel);
        break;
        }

      if ('d' == chr)
        {
        variable len = length (vs.sel);
        if (1 < len)
          return;

        sel = strjoin (vs.sel, "\n");
        Ved.Reg.set (reg, sel;dont_print);

        variable line = s.lines[vs.startlnr];
        line = strreplace (line, sel, "");
        ifnot (strlen (line))
          line = __get_null_str (s._indent);

        s.lines[vs.startlnr] = line;
        s.lins[s.ptr[0] - s.rows[0]] = line;

        variable index = vs.startindex;

        if (index > strlen (line))
          ifnot (strlen (line))
            index = s._indent;
          else
            index -= strlen (sel);

        if (index > strlen (line))
          index = strlen (line);

        s._index = index;
        s.ptr[0] = vs.ptr[0];
        s.ptr[1] = index;

        s.st_.st_size = Array.String.__len (s.lines, s._len + 1);

        set_modified (s);

        waddline (s, __vgetlinestr (s, s.lines[vs.startlnr], 1), 0, s.ptr[0]);
        Ved.Vundo.set (s, [s.lines[vs.startlnr]], [vs.startlnr];
          msg = "visual lines deleted and ");
        __vdraw_tail (s);
        return;
        }
      }

    s.ptr[0] = vs.ptr[0];
    s.ptr[1] = vs.startindex;
    vs.needsdraw = 1;
  end

  beg
    vis.c_mode = &v_char_mode;
  end

  def v_bw_calclines (vs) proc
    variable i;
    _for i (0, length (vs.lines) - 1)
      vs.sel[i] = substr (vs.lines[i], vs.startcol + 1, vs.index[i] - vs.startcol + 1);
  end

  def v_bw_calclines_up (s, vs, un, inc) proc
    v_calclines_up (s, vs, un, inc);

    vs.index =  vs.index[[:-2]];
    vs.sel = vs.sel[[:-2]];
    vs.col  = vs.col[[:-2]];
  end

  def v_bw_calclines_up_ (s, vs, incr) proc
    v_calclines_up_ (s, vs, incr);

    vs.index = [vs.index[0], vs.index];
    vs.sel = [substr (vs.lines[0], vs.index[0] + 1, 1), vs.sel];
    vs.col  = [vs.col[0], vs.col];
    vs.bw_maxlen = int (min (vs.linlen[where (vs.linlen)]));
  end

  def v_bw_up (vs, s) proc
    ifnot (__vlnr (s, '.'))
      return;

    if (s.ptr[0] == s.vlins[0])
      {
      s._i--;
      s.draw ();

      if (vs.lnrs[-1] <= vs.startlnr)
        v_bw_calclines_up_ (s, vs, 1);
      else
        v_bw_calclines_up (s, vs, 0, 1);

      v_bw_calclines (vs);
      v_hl_ch (vs, s);
      return;
      }

    s.ptr[0]--;

    if (vs.lnrs[-1] > vs.startrow)
      v_bw_calclines_up (s, vs, 1, 0);
    else
      v_bw_calclines_up_ (s, vs, 0);

    v_bw_calclines (vs);
    v_hl_ch (vs, s);
  end

  beg
    vis.bw_up = &v_bw_up;
  end

  def v_bw_calclines_down (s, vs, un, dec) proc
    v_calclines_down (s, vs, un, dec);
    vs.index =  vs.index[[1:]];
    vs.sel = vs.sel[[1:]];
    vs.col  = vs.col[[1:]];
  end

  def v_bw_calclines_down_ (s, vs, dec) proc
    v_calclines_down_ (s, vs, dec);
    vs.index = [vs.index, vs.index[-1]];
    vs.sel = [vs.sel, substr (vs.lines[-1], vs.index[-1] + 1, 1)];
    vs.col  = [vs.col, vs.col[-1]];
  end

  def v_bw_down (vs, s) proc
    if (__vlnr (s, '.') == s._len)
      return;

    if (s.ptr[0] == s.vlins[-1])
      {
      s._i++;
      s.draw ();

      if (vs.lnrs[0] < vs.startlnr)
        v_bw_calclines_down (s, vs, 0, 1);
      else
        v_bw_calclines_down_ (s, vs, 1);

      v_bw_calclines (vs);
      v_hl_ch (vs, s);
      return;
      }

    s.ptr[0]++;

    if (vs.lnrs[0] < vs.startlnr)
      v_bw_calclines_down (s, vs, 1, 0);
    else
      v_bw_calclines_down_ (s, vs, 0);

    v_bw_calclines (vs);
    v_hl_ch (vs, s);
  end

  beg
    vis.bw_down = &v_bw_down;
  end

  def v_bw_left (vs, s) proc
    if (s.ptr[1] == vs.startcol)
      return;

    vs.index--;
    s.ptr[1]--;
    s._index--;

    v_bw_calclines (vs);
    v_hl_ch (vs, s);
  end

  beg
    vis.bw_left = &v_bw_left;
  end

  def v_bw_right (vs, s) proc
    variable linlen = __vlinlen (s, '.');

    if (s._index - s._indent == linlen - 1 || 0 == linlen
        || s._index + 1 > vs.bw_maxlen)
      return;

    if (s.ptr[1] < s._maxlen - 1)
      s.ptr[1]++;
    else
      {
      % still there is no care for wrapped lines (possible blockwise is unsuable
      % and bit of sensless for wrapped lines): very low priority
      %s._findex++;
      }

    s._index++;
    vs.index++;

    v_bw_calclines (vs);
    v_hl_ch (vs, s);
  end

  beg
    vis.bw_right = &v_bw_right;
  end

  def __iswstxt__ (t) proc
   variable i, len = strbytelen (t);
   _for i (0, len - 1)
     ifnot (' ' == t[i])
       return 0;

    1;
  end

  def v_bw_mode (vs, s) proc
    variable
      i,
      lnr,
      sel,
      chr,
      len,
      line;

    vs.linlen = [strlen (vs.lines[0])];

    vs.bw_maxlen = vs.linlen[0];
    vs.startcol = vs.col[0];
    vs.startindex = vs.index;
    vs.index = [vs.index];

    vs.sel = [substr (vs.lines[0], vs.index[0] + 1, 1)];

    v_hl_ch (vs, s);

    while (chr = Input.getch (), any (vs.bw_keys == chr))
      {
      if (Input->UP == chr)
        {
        vs.bw_up (s);
        continue;
        }

      if (Input->DOWN == chr)
        {
        vs.bw_down (s);
        continue;
        }

      if (Input->RIGHT == chr)
        {
        vs.bw_right (s);
        continue;
        }

      if (Input->LEFT == chr)
        {
        vs.bw_left (s);
        continue;
        }

      if (any (['d', 'x'] == chr))
        {
        sel = strjoin (vs.sel, "\n");
        Ved.Reg.set ("\"", sel;dont_print);
        Ved.Vundo.set (s, vs.lines, vs.lnrs;blwise);

        _for i (0, length (vs.lnrs) - 1)
          {
          lnr = vs.lnrs[i];
          line = s.lines[lnr];

          if (0 == strlen (line) || (1 == strlen (line) && ' ' == line[0]))
            continue;

          if (vs.startcol)
            line = sprintf ("%s%s", substr (line, 1, vs.startcol), vs.index[i] == strlen (line)
              ? "" : substr (line, vs.startcol + 1 + strlen (vs.sel[i]), -1));
          else
            line = sprintf ("%s", vs.index[i] == strlen (line)
              ? "" : substr (line, strlen (vs.sel[i]) + 1, -1));

          s.lines[lnr] = line;
          }

        set_modified (s);
        break;
        }

      if (any (['r', 'c'] == chr))
        {
        sel = strjoin (vs.sel, "\n");
        Ved.Vundo.set (s, vs.lines, vs.lnrs;blwise);
        variable txt = Rline.__gettxt ("", vs.vlins[0] - 1, vs.startcol)._lin;

        _for i (0, length (vs.lnrs) - 1)
          {
          lnr = vs.lnrs[i];
          line = s.lines[lnr];
          len = strlen (line);

          if (0 == len && vs.startcol)
            continue;

          if (vs.startcol)
            line = sprintf ("%s%s%s%s",
              substr (line, 1, vs.startcol),
              len < vs.startcol ? repeat (" ", vs.startcol - len) : "",
              txt,
              substr (line, vs.startcol + 1 + strlen (vs.sel[i]), -1));
          else
           line = sprintf ("%s%s", txt, vs.index[i] == strlen (line)
             ? "" : substr (line, strlen (vs.sel[1]) + 1, -1));

          s.lines[lnr] = line;
          }

        set_modified (s);
        break;
        }

      if (any (['y', 't'] == chr))
        {
        sel = strjoin (vs.sel, "\n");
        Ved.Reg.set ("\"", sel;msg = "yanked and ");
        break;
        }

      if (any (['I', 'i'] == chr))
        {
        variable t = Rline.__gettxt ("", vs.vlins[0] - 1, vs.startcol)._lin;
        _for i (0, length (vs.lnrs) - 1)
          {
          lnr = vs.lnrs[i];
          line = s.lines[lnr];
          len = strlen (line);

          if (0 == len && (vs.startcol || __iswstxt__ (line)))
            continue;

          if (vs.startcol)
            line = sprintf ("%s%s%s%s",
              substr (line, 1, vs.startcol),
              len < vs.startcol ? repeat (" ", vs.startcol - len) : "",
              t,
              substr (line, vs.startcol + 1, -1));
          else
            line = sprintf ("%s%s", t, strlen (line) == 1 && line[0] == ' '
              ? "" : substr (line, 1, -1));

          s.lines[lnr] = line;
          }

        Ved.Vundo.set (s, vs.lines, vs.lnrs;blwise);
        set_modified (s);
        break;
        }
      }

    vs.needsdraw = 1;
  end

  beg
    vis.bw_mode = &v_bw_mode;
  end

  var LastVi = NULL;

  def last (s)
    variable vs = LastVi;

    if (NULL == vs)
      return;

    ifnot (vs.mode == "lw")
      return;

    if (vs.lnrs[-1] > length (s.lines) - 1)
      return;

    vs.needsdraw = 0;

    s.ptr[0] = vs.ptr[0];
    s.ptr[1] = vs.ptr[1];

    s._i = vs._i;
    s.draw ();
    vs.lines = s.lines[vs.lnrs];

    vs.l_mode (s);

    vs.at_exit (s, vs.needsdraw);
  end

  def v_atexit (vs, s, draw) proc
    variable keep;
    if (draw)
      {
      topline ("(pager)");

      keep = @s.ptr;
      s.ptr[1] = vs.ptr[1];
      s.ptr[0] = vs.ptr[0];
      vs.ptr = keep;
      s._index = vs.startindex;

      keep = @s._i;
      s._i = vs._i;
      vs._i = keep;
      s.draw ();

      variable len = __vlinlen (s, '.');
      variable col = s.ptr[1], row = s.ptr[0];

      if (len < s._index)
        s._index = len - 1;

      if (s.ptr[1] > len)
        s.ptr[1] = len - 1;

      if (row > s._len)
        s.ptr[0] = s._len;

      if (row != s.ptr[0] || col != s.ptr[1])
        __vdraw_tail (s);
      }
    else
      {
      toplinedr ("(pager)");
      vs.ptr = @s.ptr;
      vs._i = @s._i;
      }

    LastVi = vs;
  end

  beg
    vis.at_exit = &v_atexit;
  end

  def v_init (s) proc
    toplinedr ("(visual)");
    variable lnr = __vlnr (s, '.');
    variable v = @vis;

    v._i = @s._ii;
    v.ptr = @s.ptr;
    v.needsdraw = 0;
    v.startlnr = lnr;
    v.vlins = [s.ptr[0]];
    v.lnrs = [lnr];
    v.linlen = [__vlinlen (s, '.')];
    v.lines = [__vline (s, '.')];
    v.startrow = lnr;
    v.startindex = s._index;
    v.cur = s._index;
    v.startcol = [s.ptr[0]];

    struct
      {
      wrappedmot = 0,
      findex = s._findex,
      index = s._index,
      col = [s.ptr[1]],
      @v,
      };
  end

  def mode (s)
    variable
      mode = ["bw", "lw", "cw"],
      vs = v_init (s);

    vs.mode = mode[wherefirst ([Input->CTRL_v, 'V', 'v'] == s._chr)];

    if (s._chr == 'v')
      vs.c_mode (s);
    else if (s._chr == Input->CTRL_v)
      vs.bw_mode (s);
    else
      vs.l_mode (s);

    vs.at_exit (s, vs.needsdraw);
  end
end
