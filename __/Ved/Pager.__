subclass Pager
  __init__
    left
    right
    up
    down
    eof
    eol
    eos
    bof
    bol
    bolnblnk
    g
    gotoline
    word_change_case
    end_word
    page_down
    page_up
  end

  def __open_fname (s) proc
    variable
      start,
      end,
      line = __vline (s, '.'),
      col = s._index;

    variable fname = __vfind_Word (s, line, col, &start, &end);
    fname = strtrim (fname, "\"_)({}.,|/\\");
    fname = Dir.eval (fname);
    ifnot (strlen (fname))
      return;

    % let it open
    % if (-1 == access (fname, F_OK|R_OK))
    %   return;

    if (Dir.isdirectory (fname))
      return;

    (@__get_reference ("__editor")) (fname);
  end

  def word_change_case (s, what)
    variable
      ii,
      chr,
      end,
      start,
      word = "",
      func_cond = what == "toupper" ? &islower : &isupper,
      func = what == "toupper" ? &toupper : &tolower,
      col = s._index,
      i = __vlnr (s, '.'),
      line = __vline (s, '.'),
      orig = __vfind_word (s, line, col, &start, &end);

    ifnot (strlen (orig))
      return;

    variable ar = String.decode (orig);
    _for ii (0, length (ar) - 1)
      ifnot (__define_case__ (&ar[ii]))
        if ((@func_cond) (ar[ii]))
          word += char ((@func) (ar[ii]));
        else
          word += char (ar[ii]);
      else
        word += char (ar[ii]);

    ifnot (orig == word)
      Ved.Vundo.set (s, line, i);

    line = sprintf ("%s%s%s", substr (line, 1, start), word, substr (line, end + 2, -1));
    s.lins[s.ptr[0] - s.rows[0]] = line;
    s.lines[i] = line;
    s.ptr[1] = start;
    s._index = start;

    set_modified (s);

    s.st_.st_size = Array.String.__len (s.lines, s._len + 1);

    waddline (s, line, 0, s.ptr[0]);

    __vdraw_tail (s);
  end

  def gotoline (s)
    if (VEDCOUNT <= s._len + 1)
      {
      Ved.Mark.backtick (s);
      s._i = VEDCOUNT - (VEDCOUNT ? 1 : 0);
      s.draw (;dont_draw);

      s.ptr[0] = s.rows[0];
      s.ptr[1] = s._indent;
      s._findex = s._indent;
      s._index = s._indent;

      Smg.setrcdr (s.ptr[0], s.ptr[1]);
      }
  end

  def down (s)
    variable
      lnr = __vlnr (s, '.'),
      linlen,
      plinlen = __vlinlen (s, '.');

    if (lnr == s._len)
      return;

    if (__vis_wrapped__ (s, plinlen, s._index, s._findex))
      waddline (s, __vgetlinestr (s, __vline (s, '.'), 1), 0, s.ptr[0]);


    if (s.ptr[0] < s.vlins[-1])
      {
      s.ptr[0]++;

      linlen = __vlinlen (s, '.');

      __vadjust_col__ (s, linlen, plinlen);

      __vdraw_tail (s);

      return;
      }

    if (s.lnrs[-1] == s._len)
      return;

    s._i++;

    ifnot (s.ptr[0] == s.vlins[-1])
      s.ptr[0]++;

    s.draw (;dont_draw);

    linlen = __vlinlen (s, '.');

    __vadjust_col__ (s, linlen, plinlen);

    Smg.setrcdr (s.ptr[0], s.ptr[1]);
  end

  def up (s)
    variable
      linlen,
      lline,
      plinlen = __vlinlen (s, '.');

    if (__vis_wrapped__ (s, plinlen, s._index, s._findex))
      waddline (s, __vgetlinestr (s, __vline (s, '.'), 1), 0, s.ptr[0]);

    if (s.ptr[0] > s.vlins[0])
      {
      s.ptr[0]--;

      linlen = __vlinlen (s, '.');
      __vadjust_col__ (s, linlen, plinlen);

      __vdraw_tail (s);

      return;
      }

    ifnot (s.lnrs[0])
      return;

    s._i--;

    s.draw (;dont_draw);

    linlen = __vlinlen (s, '.');

    __vadjust_col__ (s, linlen, plinlen);

    Smg.setrcdr (s.ptr[0], s.ptr[1]);
  end

  def eof (s)
    if (VEDCOUNT > -1)
      {
      ifnot (VEDCOUNT + 1)
        VEDCOUNT = 0;

      self.gotoline (s);
      return;
      }

    Ved.Mark.backtick (s);

    s._i = s._len - s._avail_rows;

    s.ptr[1] = s._indent;
    s._findex = s._indent;
    s._index = s._indent;

    if (length (s.lins) < s._avail_rows - 1)
      {
      s.ptr[0] = s.vlins[-1];
      Smg.setrcdr (s.ptr[0], s.ptr[1]);
      return;
      }

    s.draw (;dont_draw);

    s.ptr[0] = s.vlins[-1];

    Smg.setrcdr (s.ptr[0], s.ptr[1]);
  end

  def bof (s)
    if (VEDCOUNT > 0)
      {
      self.gotoline (s);
      return;
      }

    Ved.Mark.backtick (s);

    s._i = 0;

    s.ptr[0] = s.rows[0];
    s.ptr[1] = s._indent;
    s._findex = s._indent;
    s._index = s._indent;

    s.draw ();
  end

  def end_word (s)
    variable
      line = __vline (s, '.'),
      col = s._index;

    if (isblank (substr (line, col + 1, 1)))
      return;

    variable start, end,
      retval,
      len = __vlinlen (s, '.'),
      needsdraw = 0,
      word = __vfind_Word (s, line, col, &start, &end);

    loop (end - col)
      {
      retval = __vright__ (s, len);
      if (1 == retval)
        needsdraw = 1;
      if (-1 == retval)
        break;
      }

    if (needsdraw)
      {
      line = __vgetlinestr (s, line, s._findex + 1 - s._indent);
      waddline (s, line, 0, s.ptr[0]);
      }

    __vdraw_tail (s);
  end

  def left (s)
    variable retval = __vleft__ (s, __vis_wrapped__ (
      s, __vlinlen (s, '.'), s._index, s._findex));

    if (-1 == retval)
      return;

    variable lline;
    if (retval)
      {
      ifnot (s._findex - s._indent)
        lline = __vgetlinestr (s, __vline (s, '.'), 1);
      else
        lline = __vgetlinestr (s, __vline (s, '.'), s._findex + 1);

      waddline (s, lline, 0, s.ptr[0]);
      }

    __vdraw_tail (s);
  end

  def right (s)
    variable
      line = __vline (s, '.'),
      retval = __vright__ (s, __vlinlen (s, '.'));

    if (-1 == retval)
      return;

    if (retval)
      {
      line = __vgetlinestr (s, line, s._findex + 1 - s._indent);
      waddline (s, line, 0, s.ptr[0]);
      }

    __vdraw_tail (s);
  end

  def page_down (s)
    variable rows = qualifier ("rows");
    if (NULL == rows || 1 > rows || rows > s._avail_rows)
      rows = s._avail_rows;

    if (s._i + rows > s._len)
      return;

    if (s._chr == Input->CTRL_f)
      Ved.Mark.backtick (s);

    s._i += rows;

    s.ptr[1] = s._indent;
    s._index = s._indent;
    s._findex = s._indent;

    s.draw ();
  end

  def page_up (s)
    ifnot (s.lnrs[0])
      return;

    variable rows = qualifier ("rows");
    if (NULL == rows || 1 > rows || rows > s._avail_rows)
      rows = s._avail_rows;

    if (s._chr == Input->CTRL_b)
      Ved.Mark.backtick (s);

    if (s.lnrs[0] >= rows)
      s._i = s.lnrs[0] - rows;
    else
      s._i = 0;

    s.ptr[1] = s._indent;
    s._findex = s._indent;
    s._index = s._indent;

    s.draw ();
  end

  def eos (s)
    variable linlen = __vlinlen (s, '.');

    Ved.Mark.backtick (s);

    if (linlen > s._linlen)
      {
      s.ptr[1] = s._maxlen - 1;
      s._index = s._findex + s._linlen - 1 + s._indent;
      }
    else if (0 == linlen)
      {
      s.ptr[1] = s._indent;
      s._index = s._indent;
      s._findex = s._indent;
      }
    else
      {
      s.ptr[1] = linlen + s._indent - 1;
      s._findex = s._indent;
      s._index = linlen - 1 + s._indent;
      }

    __vdraw_tail (s);
  end

  def eol (s)
    variable linlen = __vlinlen (s, s.ptr[0]);

    s._index = linlen - 1;

    if (linlen < s._linlen)
      s.ptr[1] = linlen + s._indent - 1;
    else
      {
      s.ptr[1] = s._maxlen - 1;
      s._index += s._indent;

      s._findex = linlen - s._linlen;

      variable line = __vgetlinestr (s, __vline (s, '.'), s._findex + 1);

      waddline (s, line, 0, s.ptr[0]);
      }

    __vdraw_tail (s);
  end

  def bol (s)
    variable len = __vlinlen (s, '.');

    if (__vis_wrapped__ (s, len, s._index, s._findex))
      {
      variable line = __vgetlinestr (s, __vline (s, '.'), 1);
      waddline (s, line, 0, s.ptr[0]);
      }

    s.ptr[1] = s._indent;
    s._findex = s._indent;
    s._index = s._indent;

    __vdraw_tail (s);
  end

  def bolnblnk (s)
    s.ptr[1] = s._indent;

    variable linlen = __vlinlen (s, '.');

    loop (linlen)
      {
      ifnot (isblank (s.lins[s.ptr[0] - s.rows[0]][s.ptr[1]]))
        break;

      s.ptr[1]++;
      }

    s._findex = s._indent;
    s._index = s.ptr[1] - s._indent;

    __vdraw_tail (s);
  end

  def g (s)
    variable
      chr = Input.getch ();

    if ('g' == chr)
      {
      self.bof (s);
      return;
      }

    if ('U' == chr)
      {
      self.word_change_case (s, "toupper");
      return;
      }

    if ('u' == chr)
      {
      self.word_change_case (s, "tolower");
      return;
      }

    if ('v' == chr)
      {
      Ved.Visual.last (s);
      return;
      }

    if ('f' == chr)
      {
      __open_fname (s);
      return;
      }

    if (':' == chr)
      {
      variable rl = Ved.get_cur_rline ();
      variable argv = ["global", "--action="];

      Rline.set (rl;line = strjoin (argv, " "), argv = argv,
        col = int (sum (strlen (argv))) + length (argv),
        ind = length (argv) - 1);

      Rline.readline (rl);
      Smg.setrcdr (s.ptr[0], s.ptr[1]);
      return;
      }
  end

  def buffer_other (s) proc
  end
end
