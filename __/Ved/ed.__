beg
  def newline_str (s, indent, line) proc
    s.autoindent (indent, line);
    return repeat (" ", @indent);
  end

  def ed_indent_in (s) proc
    variable
      i_ = s._indent,
      i = __vlnr (s, '.'),
      line = __vline (s, '.');

    line = _indent_in_ (s, line, &i_);

    if (NULL == line)
      return;

    s.lins[s.ptr[0] - s.rows[0]] = line;
    s.lines[i] = line;
    s.ptr[1] -= i_;
    s._index -= i_;

    if (0 > s.ptr[1] - s._indent)
      s.ptr[1] = s._indent;

    if (0 > s._index - s._indent)
      s._index = s._indent;

    set_modified (s);

    s.st_.st_size += s._shiftwidth;

    waddline (s, line, 0, s.ptr[0]);

    __vdraw_tail (s);
  end

  def ed_indent_out (s) proc
    variable
      i = __vlnr (s, '.'),
      line = __vline (s, '.');

    line = sprintf ("%s%s", repeat (" ", s._shiftwidth), line);

    s.lins[s.ptr[0] - s.rows[0]] = line;
    s.lines[i] = line;
    s.ptr[1] += s._shiftwidth;
    s._index += s._shiftwidth;

    if (s.ptr[1] >= s._maxlen)
      s.ptr[1] = s._maxlen - 1;

    set_modified (s);

    s.st_.st_size += s._shiftwidth;

    waddline (s, line, 0, s.ptr[0]);

    __vdraw_tail (s);
  end

  def ed_join_line (s) proc
    variable
      i = __vlnr (s, '.'),
      line = __vline (s, '.');

    if (0 == s._len || i == s._len)
      return;

    s.lines[i] = line + " " + s.lines[i + 1];
    s.lines[i + 1] = NULL;
    s.lines = s.lines[wherenot (_isnull (s.lines))];
    s._len--;

    s._i = s._ii;

    set_modified (s);

    s.draw ();
  end

  def ed_del_line (s) proc
    variable
      reg = qualifier ("reg", "\""),
      i = __vlnr (s, '.'),
      line = __vline (s, '.');

    if (0 == s._len && (0 == __vlinlen (s, '.') || " " == line ||
        line == __get_null_str (s._indent)))
      return 1;

    ifnot (i)
      ifnot (s._len)
        {
        s.lines[0] = __get_null_str (s._indent);
        s.st_.st_size = 0;
        s.ptr[1] = s._indent;
        s._index = s._indent;
        s._findex = s._indent;
        set_modified (s);
        return 0;
        }

    Ved.Reg.set (reg, s.lines[i] + "\n");

    s.lines[i] = NULL;
    s.lines = s.lines[wherenot (_isnull (s.lines))];
    s._len--;

    s._i = s._ii;

    s.ptr[1] = s._indent;
    s._index = s._indent;
    s._findex = s._indent;

    if (s.ptr[0] == s.vlins[-1] && 1 < length (s.vlins))
      s.ptr[0]--;

    s.st_.st_size -= strbytelen (line);

    if (s._i > s._len)
      s._i = s._len;

    Ved.Vundo.set (s, strtok (strtrim_end (Ved.Reg.get (reg)), "\n"), [i];_i = s._i, deleted);

    set_modified (s;_i = s._i);

    0;
  end

  def ed_del_word (s, what) proc
    variable
      reg = qualifier ("reg", "\""),
      end,
      word,
      start,
      func = islower (what) ? &__vfind_word : &__vfind_Word,
      col = s._index,
      i = __vlnr (s, '.'),
      line = __vline (s, '.');

    if (isblank (substr (line, col + 1, 1)))
      return;

    word = (@func) (s, line, col, &start, &end);

    Ved.Reg.set (reg, word);

    Ved.Vundo.set (s, line, i);

    line = sprintf ("%s%s", substr (line, 1, start), substr (line, end + 2, -1));

    s.lins[s.ptr[0] - s.rows[0]] = line;
    s.lines[i] = line;
    s.ptr[1] = start;
    s._index = start;

    set_modified (s);

    s.st_.st_size = Array.getsize (s.lines);

    waddline (s, __vgetlinestr (s, line, 1), 0, s.ptr[0]);

    __vdraw_tail (s);
  end

  def ed_chang_chr (s) proc
    variable
      chr = Input.getch (),
      col = s._index,
      i = __vlnr (s, '.'),
      line = __vline (s, '.');

    if (' ' <= chr <= 126 || 902 <= chr <= 974)
      {
      s.st_.st_size -= strbytelen (line);
      line = substr (line, 1, col) + char (chr) + substr (line, col + 2, - 1);
      s.lins[s.ptr[0] - s.rows[0]] = line;
      s.lines[i] = line;
      s.st_.st_size += strbytelen (line);
      set_modified (s);
      waddline (s, __vgetlinestr (s, line, 1), 0, s.ptr[0]);
      __vdraw_tail (s);
      }
  end

  def ed_del_trailws (s) proc
    variable
      col = s._index,
      i = __vlnr (s, '.');

    variable
      line = __vline (s, '.'),
      line_ = strtrim_end (line),
      len_  = strlen (line_),
      len   = strlen (line);

     ifnot (len_)
       (len = 0, line = __get_null_str (s._indent));
     else
       if (len == len_)
         return;
       else
         (len = col < len_ ? col : len_, line = line_);

    s.lines[i] = line;
    s.lins[s.ptr[0] - s.rows[0]] = line;

    s._index = s._indent + len;
    s.ptr[1] = s._index;

    s.st_.st_size = Array.getsize (s.lines);

    set_modified (s);

    waddline (s, __vgetlinestr (s, line, 1), 0, s.ptr[0]);

    __vdraw_tail (s);
  end

  def ed_del_chr (s) proc
    variable
      reg = qualifier ("reg", "\""),
      chr = qualifier ("chr", s._chr),
      col = s._index,
      i = __vlnr (s, '.'),
      line = __vline (s, '.'),
      len = strlen (line);

    if ((0 == s.ptr[1] - s._indent && 'X' == chr) || 0 > len - s._indent)
      return;

    if (any (['x', Input->rmap.delete] == chr))
      {
      Ved.Reg.set (reg, substr (line, col + 1, 1));
      line = substr (line, 1, col) + substr (line, col + 2, - 1);
      if (s._index == strlen (line))
        {
        s.ptr[1]--;
        s._index--;
        }
      }
    else
      if (0 < s.ptr[1] - s._indent)
        {
        Ved.Reg.set (reg, substr (line, col, 1));
        line = substr (line, 1, col - 1) + substr (line, col + 1, - 1);
        s.ptr[1]--;
        s._index--;
        }

    ifnot (strlen (line))
      line = __get_null_str (s._indent);

    if (s.ptr[1] - s._indent < 0)
      s.ptr[1] = s._indent;

    if (s._index - s._indent < 0)
      s._index = s._indent;

    s.lins[s.ptr[0] - s.rows[0]] = line;
    s.lines[i] = line;

    s.st_.st_size = Array.getsize (s.lines);

    set_modified (s);

    waddline (s, __vgetlinestr (s, line, 1), 0, s.ptr[0]);

    __vdraw_tail (s);
  end

  def ed_change_word (s, what) proc
    variable
      reg = qualifier ("reg", "\""),
      end,
      word,
      start,
      lline,
      prev_l,
      next_l,
      func = islower (what) ? &__vfind_word : &__vfind_Word,
      col = s._index,
      lnr = __vlnr (s, '.'),
      line = __vline (s, '.');

    if (isblank (substr (line, col + 1, 1)))
      return;

    word = (@func) (s, line, col, &start, &end);

    Ved.Reg.set (reg, word);

    line = sprintf ("%s%s", substr (line, 1, start), substr (line, end + 2, -1));

    ifnot (lnr)
      prev_l = "";
    else
      prev_l = __vline (s, s.ptr[0] - 1);

    if (lnr == s._len)
      next_l = "";
    else
      next_l = s.lines[lnr + 1];

    if (s._index - s._indent > s._maxlen)
      lline = __vgetlinestr (s, line, s._findex + 1);
    else
      lline = __vgetlinestr (s, line, 1);

    if (strlen (lline))
      {
      waddline (s, lline, 0, s.ptr[0]);
      Smg.refresh ();
      }

    s.ptr[1] = start;
    s._index = start;

    Ved.Insert.mode (s, &line, lnr, prev_l, next_l;modified);
  end

  def ed_change (s) proc
    variable chr = Input.getch ();

    if (any (['w', 'W'] == chr))
      {
      if ('w' == chr)
        {
        ed_change_word (s, 'w';;__qualifiers ());
        return;
        }

      if ('W' == chr)
        {
        ed_change_word (s, 'W';;__qualifiers ());
        return;
        }
      }
  end

  def ed_del (s) proc
    variable chr = Input.getch ();

    if (any (['d', 'w', 'W'] == chr))
      {
      if ('d' == chr)
        {
        if (1 == ed_del_line (s;;__qualifiers ()))
          return;

        s.draw ();
        return;
        }

      if ('w' == chr)
        {
        ed_del_word (s, 'w';;__qualifiers ());
        return;
        }

      if ('W' == chr)
        {
        ed_del_word (s, 'W';;__qualifiers ());
        return;
        }

      }
  end

  def ed_del_to_end (s) proc
    variable
      reg = qualifier ("reg", "\""),
      col = s._index,
      i = __vlnr (s, '.'),
      line = __vline (s, '.'),
      len = strlen (line);

    if (s._index == len)
      return;

    ifnot (s.ptr[1] - s._indent)
      {
      if (strlen (line))
       Ved.Reg.set (reg, line);

      line = __get_null_str (s._indent);

      s.ptr[1] = s._indent;
      s._index = s._indent;

      s.lines[i] = line;
      s.lins[s.ptr[0] - s.rows[0]] = line;

      Ved.Vundo.set (s, [Ved.Reg.get (reg)], [i]);
      set_modified (s);

      s.st_.st_size = Array.getsize (s.lines);

      waddline (s, __vgetlinestr (s, line, 1), 0, s.ptr[0]);

      __vdraw_tail (s);

      return;
      }

    if (strlen (line))
      Ved.Reg.set (reg, substr (line, col, -1));

    line = substr (line, 1, col);

    s.lins[s.ptr[0] - s.rows[0]] = line;
    s.lines[i] = line;

    s.st_.st_size = Array.getsize (s.lines);

    s.ptr[1]--;
    s._index--;

    Ved.Vundo.set (s, [Ved.Reg.get (reg)], [i]);

    set_modified (s);

    waddline (s, __vgetlinestr (s, line, 1), 0, s.ptr[0]);

    __vdraw_tail (s);
  end

  def ed_editline (s) proc
    variable
      prev_l,
      next_l,
      lline,
      lnr = __vlnr (s, '.'),
      line = __vline (s, '.'),
      len = strlen (line);

    ifnot (lnr)
      prev_l = "";
    else
      prev_l = __vline (s, s.ptr[0] - 1);

    if (lnr == s._len)
      next_l = "";
    else
      next_l = s.lines[lnr + 1];

    if ('C' == s._chr)
      {
      Ved.Vundo.set (s, [line], [lnr]);
      line = substr (line, 1, s._index);
      }
    else if ('a' == s._chr && len)
      {
      s._index++;
      s.ptr[1]++;
      }
    else if ('A' == s._chr)
      {
      s._index = len;
      s.ptr[1] = len;
      }

    if (s._index - s._indent > s._maxlen)
      lline = __vgetlinestr (s, line, s._findex + 1);
    else
      lline = __vgetlinestr (s, line, 1);

    if (strlen (lline))
      {
      waddline (s, lline, 0, s.ptr[0]);
      Smg.refresh ();
      }

    if ('C' == s._chr) % add to register? not really usefull
      Ved.Insert.mode (s, &line, lnr, prev_l, next_l;modified);
    else
      Ved.Insert.mode (s, &line, lnr, prev_l, next_l);
  end

  def ed_newline (s) proc
    variable
      dir = s._chr == 'O' ? "prev" : "next",
      prev_l,
      next_l,
      indent,
      col = s._index,
      lnr = __vlnr (s, '.'),
      line = __vline (s, '.'),
      len = strlen (line);

    if ("prev" == dir)
      ifnot (lnr)
        prev_l = "";
      else
        prev_l = __vline (s, s.ptr[0] - 1);
    else
      prev_l = line;

    if ("prev" == dir)
      next_l = line;
    else
      if (lnr == s._len)
        next_l = "";
      else
        next_l = s.lines[lnr+1];

    s._len++;

    if (0 == lnr && "prev" == dir)
      s.lines = [newline_str (s, &indent, line), s.lines];
    else
      s.lines = [s.lines[[:"next" == dir ? lnr : lnr - 1]],
        newline_str (s, &indent, line),
        s.lines[["next" == dir ? lnr + 1 : lnr:]]];

    s.st_.st_size = Array.getsize (s.lines);

    s._i = lnr == 0 ? 0 : s._ii;

    if ("next" == dir)
      if (s.ptr[0] == s.rows[-2] && s.ptr[0] + 1 > s._avlins)
        s._i++;
      else
        s.ptr[0]++;

    s.ptr[1] = indent;
    s._index = indent;
    s._findex = s._indent;

    s.draw (;dont_draw);

    line = newline_str (s, &indent, line);
    Ved.Insert.mode (s, &line, "next" == dir ? lnr + 1 : lnr, prev_l, next_l;;__qualifiers ());
  end

  def ed_Put (s) proc
    variable reg = Ved.Reg.get (qualifier ("reg", "\""));
    variable lnr = __vlnr (s, '.');

    if (NULL == reg)
      if (qualifier_exists ("return_line"))
        return s.lines[lnr];
      else
        return;

    variable
      lines = strchop (reg, '\n', 0);

    if (length (lines) > 1)
      {
      variable ind = '\n' == reg[-1] ? -2 : -1;
      lines = lines[[:ind]];
      ifnot (lnr)
        s.lines = [lines, s.lines];
      else
        s.lines = [s.lines[[:lnr - 1]], lines, s.lines[[lnr:]]];

      s._len += length (lines);
      }
    else
      s.lines[lnr] = substr (s.lines[lnr], 1, s._index) + strjoin (lines) +
        substr (s.lines[lnr], s._index + 1, -1);

    s._i = lnr == 0 ? 0 : s._ii;

    s.st_.st_size = Array.getsize (s.lines);

    set_modified (s);

    s.draw ();

    if (qualifier_exists ("return_line"))
      return s.lines[lnr];
  end

  def ed_put (s) proc
    variable reg = Ved.Reg.get (qualifier ("reg", "\""));
    variable lnr = __vlnr (s, '.');

    if (NULL == reg)
      if (qualifier_exists ("return_line"))
        return s.lines[lnr];
      else
        return;

    variable lines = strchop (reg, '\n', 0);

    if (length (lines) > 1)
      {
      variable ind = '\n' == reg[-1] ? -2 : -1;
      lines = lines[[:ind]];
      s.lines = [s.lines[[:lnr]], lines, s.lines[[lnr + 1:]]];
      s._len += length (lines);
      }
    else
      s.lines[lnr] = substr (s.lines[lnr], 1, s._index + 1) + strjoin (lines) +
        substr (s.lines[lnr], s._index + 2, -1);

    s._i = lnr == 0 ? 0 : s._ii;

    s.st_.st_size = Array.getsize (s.lines);

    set_modified (s);

    s.draw ();

    if (qualifier_exists ("return_line"))
      return s.lines[lnr];
  end

  def ed_toggle_case (s) proc
    variable
      col = s._index,
      i = __vlnr (s, '.'),
      line = __vline (s, '.'),
      chr = substr (line, col + 1, 1);

    chr = String.decode (chr)[0];


    ifnot (__define_case (&chr))
      {
      variable func = islower (chr) ? &toupper : &tolower;
      chr = char ((@func) (chr));
      }
    else
      chr = char (chr);

    s.st_.st_size -= strbytelen (line);
    line = substr (line, 1, col) + chr + substr (line, col + 2, - 1);
    s.lins[s.ptr[0] - s.rows[0]] = line;
    s.lines[i] = line;
    s.st_.st_size += strbytelen (line);
    set_modified (s);

    waddline (s, __vgetlinestr (s, line, 1), 0, s.ptr[0]);

    if (s._index - s._indent == __vlinlen (s, s.ptr[0]) - 1)
      __vdraw_tail (s);
    else
      (@VED_PAGER[string ('l')]) (s);
  end
end
