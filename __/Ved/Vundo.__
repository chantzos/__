subclass Vundo
  __init__
    redo
    undo
    set
  end

  var CAPACITY = 8192;
  var Rec = Struct_Type[3];
  var static Redo = NULL;
  var Level = 0;

  beg
    Rec[0] = struct {pos = @Pos_Type, data, inds, deleted, blwise, inserted};
    Rec[1] = struct {pos = @Pos_Type, data, inds, deleted, blwise, inserted};
    Rec[2] = struct {pos = @Pos_Type, data, inds, deleted, blwise, inserted};
  end

  def redo (v)
    if (NULL == Redo)
      return;

    if (Redo.deleted)
      {
      v.lines[Redo.inds] = Redo.data;
      v.lines = v.lines[wherenot (_isnull (v.lines))];
      v._len = length (v.lines) - 1;
      }
    else if (Redo.inserted)
      {
      v.lines =
        [
        Redo.inds[0]
          ? v.lines[[:Redo.inds[0] - 1]]
          : String_Type[0],
        Redo.data,
        v.lines[[Redo.inds[0]:]]
        ];

      v._len += length (Redo.inds);
      }
    else
      v.lines[Redo.inds] = Redo.data;

    v.st_.st_size = Array.String.__len (v.lines, v._len + 1);

    v._flags |= VED_MODIFIED;

    Ved.restorePos (v, Redo.pos);

    Redo = NULL;

    Level++;

    v.draw ();
  end

  def set (v, data, inds)
    if (sum (array_map (Integer_Type, &strbytelen, data)) > CAPACITY)
      return;

    Level += Level < length (Rec) - 1;

    variable i;
    ifnot (Level == length (Rec) - 1)
      _for i (Level + 1, length (Rec) - 1)
        Rec[i].data = NULL;

    if (Level == length (Rec) - 1 && NULL != Rec[Level].data)
      Rec = Array.shift (Rec, 1);

    Ved.storePos (v, Rec[Level].pos;;__qualifiers);
    Rec[Level].data = data;
    Rec[Level].inds = inds;
    Rec[Level].deleted = qualifier_exists ("deleted");
    Rec[Level].blwise = qualifier_exists ("blwise");
    Rec[Level].inserted = qualifier_exists ("inserted");
  end

  def undo (v)
    if (-1 == Level || NULL == Rec[Level].data)
      return;

    Redo = @Rec[Level];

    if (0 == Rec[Level].blwise && Rec[Level].deleted)
      {
      v.lines =
        [
        Rec[Level].inds[0]
          ? v.lines[[:Rec[Level].inds[0] - 1]]
          : String_Type[0],
        Rec[Level].data, v.lines[[Rec[Level].inds[0]:]]
        ];

      Redo.data = Null_Type[length (Rec[Level].inds)];
      }
    else if (Rec[Level].inserted)
      {
      v.lines[Rec[Level].inds] = NULL;
      v.lines = v.lines[wherenot (_isnull (v.lines))];
      }
    else
      {
      % try to hide the error in the code path
      try
        {
        variable inds = NULL;
        inds = Rec[Level].inds;
        Redo.data = v.lines[Rec[Level].inds];
        v.lines[Rec[Level].inds] = Rec[Level].data;
        }
      catch AnyError:
        {
        % but send a message to notice
        IO.tostderr ("caught the undo error", "Level:", Level, "inds", inds,
          length (v.lines));
        Smg.send_msg_dr ("caught the undo error, see at the error buffer",
          1, v.ptr[0], v.ptr[1]);
        return;
        }
      }

    Ved.restorePos (v, Rec[Level].pos);
    v._len = length (v.lines) - 1;
    v.st_.st_size = Array.String.__len (v.lines, v._len + 1);

    Level--;

    v._flags |= VED_MODIFIED;

    v.draw ();
  end
end
