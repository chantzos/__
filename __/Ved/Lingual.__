subclass Lingual
  __init__
    spell
    translate
  end

  var ACCEPTED = String_Type[0];
  var __S = NULL;

  beg
    variable get_word__ = funref (`
      envbeg
        variable i, lstart,
          chars = [[0:'\'' - 1], ['\'' + 1:'A' - 1],
                   ['Z' + 1:'a' - 1], ['z' + 1:160]];
      envend
          (idx, buf, len, start)
        i = 0;
        while (i < len && any (buf[i] == chars))
          i++;

        if (i == len)
          {
          @idx += i;
          @start += i + 1;
          return "";
          }

        lstart = i + 1;

        while (i++, i < len &&
          all (0 == (chars == substr (buf, i + 1, 1)[0])));

        @idx += i - 1;
        @start += lstart;

        substr (buf, lstart, i - lstart + 1);
     `);

    variable put_word__ = funref (`
        (line, beg, len, word)
      substr (line, beg + 1, len - beg - 1) + word;
    `);
  end

  def spell (lines)
    variable lang = qualifier ("lang");

    if (NULL == __S)
      {
      if (NULL == (__S = Spell.Hunspell.new (;;__qualifiers), __S))
        return String_Type[0];
      }
    else
      ifnot (NULL == lang)
        ifnot (__S.lang == lang)
          if (NULL == (__S = Spell.Hunspell.new (;;__qualifiers), __S))
            return String_Type[0];

    variable tp = typeof (lines);
    if (String_Type == tp)
      lines = strtok (lines, "\n");

    variable ar = @lines;
    variable i, idx, line, len, wlen, word, beg, end;
    variable sugs, suglen, is_correct, askar, retval;

    _for i (0, length (lines) - 1)
      {
      line = lines[i];
      len = strlen (line);
      ar[i] = "";

      if (len < 4)
        {
        ar[i] = line;
        continue;
        }

      for (idx = 0; idx < len; idx++)
        {
        beg = idx;
        end = idx;
        word = (@get_word__) (&idx, substr (line, idx + 1, -1),
          len - idx, &end);

        wlen = strlen (word);
        ifnot (wlen)
          {
          ar[i] += (@put_word__) (line, beg, end, word);
          continue;
          }

        if (4 > wlen || any (word == ACCEPTED))
          {
          ar[i] += (@put_word__) (line, beg, end, word);
          continue;
          }

        is_correct = __S.spell (word);
        if (is_correct)
          {
          ar[i] += (@put_word__) (line, beg, end, word);
          continue;
          }

        sugs = __S.suggest (word);
        suglen = length (sugs);

        ifnot (suglen)
          {
          ar[i] += (@put_word__) (line, beg, end, word);
          continue;
          }

        if (suglen > 8)
          {
          sugs = sugs[[0:8]];
          suglen = 9;
          }

        askar = [
          "-- suggestions for [" + word + "] --",
          "a[ccept] : accept word and add it to the dictionary",
          "A[ccept] : accept word but just for this session",
          "c[ansel] : cansel operation and discard corrections",
          "i[nput]  : correct word by getting user input",
          "q[uit]   : quit",
          array_map (String_Type, &sprintf, "%d: %s", [1:suglen], sugs)];

        retval = IO.ask (askar, ['c', 'a', 'A', 'q', ' ', 'i',
          [1 + '0':suglen + '0']]);

        if ('c' == retval)
          return String_Type[0];

        if (any (['a', 'A', ' '] == retval))
          {
          ar[i] += (@put_word__) (line, beg, end, word);
          __S.add_word (word);

          ACCEPTED = [ACCEPTED, word];
          if ('a' == retval)
            {
            () = write (__S.src_user_dic_fd, word + "\n");
            () = write (__S.user_dic_fd, word + "\n");
            }
          continue;
          }

        if ('i' == retval)
          {
          Smg.send_msg_dr ("mispelled word [" + word + "]", 0, NULL, NULL);
          word = Rline.getline (;char = "word: ");
          ar[i] += (@put_word__) (line, beg, end, word);
          continue;
          }

        if ('q' == retval)
          {
          ar[i] += (@put_word__)(line, beg, len + 1, "");
          break 2;
          }

        retval -= '0';

        if (retval > suglen)
          {
          ar[i] += (@put_word__) (line, beg, end, word);
          continue;
          }

        retval--;

        word = sugs[retval];
        ar[i] += (@put_word__) (line, beg, end, word);
        }
      }

    ar;
  end

  def translate (s)
    variable lang = qualifier ("lang", "");
    variable dict = qualifier ("dict",
        Env->USER_DATA_PATH + "/dict/" + (strlen (lang)
          ? lang + "_"
          : "")
      + "dict.txt");

    if (-1 == access (dict, F_OK|R_OK))
      return;

    variable
      pat,
      start,
      end,
      col = s._index,
      line = __vline (s, '.'),
      word = qualifier ("word",
        __vfind_word (s, line, col, &start, &end));

    if (NULL == (pat = Re.compile (word), pat))
      return;

    variable ar = File.readlines (dict);
    if (NULL == ar)
      return;

    ar = ar[where (array_map (Integer_Type, &pcre_exec, pat, ar))];

    ifnot (length (ar))
      return;

    () = File.write (@__get_reference ("SCRATCH"), ar);
    (@__get_reference ("__scratch"))   (Ved.get_cur_buf ());
  end
end
