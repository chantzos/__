private variable colors = [
%comments
  3,
%conditional
  13,
%type
  12,
%errors
  17,
];

private variable regexps = [
%comments
  pcre_compile ("((^\s*[/|\*].*))"R, 0),
%conditional
  pcre_compile ("\
(^\s*(if(?=\s))\
|(^\w*:)\
|^\s*(else if(?=\s))\
|^\s*(ifnot(?=\s))\
|^(#(if|else|endif).*)\
|^\s*(while(?=\s))\
|^\s*(else)(?=$|\s{2,}%)\
|^\s*(do$)\
|^\s*(for(?=\s))\
|((?<!\w)\{$)\
|((?<!\{)(?<!\w)\}(?=;))\
|((?<!\w)\}$)\
|((?<!\w)switch(?=\s))\
|((?<!\w)goto(?=\s))\
|((?<!\w)case(?=\s))\
|((?<=\w|\])--(?=;|\)|,))\
|((?<=\w|\])\+\+(?=;|\)|,))\
|((?<=\s)[\&\|]+=? ~?)\
|((?<=\s|R|O|H|T|Y|C|D|U|G|P|\])\|(?=\s|O|S))\
|((?<=\s)\?(?=\s))\
|((?<=\s):(?=\s))\
|((?<=\s)\+(?=\s))\
|((?<=\s)-(?=\s))\
|((?<=\s)\*(?=\s))\
|((?<=\s)/(?=\s))\
|((?<=\s)\&\&(?=\s|$))\
|((?<=\s)\|\|(?=\s|$))\
|((?<=').(?='))\
|((?<=\s)\+=(?=\s))\
|((?<=\s)!=(?=\s))\
|((?<=\s)>=(?=\s))\
|((?<=\s)<=(?=\s))\
|((?<=\s)<(?=\s))\
|((?<=\s)>(?=\s))\
|((?<=\w)->(?=\w))\
|(?<=:|\s|\[|\()-?\d+(?=:|\s|\]|,|\)|;)\
|(?<=\s)(0x[a-fA-F0-9]{1,5})(?=;|,|\s|\])\
|((?<=\s)==(?=\s)))+"R, 0),
%type
  pcre_compile ("\
((^\{$)\
|(^\}$)\
|(?<=\s)(sizeof(?=\s))\
|(?<=\s)(malloc(?=\s))\
|(VOID_STAR)\
|(^typedef)\
|((?<!\w)struct(?=[\s]*))\
|^\s*(return(?=[\s;]))\
|^\s*(break(?=;))\
|^\s*(continue(?=;))\
|^\s*(exit(?=\s))\
|^(#include(?=\s))\
|^(#\s?define(?=\s))\
|^(#\s?undef(?=\s))\
|^(enum(?=\s))\
|(\s?(const))\
|(^static)\
|((?<=\s|^|\()(unsigned|int|char|void))\
|((?<=[\(|\s])errno(?=[;|\)]))\
|(__arg[vc])\
|(SEEK_...)\
|(__FILE__|NULL)\
|^(extern(?=\s))\
|((?<!\w)stderr(?=[,\)\.]))\
|((?<!\w)stdin(?=[,\)\.]))\
|((?<!\w)stdout(?=[,\)\.]))\
|((?<!\w)stdout(?=[,\)\.]))\
|((?<=\s|\|)[F|R|W]_OK(?=[,\|;\)]+))\
|((?<=\s|\||\()S_IRGRP(?=[,\|;\)]+))\
|((?<=\s|\||\()S_IROTH(?=[,\|;\)]+))\
|((?<=\s|\||\()S_IRUSR(?=[,\|;\)]+))\
|((?<=\s|\||\()S_IRWXG(?=[,\|;\)]+))\
|((?<=\s|\||\()S_IRWXO(?=[,\|;\)]+))\
|((?<=\s|\||\()S_IRWXU(?=[,\|;\)]+))\
|((?<=\s|\||\()S_IWGRP(?=[,\|;\)]+))\
|((?<=\s|\||\()S_IWOTH(?=[,\|;\)]+))\
|((?<=\s|\||\()S_IWUSR(?=[,\|;\)]+))\
|((?<=\s|\||\()S_IXGRP(?=[,\|;\)]+))\
|((?<=\s|\||\()S_IXOTH(?=[,\|;\)]+))\
|((?<=\s|\||\()S_IXUSR(?=[,\|;\)]+))\
|((?<=\s|\||\()S_ISUID(?=[,\|;\)]+))\
|((?<=\s|\||\()S_ISGID(?=[,\|;\)]+))\
|((?<=\s|\||\()S_ISVTX(?=[,\|;\)]+))\
|((?<=\s|\|)O_APPEND(?=[,\|;\)]+))\
|((?<=\s|\|)O_BINARY(?=[,\|;\)]+))\
|((?<=\s|\|)O_NOCTTY(?=[,\|;\)]+))\
|((?<=\s|\|)O_RDONLY(?=[,\|;\)]+))\
|((?<=\s|\|)O_WRONLY(?=[,\|;\)]+))\
|((?<=\s|\|)O_CREAT(?=[\s|,\|;\)]+))\
|((?<=\s|\|)O_EXCL(?=[,\|;\)]+))\
|((?<=\s|\|)O_RDWR(?=[,\|;\)]+))\
|((?<=\s|\|)O_TEXT(?=[,\|;\)]+))\
|((?<=\s|\|)O_TRUNC(?=[,\|;\)]+))\
|((?<=\s|\|)O_NONBLOCK(?=[,\|;\)]+))\
|((?<=\(|\[)SIGINT(?=,|\]))\
|((?<=\(|\[)SIGALRM(?=,|\]))\
|((?<=\()SIG_(UN)?BLOCK(?=,))\
|((?<=\(|\s|\[|}|@)\w+_Type(?=[,\s\]\[;\)])))+"R, 0),
%errors
  pcre_compile ("\
(((?<=\S)\s+$)\
|(^\s+$))+"R, 0),
];

public define c_lexicalhl (s, lines, vlines)
{
  __hl_groups (s, lines, vlines, colors, regexps);
}
